[{"question": "What is the difference between iterators and generators? Some examples for when you would use each case would be helpful.", "answers": ["iterator is a more general concept: any object whose class has a __next__ method (next in Python 2) and an __iter__ method that does return self.", "In summary: Iterators are objects that have an __iter__ and a __next__ (next in Python 2) method. Generators provide an easy, built-in way to create instances of Iterators.", "Iterators:", "Adding an answer because none of the existing answers specifically address the confusion in the official literature.", "Everybody has a really nice and verbose answer with examples and I really appreciate it. I just wanted to give a short few lines answer for people who are still not quite clear conceptually:"]}, {"question": "Set_up: I have a .py file for each function I need to use in a program.", "answers": ["There isn't any need to add file.py while importing. Just write from file import function, and then call the function using function(a, b). The reason why this may not work, is because file is one of Python's core modules, so I suggest you change the name of your file.", "First of all you do not need a .py.", "You can do this in 2 ways. First is just to import the specific function you want from file.py. To do this use", "If your file is in the different package structure and you want to call it from a different package, then you can call it in that fashion:", "You can call the function from a different directory as well, in case you cannot or do not want to have the function in the same directory you are working. You can do this in two ways (perhaps there are more alternatives, but these are the ones that have worked for me)."]}, {"question": "list.append() is the obvious choice for adding to the end of a list.  Here's a reasonable explanation for the missing list.prepend().  Assuming my list is short and performance concerns are negligible, is ", "answers": ["The s.insert(0, x) form is the most common.", "If you can go the functional way, the following is pretty clear", "You don't usually want to repetitively prepend to a list in Python.", "If someone finds this question like me, here are my performance tests of proposed methods:", "In my opinion, the most elegant and idiomatic way of prepending an element or list to another list, in Python, is using the expansion operator * (also called unpacking operator),"]}, {"question": "I have the following DataFrame:", "answers": ["The idiomatic way to do this with Pandas is to use the .sample method of your dataframe to sample all rows without replacement:", "You can simply use sklearn for this", "You can shuffle the rows of a dataframe by indexing with a shuffled index. For this, you can eg use np.random.permutation (but np.random.choice is also a possibility):", "TL;DR: np.random.shuffle(ndarray) can do the job.\nSo, in your case ", "What is also useful, if you use it for Machine_learning and want to seperate always the same data, you could use:"]}, {"question": "I read through the zipfile documentation, but couldn't understand how to unzip a file, only how to zip a file. How do I unzip all the contents of a zip file into the same directory?", "answers": ["That's pretty much it!", "If you are using Python 3.2 or later:", "zipfile is a somewhat low-level library. Unless you need the specifics that it provides, you can get away with shutil's higher-level functions make_archive and unpack_archive.", "Use the extractall method, if you're using Python 2.6+", "You can also import only ZipFile:"]}, {"question": "How can I achieve the equivalents of SQL's IN and NOT IN?", "answers": ["You can use pd.Series.isin.", "Alternative solution that uses .query() method:", "Pandas offers two methods: Series.isin and DataFrame.isin for Series and DataFrames, respectively.", "I've been usually doing generic filtering over rows like this:", "Collating possible solutions from the answers:"]}, {"question": "NumPy proposes a way to get the index of the maximum value of an array via np.argmax.", "answers": ["Newer NumPy versions (1.8 and up) have a function called argpartition for this. To get the indices of the four largest elements, do", "The simplest I've been able to come up with is:", "Simpler yet:", "Use:", "If you happen to be working with a multidimensional array then you'll need to flatten and unravel the indices:"]}, {"question": "How can I represent an infinite number in python? No matter which number you enter in the program, no number should be greater than this representation of infinity.", "answers": ["In Python, you can do:", "Since Python 3.5 you can use math.inf:", "No one seems to have mentioned about the negative infinity explicitly, so I think I should add it.", "I don't know exactly what you are doing, but float(\"inf\") gives you a float Infinity, which is greater than any other number.", "There is an infinity in the NumPy library: from numpy import inf. To get negative infinity one can simply write -inf."]}, {"question": "What's the difference between:", "answers": ["means to call SomeBaseClass's __init__. while", "The benefits of super() in single-inheritance are minimal -- mostly, you don't have to hard-code the name of the base class into every method that uses its parent methods.", "I had played a bit with super(), and had recognized that we can change calling order.", "Doesn't all of this assume that the base class is a new-style class?", "When calling super() to resolve to a parent's version of a classmethod, instance method, or staticmethod, we want to pass the current class whose scope we are in as the first argument, to indicate which parent's scope we're trying to resolve to, and as a second argument the object of interest to indicate which object we're trying to apply that scope to."]}, {"question": "What is the quickest way to HTTP GET in Python if I know the content will be a string? I am searching the documentation for a quick one-liner like:", "answers": ["Python 3:", "You could use a library called requests.", "If you want solution with httplib2 to be oneliner consider instantiating anonymous Http object", "Have a look at httplib2, which - next to a lot of very useful features - provides exactly what you want.", "It's simple enough with the powerful urllib3 library."]}, {"question": "I have created a Pandas DataFrame", "answers": ["RukTech's answer, df.set_value('C', 'x', 10), is far and away faster than the options I've suggested below. However, it has been slated for deprecation.", "Update: The .set_value method is going to be deprecated. .iat/.at are good replacements, unfortunately pandas provides little documentation", "You can also use a conditional lookup using .loc as seen here:", "Try using df.loc[row_index,col_indexer] = value", "The recommended way (according to the maintainers) to set a value is:"]}, {"question": "I'm coming from the Java world and reading Bruce Eckels' Python 3 Patterns, Recipes and Idioms. ", "answers": ["It's cultural.  In Python, you don't write to other classes' instance or class variables.  In Java, nothing prevents you from doing the same if you really want to - after all, you can always edit the source of the class itself to achieve the same effect. Python drops that pretence of security and encourages programmers to be responsible. In practice, this works very nicely.", "Private variables in python is more or less a hack: the interpreter intentionally renames the variable.", "As correctly mentioned by many of the comments above, let's not forget the main goal of Access Modifiers: To help users of code understand what is supposed to change and what is supposed not to. When you see a private field you don't mess around with it. So it's mostly syntactic sugar which is easily achieved in Python by the _ and __.", "There is a variation of private variables in the underscore convention.", "As mentioned earlier, you can indicate that a variable or method is private by prefixing it with an underscore. If you don't feel like this is enough, you can always use the property decorator. Here's an example:"]}, {"question": "What I need to do", "answers": ["In general, to make a naive datetime timezone-aware, use the localize method:", "All of these examples use an external module, but you can achieve the same result using just the datetime module, as also presented in this SO answer:", "I wrote this Python 2 script in 2011, but never checked if it works on Python 3.", "I use this statement in Django to convert an unaware time to an aware:", "Python 3.9 adds the zoneinfo module so now only the standard library is needed!"]}, {"question": "I found some answers online, but I have no experience with regular expressions, which I believe is what is needed here.", "answers": ["Luckily, Python has this built-in :)", "Do a str.replace('; ', ', ') and then a str.split(', ')", "Here's a safe way for any iterable of delimiters, using regular expressions:", "In response to Jonathan's answer above, this only seems to work for certain delimiters.  For example:", "This is how the regex look like:"]}, {"question": "Having issue filtering my result dataframe with an or condition. I want my result df to extract all column var values that are above 0.25 and below -0.25.", "answers": ["The or and and python statements require truth-values. For pandas these are considered ambiguous so you should use \"bitwise\" | (or) or & (and) operations:", "Well pandas use bitwise & | and each condition should be wrapped in a ()", "For boolean logic, use & and |.", "Or, alternatively, you could use Operator module. More detailed information is here Python docs", "This excellent answer explains very well what is happening and provides a solution. I would like to add another solution that might be suitable in similar cases: using the query method:"]}, {"question": "I have a data frame df and I use several columns from it to groupby:", "answers": ["The simplest way to get row counts per group is by calling .size(), which returns a Series:", "On groupby object, the agg function can take a list to apply several aggregation methods at once. This should give you the result you need:", "Returns count, mean, std, and other useful statistics per-group.", "To get multiple stats, collapse the index, and retain column names:", "We can easily do it by using groupby and count. But, we should remember to use reset_index()."]}, {"question": "I've come across situations where a current version of a package seems not to be working and requires reinstallation. But pip install -U won't touch a package that is already up-to-date. I see how to force a reinstallation by first uninstalling (with pip uninstall) and then installing, but is there a way to simply force an \"update\" to a nominally current version in a single step?", "answers": ["When upgrading, reinstall all packages even if they are already up-to-date.", "You might want to have all three options: --upgrade and --force-reinstall ensures reinstallation, while --no-deps avoids reinstalling dependencies.", "If you want to reinstall packages specified in a requirements.txt file, without upgrading, so just reinstall the specific versions specified in the requirements.txt file:", "doesn't appear to force reinstall using python2.7 with pip-1.5", "In the case you need to force the reinstallation of pip itself you can do:"]}, {"question": "I want to create a series of lists, all of varying lengths. Each list will contain the same element e, repeated n times (where n = length of the list).", "answers": ["You can also write:", "Be careful when the item being repeated is a list. The list will not be cloned: all the elements will refer to the same list!", "Depending on your use-case, you want to use different techniques with different semantics.", "Itertools has a function just for that:", "As others have pointed out, using the * operator for a mutable object duplicates references, so if you change one you change them all. If you want to create independent instances of a mutable object, your xrange syntax is the most Pythonic way to do this. If you are bothered by having a named variable that is never used, you can use the anonymous underscore variable."]}, {"question": "I have four different files named: main.py, vector.py, entity.py and physics.py. I will not post all the code, just the imports, because I think that's where the error is (If you want, I can post more).", "answers": ["You have circular dependent imports. physics.py is imported from entity before class Ent is defined and physics tries to import entity that is already initializing. Remove the dependency to physics from entity module.", "While you should definitely avoid circular dependencies, you can defer imports in python.", "This is a circular dependency. It can be solved without any structural modifications to the code. The problem occurs because in vector you demand that entity be made available for use immediately, and vice versa. The reason for this problem is that you asking to access the contents of the module before it is ready -- by using from x import y. This is essentially the same as", "To make logic clear is very important. This problem appear, because the reference become a dead loop.", "In my case, I was working in a Jupyter notebook and this was happening due the import already being cached from when I had defined the class/function inside my working file. "]}, {"question": "I've got a dict that has a whole bunch of entries. I'm only interested in a select few of them. Is there an easy way to prune all the other ones out?", "answers": ["Constructing a new dict: ", "Slightly more elegant dict comprehension:", "Here's an example in python 2.6:", "You can do that with project function from my funcy library:", "Code 1:"]}, {"question": "Given the name of a Python package that can be installed with pip, is there any way to find out a list of all the possible versions of it that pip could install? Right now it's trial and error.", "answers": ["For pip >= 21.2 use:", "(update: As of March 2020, many people have reported that yolk, installed via pip install yolk3k, only returns latest version.  Chris's answer seems to have the most upvotes and worked for me)", "You don't need a third party package to get this information. pypi provides simple JSON feeds for all packages under", "Update:\nAs of Sep 2017 this method no longer works: --no-install was removed in pip 7", "I came up with dead-simple bash script. Thanks to jq's author."]}, {"question": "I want to add an item to an existing dictionary in Python. For example, this is my dictionary:", "answers": ["Easy as py.", "It can be as simple as:", "It occurred to me that you may have actually be asking how to implement the + operator for dictionaries, the following seems to work:"]}, {"question": "I am working with code that throws a lot of (for me at the moment) useless warnings using the warnings library. Reading (/scanning) the documentation I only found a way to disable warnings for single functions. But I don't want to change so much of the code.", "answers": ["Look at the Temporarily Suppressing Warnings section of the Python docs:", "There's the -W option.", "You can also define an environment variable (new feature in 2010 - i.e. python 2.7)", "If you don't want something complicated, then: ", "This is an old question but there is some newer guidance in PEP 565 that to turn off all warnings if you're writing a python application you should use:"]}, {"question": "How does one round a number UP in Python?", "answers": ["The ceil (ceiling) function:", "I know this answer is for a question from a while back, but if you don't want to import math and you just want to round up, this works for me.", "Interesting Python 2.x issue to keep in mind:", "If working with integers, one way of rounding up is to take advantage of the fact that // rounds down: Just do the division on the negative number, then negate the answer.  No import, floating point, or conditional needed.", "You might also like numpy:"]}, {"question": "Is there an easy way with Python f-strings to fix the number of digits after the decimal point? (Specifically f-strings, not other string formatting options like .format or %)", "answers": ["Include the type specifier in your format expression:", "When it comes to float numbers, you can use format specifiers:", "Adding to Rob\u1d69's answer: in case you want to print rather large numbers, using thousand separators can be a great help (note the comma).", "Adding to Rob's answer, you can use format specifiers with f strings (more here).", "Going further, Format strings have the below syntax. As you can see there is a lot more that can be done."]}, {"question": "Is there any way to make pip play well with multiple versions of Python? For example, I want to use pip to explicitly install things to either my site 2.5 installation or my site 2.6 installation.", "answers": ["The current recommendation is to use python -m pip, where python is the version of Python you would like to use. This is the recommendation because it works across all versions of Python, and in all forms of virtualenv. For example:", "On Windows, you can execute the pip module using a given Python version through the Python launcher, py.exe, if you chose to install it during Python 3 setup.", "/path/to/python2.{5,6} /path/to/pip install PackageName doesn't work?", "I had python 2.6 installed by default (Amazon EC2 AMI), but needed python2.7 plus some external packages for my application. Assuming you already installed python2.7 alongside with default python (2.6 in my case). Here is how to install pip and packages for non-default python2.7", "It worked for me in windows this way:"]}, {"question": "I am trying to fix how python plots my data.", "answers": ["You could explicitly set where you want to tick marks with plt.xticks:", "Another approach is to set the axis locator:", "I like this solution (from the Matplotlib Plotting Cookbook):", "In case anyone is interested in a general one-liner, simply get the current ticks and use it to set the new ticks by sampling every other tick.", "This is a bit hacky, but by far the cleanest/easiest to understand example that I've found to do this. It's from an answer on SO here:"]}, {"question": "I have a Unicode string in Python, and I would like to remove all the accents (diacritics).", "answers": ["Unidecode is the correct answer for this. It transliterates any unicode string into the closest possible representation in ascii text.", "How about this:", "I just found this answer on the Web:", "Actually I work on project compatible python 2.6, 2.7 and 3.4 and I have to create IDs from free user entries. ", "This handles not only accents, but also \"strokes\" (as in \u00f8 etc.):"]}, {"question": "Does time.time() in the Python time module return the system's time or the time in UTC?", "answers": ["The time.time() function returns the number of seconds since the epoch, as seconds.  Note that the \"epoch\" is defined as the start of January 1st, 1970 in UTC.  So the epoch is defined in terms of UTC and establishes a global moment in time.  No matter where you are \"seconds past epoch\" (time.time()) returns the same value at the same moment.", "This is for the text form of a timestamp that can be used in your text files. (The title of the question was different in the past, so the introduction to this answer was changed to clarify how it could be interpreted as the time. [updated 2016-01-14])", "Based on the answer from #squiguy, to get a true timestamp I would type cast it from float. ", "The answer could be neither or both.", "To get a local timestamp using datetime library, Python 3.x"]}, {"question": "I need a way to get a dictionary value if its key exists, or simply return None, if it does not.", "answers": ["You can use dict.get()", "Wonder no more. It's built into the language.", "Use dict.get", "You should use the get() method from the dict class", "If you want a more transparent solution, you can subclass dict to get this behavior:"]}, {"question": "How can I get the position of a character inside a string in Python?", "answers": ["There are two string methods for this, find() and index().  The difference between the two is what happens when the search string isn't found.  find() returns -1  and index() raises a ValueError.", "Just for a sake of completeness, if you need to find all positions of a character in a string, you can do the following:", "\"Long winded\" way", "Just for completion, in the case I want to find the extension in a file name in order to check it, I need to find the last '.', in this case use rfind:", "What happens when the string contains a duplicate character?\nfrom my experience with index() I saw that for duplicate you get back the same index."]}, {"question": "I want to fill out a string with spaces. I know that the following works for zero's:", "answers": ["You can do this with str.ljust(width[, fillchar]):", "For a flexible method that works even when formatting complicated string, you probably should use the string-formatting mini-language,", "The new(ish) string format method lets you do some fun stuff with nested keyword arguments. The simplest case:", "You can try this:", "Correct way of doing this would be to use Python's format syntax as described in the official documentation"]}, {"question": "Dictionaries are ordered in Python 3.6 (under the CPython implementation at least) unlike in previous incarnations. This seems like a substantial change, but it's only a short paragraph in the documentation. It is described as a CPython implementation detail rather than a language feature, but also implies this may become standard in the future.", "answers": ["Are dictionaries ordered in Python 3.6+?", "Below is answering the original first question:", "Update:\nGuido van Rossum announced on the mailing list that as of Python 3.7 dicts in all Python implementations must preserve insertion order.", "I wanted to add to the discussion above but don't have the reputation to comment.", "To fully answer this question in 2020, let me quote several statements from official Python docs:"]}, {"question": "I am trying to pass a list as an argument to a command line program. Is there an argparse option to pass a list as option?", "answers": ["Use the nargs option or the 'append' setting of the action option (depending on how you want the user interface to behave).", "I prefer passing a delimited string which I parse later in the script. The reasons for this are; the list can be of any type int or str, and sometimes using nargs I run into problems if there are multiple optional arguments and positional arguments.", "Additionally to nargs, you might want to use choices if you know the list in advance:", "Using nargs parameter in argparse's add_argument method", "If you are intending to make a single switch take multiple parameters, then you use nargs='+'. If your example '-l' is actually taking integers:"]}, {"question": "I'm just trying to streamline one of my classes and have introduced some functionality in the same style as the flyweight design pattern.", "answers": ["Use __new__ when you need to control\nthe creation of a new instance.", "__new__ is static class method, while __init__ is instance method. \n__new__ has to create the instance first, so __init__ can initialize it. Note that __init__ takes self as parameter. Until you create instance there is no self.", "In most well-known OO languages, an expression like SomeClass(arg1, arg2) will allocate a new instance, initialise the instance's attributes, and then return it.", "To quote the documentation:", "I realize that this question is quite old but I had a similar issue.\nThe following did what I wanted:"]}, {"question": "How to set the current working directory in Python?", "answers": ["Try os.chdir", "Perhaps this is what you are looking for:", "To set the working directory:", "It work for Mac also ", "people using pandas package"]}, {"question": "After you train a model in Tensorflow: ", "answers": ["I am improving my answer to add more details for saving and restoring models. ", "In (and after) TensorFlow version 0.11.0RC1, you can save and restore your model directly by calling tf.train.export_meta_graph and tf.train.import_meta_graph according to https://www.tensorflow.org/programmers_guide/meta_graph.", "Adapted from the docs", "For TensorFlow version < 0.11.0RC1:", "My environment: Python 3.6, Tensorflow 1.3.0"]}, {"question": "Just like C, you can break a long line into multiple short lines. But in Python, if I do this, there will be an indent error... Is it possible?", "answers": ["From PEP 8 - Style Guide for Python Code:", "There is more than one way to do it.", "If you want to assign a long string to variable, you can do it as below:", "It works in Python too:", "When trying to enter continuous text (say, a query) do not put commas at the end of the line or you will get a list of strings instead of one long string:"]}, {"question": "How would one create an iterative function (or iterator object) in python?", "answers": ["Iterator objects in python conform to the iterator protocol, which basically means they provide two methods: __iter__()  and  __next__().  ", "There are four ways to build an iterative function:", "I see some of you doing return self in __iter__. I just wanted to note that __iter__ itself can be a generator (thus removing the need for __next__ and raising StopIteration exceptions)", "First of all the itertools module is incredibly useful for all sorts of cases in which an iterator would be useful, but here is all you need to create an iterator in python:", "This question is about iterable objects, not about iterators. In Python, sequences are iterable too so one way to make an iterable class is to  make it behave like a sequence, i.e. give it __getitem__ and __len__ methods. I have tested this on Python 2 and 3."]}, {"question": "Very similar to this question but with the difference that my figure can be as large as it needs to be.", "answers": ["Try using plt.tight_layout", "You can use plt.subplots_adjust to change the spacing between the subplots (source)", "I found that subplots_adjust(hspace = 0.001) is what ended up working for me. When I use space = None, there is still white space between each plot. Setting it to something very close to zero however seems to force them to line up. What I've uploaded here isn't the most elegant piece of code, but you can see how the hspace works. ", "Similar to tight_layout matplotlib now (as of version 2.2) provides constrained_layout. In contrast to tight_layout, which may be called any time in the code for a single optimized layout, constrained_layout is a property, which may be active and will optimze the layout before every drawing step. ", "The plt.subplots_adjust method:"]}, {"question": "Is there a way to select pytest tests to run from a file?\nFor example, a file foo.txt containing a list of tests to be executed:", "answers": ["You can use -k option to run test cases with different patterns:", "Pytest supports several ways to run and select tests from the command-line.", "My answer provides a ways to run a subset of test in different scenarios.", "Method 1: Randomly selected tests. Long and ugly.", "If you have the same method name in two different classes and you just want to run one of them, this works:"]}, {"question": "I have both python2.7 and python3.2 installed in Ubuntu 12.04.\nThe symbolic link python links to python2.7.", "answers": ["Ubuntu 12.10+ and Fedora 13+ have a package called python3-pip which will install pip-3.2 (or pip-3.3, pip-3.4 or pip3 for newer versions) without needing this jumping through hoops.", "You may want to build a virtualenv of python3, then install packages of python3 after activating the virtualenv. So your system won't be messed up :)", "Source: Shashank Bharadwaj's comment", "Well, on ubuntu 13.10/14.04, things are a little different.", "The easiest way to install latest pip2/pip3 and corresponding packages:"]}, {"question": "As we all know, there's list comprehension, like", "answers": ["You can use a generator expression:", "Raymond Hettinger (one of the Python core developers) had this to say about tuples in a recent tweet:", "Since Python 3.5, you can also use splat * unpacking syntax to unpack a generator expresion:", "As another poster macm mentioned, the fastest way to create a tuple from a generator is tuple([generator]).", "Comprehension works by looping or iterating over items and assigning them into a container, a Tuple is unable to receive assignments."]}, {"question": "I have a function in python that can either return a bool or a list. Is there a way to specify the return types using type hints?", "answers": ["From the documentation", "In case anyone landed here in search of \"how to specify types of multiple return values?\", use Tuple[type_value1, ..., type_valueN]", "The statement def foo(client_id: str) -> list or bool: when evaluated is equivalent to\ndef foo(client_id: str) -> list: and will therefore not do what you want.", "Python 3.10 (use |): Example for a function which takes a single argument that is either an int or str and returns either an int or str:", "In base Python simply do:"]}, {"question": "Simple question here:  I'm trying to get the size of my legend using matplotlib.pyplot to be smaller (i.e., the text to be smaller). The code I'm using goes something like this:", "answers": ["You can set an individual font size for the legend by adjusting the prop keyword. ", "using import matplotlib.pyplot as plt", "This should do", "There are also a few named fontsizes, apart from the size in points:", "Now in 2021, with matplotlib 3.4.2 you can set your legend fonts with"]}, {"question": "In the tensorflow API docs they use a keyword called logits. What is it? A lot of methods are written like:", "answers": ["The softmax+logits simply means that the function operates on the unscaled output of earlier layers and that the relative scale to understand the units is linear.  It means, in particular, the sum of the inputs may not equal 1, that the values are not probabilities (you might have an input of 5). Internally, it first applies softmax to the unscaled output, and then and then computes the cross entropy of those values vs. what they \"should\" be as defined by the labels.", "Short version:", "tf.nn.softmax computes the forward propagation through a softmax layer. You use it during evaluation of the model when you compute the probabilities that the model outputs.", "When we wish to constrain an output between 0 and 1, but our model architecture outputs unconstrained values, we can add a normalisation layer to enforce this.", "Above answers have enough description for the asked question."]}, {"question": "", "answers": ["Use:", "In case you want to store it to a file, you solve it using bbox_inches=\"tight\" argument:", "An easy option is to configure matplotlib to automatically adjust the plot size. It works perfectly for me and I'm not sure why it's not activated by default.", "plt.autoscale() worked for me.", "You can also set custom padding as defaults in your $HOME/.matplotlib/matplotlib_rc as follows.  In the example below I have modified both the bottom and left out-of-the-box padding:"]}, {"question": "I'm running Mountain Lion and the basic default Python version is 2.7. I downloaded Python 3.3 and want to set it as default.", "answers": ["Changing the default python executable's version system-wide could break some applications that depend on python2.", "You can solve it by symbolic link.", "Open ~/.bash_profile file.", "I encountered this issue as well, so I thought I should post an updated answer. Please note that this will only apply to a Mac-based setup (I haven't tried it with Windows or any flavor of Linux). The simplest way to get this working is to install Python via Brew. If you don't have brew installed, you will need to do that first. Once installed, do the following in at the terminal:", "Go to terminal type:"]}, {"question": "It's well known that comparing floats for equality is a little fiddly due to rounding and precision issues.", "answers": ["Python 3.5 adds the math.isclose and cmath.isclose functions as described in PEP 485.", "Is something as simple as the following not good enough?", "I would agree that Gareth's answer is probably most appropriate as a lightweight function/solution.", "Use Python's decimal module, which provides the Decimal class.", "I'm not aware of anything in the Python standard library (or elsewhere) that implements Dawson's AlmostEqual2sComplement function. If that's the sort of behaviour you want, you'll have to implement it yourself. (In which case, rather than using Dawson's clever bitwise hacks you'd probably do better to use more conventional tests of the form if abs(a-b) <= eps1*(abs(a)+abs(b)) + eps2 or similar. To get Dawson-like behaviour you might say something like if abs(a-b) <= eps*max(EPS,abs(a),abs(b)) for some small fixed EPS; this isn't exactly the same as Dawson, but it's similar in spirit."]}, {"question": "\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\r\n                ", "answers": ["If you're looking for something lightweight checkout schedule:", "You could just use normal Python argument passing syntax to specify your crontab.  For example, suppose we define an Event class as below:", "More or less same as above but concurrent using gevent :)", "None of the listed solutions even attempt to parse a complex cron schedule string. So, here is my version, using croniter. Basic gist:", "There isn't a \"pure python\" way to do this because some other process would have to launch python in order to run your solution.  Every platform will have one or twenty different ways to launch processes and monitor their progress.  On unix platforms, cron is the old standard.  On Mac OS X there is also launchd, which combines cron-like launching with watchdog functionality that can keep your process alive if that's what you want. Once python is running, then you can use the sched module to schedule tasks."]}, {"question": "I have a dataframe along the lines of the below:", "answers": ["If you only have two choices to select from:", "List comprehension is another way to create another column conditionally. If you are working with object dtypes in columns, like in your example, list comprehensions typically outperform most other methods.", "Another way in which this could be achieved is ", "The following is slower than the approaches timed here, but we can compute the extra column based on the contents of more than one column, and more than two values can be computed for the extra column.", "Here's yet another way to skin this cat, using a dictionary to map new values onto the keys in the list:"]}, {"question": "I would like to include image in a jupyter notebook.", "answers": ["You mustn't use quotation marks around the name of the image files in markdown!", "There are several ways to post an image in Jupyter notebooks:", "Alternatively, you can use a plain HTML <img src>, which allows you to change height and width and is still read by the markdown interpreter:", "Note: You should have a local copy of the image on your computer", "I know this is not fully relevant, but since this answer is ranked first many a times  when you search 'how to display images in Jupyter', please consider this answer as well. "]}, {"question": "I have a directory which hosts all of my Django apps (C:\\My_Projects). I want to add this directory to my PYTHONPATH so I can call the apps directly.", "answers": ["You know what has worked for me really well on windows.", "Windows 7 Professional\nI Modified @mongoose_za's answer to make it easier to change the python version:", "From Windows command line:", "Just append your installation path (ex. C:\\Python27\\) to the PATH variable in System variables. Then close and open your command line and type 'python'.", "These solutions work, but they work for your code ONLY on your machine. I would add a couple of lines to your code that look like this:"]}, {"question": "How do I format a floating number to a fixed width with the following requirements:", "answers": ["prints", "It has been a few years since this was answered, but as of Python 3.6 (PEP498) you could use the new f-strings:", "In python3 the following works:", "See Python 3.x format string syntax:", "You can also left pad with zeros. For example if you want number to have 9 characters length, left padded with zeros use: "]}, {"question": "I query a model:", "answers": ["If you mean to do aggregation you can use the aggregation features of the ORM:", "An easy solution, but not the proper way is to use raw SQL:", "You can also use the regroup template tag to group by attributes. From the docs:", "Django does not support free group by queries. I learned it in the very bad way. ORM is not designed to support stuff like what you want to do, without using custom SQL. You are limited to:", "The following module allows you to group Django models and still work with a QuerySet in the result: https://github.com/kako-nawao/django-group-by"]}, {"question": "I'm using argparse in Python 2.7 for parsing input options. One of my options is a multiple choice. I want to make a list in its help text, e.g.", "answers": ["Try using RawTextHelpFormatter:", "If you just want to override the one option, you should not use RawTextHelpFormatter. Instead subclass the HelpFormatter and provide a special intro for the options that should be handled \"raw\" (I use \"R|rest of help\"):", "Another easy way to do it is to include textwrap.", "I've faced similar issue (Python 2.7.6). I've tried to break down description section into several lines using RawTextHelpFormatter:", "I admit I found this a very frustrating experience as it seems many others have, given the number of solutions I see posted and the number of times I see this asked across the web. But I find most of these solutions far too complicated for my likes and I'd like share the tersest simplest solution I have for it."]}, {"question": "I am not sure why we need finally in try...except...finally statements. In my opinion, this code block", "answers": ["It makes a difference if you return early:", "You can use finally to make sure files or resources are closed or released regardless of whether an exception occurs, even if you don't catch the exception. (Or if you don't catch that specific exception.)", "They are not equivalent. finally code is run no matter what else happens*.\nIt is useful for cleanup code that has to run.", "To add to the other answers above, the finally clause executes no matter what whereas the else clause executes only if an exception was not raised.", "As explained in the documentation, the finally clause is intended to define clean-up actions that must be executed under all circumstances."]}, {"question": "I want to completely remove Python 2.7 from my Mac OS X 10.6.4. I managed to remove the entry from the PATH variable by reverting my .bash_profile. But I also want to remove all directories, files, symlinks, and entries that got installed by the Python 2.7 install package. I've got the install package from http://www.python.org/. What directories/files/configuration file entries do I need to remove? Is there a list somewhere?", "answers": ["NOTE: The steps listed below do not affect the Apple-supplied Python 2.7; they only remove a third-party Python framework, like those installed by python.org installers.", "This one works:", "Create the symlink to latest version ", "If you installed it using the PKG installer, you can do:", "Trying to uninstall Python with "]}, {"question": "I need to produce a screencast of an ipython session, and to avoid confusing viewers, I want to disable all warnings emitted by warnings.warn calls from different packages. Is there a way to configure the ipythonrc file to automatically disable all such warnings?", "answers": ["I eventually figured it out. Place:", "I hide the warnings in the pink boxes by running the following code in a cell:", "The accepted answer does not work in Jupyter (at least when using some libraries). ", "For jupyter lab this should work (@Alasja)"]}, {"question": "How would you say does not equal?", "answers": ["Use !=. See comparison operators. For comparing object identities, you can use the keyword is and its negation is not.", "Not equal  !=  (vs equal ==)", "There's the != (not equal) operator that returns True when two values differ, though be careful with the types because \"1\" != 1. This will always return True and \"1\" == 1 will always return False, since the types differ. Python is dynamically, but strongly typed, and other statically typed languages would complain about comparing different types.", "You can use both != or <>.", "Seeing as everyone else has already listed most of the other ways to say not equal I will just add:"]}, {"question": "When I try to use a print statement in Python, it gives me this error:", "answers": ["This error message means that you are attempting to use Python 3 to follow an example or run a program that uses the Python 2 print statement:", "Unfortunately, the old xkcd comic isn't completely up to date anymore.", "There is a change in syntax from Python 2 to Python 3.\nIn Python 2,", "Basically, since Python 3.x you need to use print with parenthesis.", "If your code should work in both Python 2 and 3, you can achieve this by loading this at the beginning of your program:"]}, {"question": "Like most Python developers, I typically keep a console window open with the Python interpreter running to test commands, dir() stuff, help() stuff, etc.", "answers": ["As you mentioned, you can do a system call:", "here something handy that is a little more cross-platform", "Well, here's a quick hack:", "This is the simplest thing you can do and it doesn't require any additional libraries. It clears the screen and returns >>> to the top left corner.", "You have number of ways doing it on Windows:"]}, {"question": "What does np.random.seed do in the below code from a Scikit-Learn tutorial? I'm not very familiar with NumPy's random state generator stuff, so I'd really appreciate a layman's terms explanation of this.", "answers": ["np.random.seed(0) makes the random numbers predictable", "If you set the np.random.seed(a_fixed_number) every time you call the numpy's other random function, the result will be the same:", "As noted, numpy.random.seed(0) sets the random seed to 0, so the pseudo random numbers you get from random will start from the same point. This can be good for debuging in some cases.  HOWEVER, after some reading, this seems to be the wrong way to go at it, if you have threads because it is not thread safe.", "I have used this very often in neural networks. It is well known that when we start training a neural network we randomly initialise the weights. The model is trained on these weights on a particular dataset. After number of epochs you get trained set of weights. ", "I hope to give a really short answer:"]}, {"question": "I have a dataset", "answers": ["Use groupby and count:", "If you want to apply to all columns you can use:", "This short little line of code will give you the output you want.", "value_counts - Returns object containing counts of unique values", "In 0.18.1 groupby together with count does not give the frequency of unique values:"]}, {"question": "What is the way to update a package using pip?\nthose do not work:", "answers": ["The way is", "For a non-specific package and a more general solution, you can check out pip-review. A tool that checks what packages could/should be updated.", "use this code in teminal :", "tl;dr script to update all installed packages", "Save as xx.py\nThen run Python3 xx.py\nEnvironment: python3.5+ pip10.0+"]}, {"question": "I've heard it said that multiline lambdas can't be added in Python because they would clash syntactically with the other syntax constructs in Python.  I was thinking about this on the bus today and realized I couldn't think of a single Python construct that multiline lambdas clash with.  Given that I know the language pretty well, this surprised me.", "answers": ["Guido van Rossum (the inventor of Python) answers this exact question himself in an old blog post.\nBasically, he admits that it's theoretically possible, but that any proposed solution would be un-Pythonic:", "Look at the following:", "This is generally very ugly (but sometimes the alternatives are even more ugly), so a workaround is to make a braces expression:", "A couple of relevant links:", "[Edit Edit] Since this question is somehow still active 12 years after being asked. I will continue the tradition of amending my answer every 4 years or so."]}, {"question": "Do you know if there is a built-in function to build a dictionary from an arbitrary object? I'd like to do something like this:", "answers": ["Note that best practice in Python 2.7 is to use new-style classes (not needed with Python 3), i.e.", "Instead of x.__dict__, it's actually more pythonic to use vars(x).", "The dir builtin will give you all the object's attributes, including special methods like __str__, __dict__ and a whole bunch of others which you probably don't want. But you can do something like:", "I've settled with a combination of both answers:", "I thought I'd take some time to show you how you can translate an object to dict via dict(obj)."]}, {"question": "If I have a class...", "answers": ["In Python, this:", "In simple words.", "Something else to consider when this type of error is encountered:", "Newcomer to Python, I had this issue when I was using the Python's ** feature in a wrong way. Trying to call this definition from somewhere:", "As mentioned in other answers - when you use an instance method you need to pass self as the first argument - this is the source of the error."]}, {"question": "In Python, how do I read in a binary file and loop over each byte of that file?", "answers": ["Python 2.4 and Earlier", "This generator yields bytes from a file, reading the file in chunks:", "If the file is not too big that holding it in memory is a problem:", "To read a file \u2014 one byte at a time (ignoring the buffering)  \u2014 you could use the two-argument iter(callable, sentinel) built-in function:", "New in Python 3.5 is the pathlib module, which has a convenience method specifically to read in a file as bytes, allowing us to iterate over the bytes. I consider this a decent (if quick and dirty) answer:"]}, {"question": "Is there a way to find all Python PyPI packages that were installed with easy_install or pip?  I mean, excluding everything that was/is installed with the distributions tools (in this case apt-get on Debian).", "answers": ["pip freeze will output a list of installed packages and their versions. It also allows you to write those packages to a file that can later be used to set up a new environment.", "As of version 1.3 of pip you can now use pip list", "If anyone is wondering you can use the 'pip show' command.", "Start with:", "If Debian behaves like recent Ubuntu versions regarding pip install default target, it's dead easy: it installs to /usr/local/lib/ instead of /usr/lib (apt default target). Check https://askubuntu.com/questions/173323/how-do-i-detect-and-remove-python-packages-installed-via-pip/259747#259747"]}, {"question": "I'd like to call a function in python using a dictionary.", "answers": ["Figured it out for myself in the end. It is simple, I was just missing the ** operator to unpack the dictionary", "A few extra details that might be helpful to know (questions I had after reading this and went and tested):", "In python, this is called \"unpacking\", and you can find a bit about it in the tutorial. The documentation of it sucks, I agree, especially because of how fantasically useful it is.", "Here ya go - works just any other iterable:"]}, {"question": "I used to use perl -c programfile to check the syntax of a Perl program and then exit without executing it. Is there an equivalent way to do this for a Python script?", "answers": ["You can check the syntax by compiling it:", "You can use these tools:", "Save this as checker.py and run python checker.py yourpyfile.py.", "Here's another solution, using the ast module:", "Pyflakes does what you ask, it just checks the syntax. From the docs: "]}, {"question": "Given a DataFrame with a column \"BoolCol\", we want to find the indexes of the DataFrame in which the values for \"BoolCol\" == True", "answers": ["df.iloc[i] returns the ith row of df. i does not refer to the index label, i is a 0-based index.", "Can be done using numpy where() function:", "If you want to use your dataframe object only once, use:", "Simple way is to reset the index of the DataFrame prior to filtering:", "First you may check query when the target column is type bool  (PS: about how to use it please check link )"]}, {"question": "I have a Python program that uses YAML.  I attempted to install it on a new server using pip install yaml and it returns the following:", "answers": ["You could try the search feature in pip, ", "pip install pyyaml", "Update: Nowadays installing is done with pip, and for many users a wheel may be available (depending on your Mac and required version of PyYaml). In some cases libyaml is still required to build the C extension (on mac); this can be done with:", "If libyaml is not found or compiled PyYAML can do without it on Mavericks.", "There are three YAML capable packages. Syck (pip install syck) which implements the YAML 1.0 specification from 2002; PyYAML (pip install pyyaml) which follows the YAML 1.1 specification from 2004; and ruamel.yaml which follows the latest (YAML 1.2, from 2009) specification."]}, {"question": "If you are creating a 1d array, you can implement it as a List, or else use the 'array' module in the standard library.  I have always used Lists for 1d arrays.", "answers": ["Basically, Python lists are very flexible and can hold completely heterogeneous, arbitrary data, and they can be appended to very efficiently, in amortized constant time.  If you need to shrink and grow your list time-efficiently and without hassle, they are the way to go.  But they use a lot more space than C arrays, in part because each item in the list requires the construction of an individual Python object, even for data that could be represented with simple C types (e.g. float or uint64_t).", "For almost all cases the normal list is the right choice. The arrays module is more like a thin wrapper over C arrays, which give you kind of strongly typed containers (see docs), with access to more C-like types such as signed/unsigned short or double, which are not part of the built-in types. I'd say use the arrays module only if you really need it, in all other cases stick with lists.", "The array module is kind of one of those things that you probably don't have a need for if you don't know why you would use it (and take note that I'm not trying to say that in a condescending manner!).  Most of the time, the array module is used to interface with C code.  To give you a more direct answer to your question about performance:", "It's a trade off !", "My understanding is that arrays are stored more efficiently (i.e. as contiguous blocks of memory vs. pointers to Python objects), but I am not aware of any performance benefit.  Additionally, with arrays you must store primitives of the same type, whereas lists can store anything."]}, {"question": "I have this string:", "answers": ["A simple possibility (if you'd rather avoid REs) is", "A regular expression can be used to offer more control over the whitespace characters that are combined.", "For completeness, you can also use:"]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["You can have a regular Python module, say config.py, like this:", "The sample config you provided is actually valid YAML.  In fact, YAML meets all of your demands, is implemented in a large number of languages, and is extremely human friendly.  I would highly recommend you use it.  The PyYAML project provides a nice python module, that implements YAML.  ", "I Found this the most useful and easy to use\nhttps://wiki.python.org/moin/ConfigParserExamples", "Yaml and Json are the simplest and most commonly used file formats to store settings/config. PyYaml can be used to parse yaml. Json is already part of python from 2.5. Yaml is a superset of Json. Json will solve most uses cases except multi line strings where escaping is required. Yaml takes care of these cases too."]}, {"question": "I am trying to implement a \"Digit Recognition OCR\" in OpenCV-Python (cv2). It is just for learning purposes. I would like to learn both KNearest and SVM features in OpenCV. ", "answers": ["Well, I decided to workout myself on my question to solve above problem. What I wanted is to implement a simpl OCR using KNearest or SVM features in OpenCV. And below is what I did and how. ( it is just for learning how to use KNearest for simple OCR purposes).", "For those who interested in C++ code can refer below code. \nThanks Abid Rahman for the nice explanation.", "I had some problems to generate the training data, because it was hard sometimes to identify the last selected letter, so I rotated the image 1.5 degrees. Now each character is selected in order and the test still shows a 100% accuracy rate after training. Here is the code:"]}, {"question": "I need to install a package from PyPi straight within my script.\nMaybe there's some module or distutils (distribute, pip etc.) feature which allows me to just execute something like pypi.install('requests') and requests will be installed into my virtualenv.", "answers": ["The officially recommended way to install packages from a script is by calling pip's command-line interface via a subprocess. Most other answers presented here are not supported by pip. Furthermore since pip v10, all code has been moved to pip._internal precisely in order to make it clear to users that programmatic use of pip is not allowed.", "You can also use something like:", "If you want to use pip to install required package and import it after installation, you can use this code:", "This should work:", "i added some exception handling to @Aaron's answer."]}, {"question": "Is there a simple way to flatten a list of iterables with a list comprehension, or failing that, what would you all consider to be the best way to flatten a shallow list like this, balancing performance and readability?", "answers": ["If you're just looking to iterate over a flattened version of the data structure and don't need an indexable sequence, consider itertools.chain and company.", "You almost have it! The way to do nested list comprehensions is to put the for statements in the same order as they would go in regular nested for statements.", "@S.Lott: You inspired me to write a timeit app.", "sum(list_of_lists, []) would flatten it.", "This solution works for arbitrary nesting depths - not just the \"list of lists\" depth that some (all?) of the other solutions are limited to:"]}, {"question": "I have a dataframe with over 200 columns. The issue is as they were generated the order is", "answers": ["This assumes that sorting the column names will give the order you want.  If your column names won't sort lexicographically (e.g., if you want column Q10.3 to appear after Q9.1), you'll need to sort differently, but that has nothing to do with pandas.", "You can also do more succinctly:", "You can just do:", "Tweet's answer can be passed to BrenBarn's answer above with ", "For several columns, You can put columns order what you want:"]}, {"question": "I want to iterate through the methods in a class, or handle class or instance objects differently based on the methods present. How do I get a list of class methods?", "answers": ["An example (listing the methods of the optparse.OptionParser class):", "There is the dir(theobject) method to list all the fields and methods of your object (as a tuple) and the inspect module (as codeape write) to list the fields and methods with their doc (in \"\"\").", "Python 3.x answer without external libraries", "Say you want to know all methods associated with list class\nJust Type The following ", "Try the property __dict__."]}, {"question": "I am in the process of learning Python and I have reached the section about the pass statement. The guide I'm using defines it as being a null statement that is commonly used as a placeholder.", "answers": ["Suppose you are designing a new class with some methods that you don't want to implement, yet.", "Python has the syntactical requirement that code blocks (after if, except, def, class etc.) cannot be empty. Empty code blocks are however useful in a variety of different contexts, such as in examples below, which are the most frequent use cases I have seen.", "Besides its use as a placeholder for unimplemented functions, pass can be useful in filling out an if-else statement (\"Explicit is better than implicit.\")", "The best and most accurate way to think of pass is as a way to explicitly tell the interpreter to do nothing. In the same way the following code:", "A common use case where it can be used 'as is' is to override a class just to create a type (which is otherwise the same as the superclass), e.g."]}, {"question": "How do I get the number of elements in a list in jinja2 template?", "answers": ["You can also use this syntax in expressions like", "Alex' comment looks good but I was still confused with using range.\nThe following worked for me while working on a for condition using length within range.", "I've experienced a problem with length of None, which leads to Internal Server Error: TypeError: object of type 'NoneType' has no len()", "If for loop with array is used then you can use the following"]}, {"question": "Since Python's string can't be changed, I was wondering how to concatenate a string more efficiently?", "answers": ["The best way of appending a string to a string variable is to use + or +=. This is because it's readable and fast. They are also just as fast, which one you choose is a matter of taste, the latter one is the most common. Here are timings with the timeit module:", "If you are concatenating a lot of values, then neither. Appending a list is expensive. You can use StringIO for that. Especially if you are building it up over a lot of operations.", "In Python >= 3.6, the new f-string is an efficient way to concatenate a string.", "Using in place string concatenation by '+' is THE WORST method of concatenation in terms of stability and cross implementation as it does not support all values. PEP8 standard discourages this and encourages the use of format(), join() and append() for long term use. ", "You write this function"]}, {"question": "In Django doc,", "answers": ["Your understanding is mostly correct. You use select_related when the object that you're going to be selecting is a single object, so OneToOneField or a ForeignKey. You use prefetch_related when you're going to get a \"set\" of things, so ManyToManyFields as you stated or reverse ForeignKeys. Just to clarify what I mean by \"reverse ForeignKeys\" here's an example:", "Both methods achieve the same purpose, to forego unnecessary db queries. But they use different approaches for efficiency.", "Gone through the already posted answers. Just thought it would be better if I add an answer with actual example."]}, {"question": "It seems they canceled in Python 3 all the easy way to quickly load a script by removing execfile() ", "answers": ["According to the documentation, instead of ", "You are just supposed to read the file and exec the code yourself. 2to3 current replaces", "While exec(open(\"filename\").read()) is often given as an alternative to execfile(\"filename\"), it misses important details that execfile supported.", "As suggested on the python-dev mailinglist recently, the runpy module might be a viable alternative. Quoting from that message:", "This one is better, since it takes the globals and locals from the caller:"]}, {"question": "I am trying to subtract one date value from the value of datetime.datetime.today() to calculate how long ago something was. But it complains:", "answers": ["In the standard library, there is no cross-platform way to create aware timezones without creating your own timezone class. (Edit: Python 3.9 introduces zoneinfo in the standard library which does provide this functionality.)", "Get the current time, in a specific timezone:", "The standard library makes it much easier to specify UTC as the time zone:", "A one-liner using only the standard library works starting with Python 3.3. You can get a local timezone aware datetime object using astimezone (as suggested by johnchen902):", "Here's a stdlib solution that works on both Python 2 and 3:"]}, {"question": "Does Python support short-circuiting in boolean expressions?", "answers": ["Yep, both and and or operators short-circuit -- see the docs.", "Let's first define a useful function to determine if something is executed or not. A simple function that accepts an argument, prints a message and returns the input, unchanged.", "Yes. Try the following in your python interpreter:", "Yes, Python does support Short-circuit evaluation, minimal evaluation, or McCarthy evaluation for Boolean operators. It is used to reduce the number of evaluations for computing the output of boolean expression. Example -"]}, {"question": "I'm new to Python and Matplotlib, I would like to simply apply colormap to an image and write the resulting image, without using axes, labels, titles or anything usually automatically added by matplotlib. Here is what I did:", "answers": ["I think that the command axis('off') takes care of one of the problems more succinctly than changing each axis and the border separately. It still leaves the white space around the border however. Adding bbox_inches='tight' to the savefig command almost gets you there, you can see in the example below that the white space left is much smaller, but still present.", "I learned this trick from matehat, here:", "Possible simplest solution:", "No one mentioned imsave yet, which makes this a one-liner:", "This should remove all padding and borders:"]}, {"question": "I have a script named test1.py which is not in a module. It just has code that should execute when the script itself is run. There are no functions, classes, methods, etc. I have another script which runs as a service. I want to call test1.py from the script running as a service.", "answers": ["The usual way to do this is something like the following.", "This is possible in Python 2 using", "Another way:", "Using os you can make calls directly to your terminal. If you want to be even more specific you can concatenate your input string with local variables, ie.", "If you want test1.py to remain executable with the same functionality as when it's called inside service.py, then do something like:"]}, {"question": "I want to build a query for sunburnt(solr interface) using class inheritance and therefore adding key - value pairs together. The sunburnt interface takes keyword arguments. How can I transform a dict ({'type':'Event'}) into keyword arguments (type='Event')?", "answers": ["Use the double-star (aka double-splat?) operator:", "** operator would be helpful here. ", "Here is a complete example showing how to use the ** operator to pass values from a dictionary as keyword arguments."]}, {"question": "I have a directory that contains my Python unit tests. Each unit test module is of the form test_*.py. I am attempting to make a file called all_test.py that will, you guessed it, run all files in the aforementioned test form and return the result. I have tried two methods so far; both have failed. I will show the two methods, and I hope someone out there knows how to actually do this correctly.", "answers": ["With Python 2.7 and higher you don't have to write new code or use third-party tools to do this; recursive test execution via the command line is built-in.  Put an __init__.py in your test directory and:", "In python 3, if you're using unittest.TestCase:", "You could use a test runner that would do this for you.  nose is very good for example.  When run, it will find tests in the current tree and run them.", "This is now possible directly from unittest: unittest.TestLoader.discover.", "Well by studying the code above a bit (specifically using TextTestRunner and defaultTestLoader), I was able to get pretty close. Eventually I fixed my code by also just passing all test suites to a single suites constructor, rather than adding them \"manually\", which fixed my other problems. So here is my solution."]}, {"question": "In a program I'm writing I have Python use the re.search() function to find matches in a block of text and print the results. However, the program exits once it finds the first match in the block of text.", "answers": ["Use re.findall or re.finditer instead."]}, {"question": "What are the advantages and disadvantages of each?", "answers": ["Numpy matrices are strictly 2-dimensional, while numpy arrays (ndarrays) are\nN-dimensional.  Matrix objects are a subclass of ndarray, so they inherit all\nthe attributes and methods of ndarrays.", "Scipy.org recommends that you use arrays:", "Just to add one case to unutbu's list. ", "As per the official documents, it's not anymore advisable to use matrix class since it will be removed in the future.", "As others have mentioned, perhaps the main advantage of matrix was that it provided a convenient notation for matrix multiplication."]}, {"question": "I've been making Python scripts for simple tasks at work and never really bothered packaging them for others to use. Now I have been assigned to make a Python wrapper for a REST API. I have absolutely no idea on how to start and I need help.", "answers": ["A module is a file containing Python definitions and statements. The file name is the module name with the suffix .py", "Python 3 - UPDATED 18th November 2015", "Since nobody did cover this question of the OP yet:", "Once you have defined your chosen commands, you can simply drag and drop the saved file into the Lib folder in your python program files. ", "Make a file named \"hello.py\""]}, {"question": "I have a Python file which might have to support Python versions < 3.x and >= 3.x. Is there a way to introspect the Python runtime to know the version which it is running (for example, 2.6 or 3.2.x)?", "answers": ["Sure, take a look at sys.version and sys.version_info.", "Try this code, this should work:", "Per sys.hexversion and API and ABI Versioning:", "Just in case you want to see all of the gory details in human readable form, you can use:", "The best solution depends on how much code is incompatible. If there are a lot of places you need to support Python 2 and 3, six is the compatibility module. six.PY2 and six.PY3 are two booleans if you want to check the version."]}, {"question": "What's the easiest way to add an empty column to a pandas DataFrame object?  The best I've stumbled upon is something like", "answers": ["If I understand correctly, assignment should fill:", "To add to DSM's answer and building on this associated question, I'd split the approach into two cases:", "an even simpler solution is: ", "I like:", "Starting with v0.16.0, DF.assign() could be used to assign new columns (single/multiple) to a DF. These columns get inserted in alphabetical order at the end of the DF."]}, {"question": "\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\r\n                ", "answers": ["Try PDFMiner. It can extract text from PDF files as HTML, SGML or \"Tagged PDF\" format.", "The PDFMiner package has changed since codeape posted.  ", "Since none for these solutions support the latest version of PDFMiner I wrote a simple solution that will return text of a pdf using PDFMiner. This will work for those who are getting import errors with process_pdf ", "Pdftotext An open source program (part of Xpdf) which you could call from python (not what you asked for but might be useful). I've used it with no problems. I think google use it in google desktop.", "pyPDF works fine (assuming that you're working with well-formed PDFs).  If all you want is the text (with spaces), you can just do:"]}, {"question": "On my local machine, I run a python script which contains this line", "answers": ["Don't use os.system. It has been deprecated in favor of subprocess. From the docs: \"This module intends to replace several older modules and functions: os.system, os.spawn\".", "To somewhat expand on the earlier answers here, there are a number of details which are commonly overlooked.", "Call it with subprocess", "You can use subprocess, but I always felt that it was not a 'Pythonic' way of doing it. So I created Sultan (shameless plug) that makes it easy to run command line functions.", "It is possible you use the bash program, with the parameter -c for execute the commands:"]}, {"question": "How can I convert a DataFrame column of strings (in dd/mm/yyyy format) to datetimes?", "answers": ["The easiest way is to use to_datetime:", "If your date column is a string of the format '2017-01-01'\nyou can use pandas astype to convert it to datetime.", "You can use the following if you want to specify tricky formats:", "If you have a mixture of formats in your date, don't forget to set infer_datetime_format=True to make life easier."]}, {"question": "Right now I'm importing a fairly large CSV as a dataframe every time I run the script. Is there a good solution for keeping that dataframe constantly available in between runs so I don't have to spend all that time waiting for the script to run?", "answers": ["The easiest way is to pickle it using to_pickle:", "Although there are already some answers I found a nice comparison in which they tried several ways to serialize Pandas DataFrames: Efficiently Store Pandas DataFrames. ", "If I understand correctly, you're already using pandas.read_csv() but would like to speed up the development process so that you don't have to load the file in every time you edit your script, is that right? I have a few recommendations:", "Pickle works good!", "You can use feather format file. It is extremely fast."]}, {"question": "Is there a way to have a defaultdict(defaultdict(int)) in order to make the following code work?", "answers": ["Yes like this:", "The parameter to the defaultdict constructor is the function which will be called for building new elements. So let's use a lambda !", "I find it slightly more elegant to use partial:", "Previous answers have addressed how to make a two-levels or n-levels defaultdict.  In some cases you want an infinite one:", "For reference, it's possible to implement a generic nested defaultdict factory method through:"]}, {"question": "I'm curious, whether there is any way to print formatted numpy.arrays, e.g., in a way similar to this:", "answers": ["You can use set_printoptions to set the precision of the output:", "You can get a subset of the np.set_printoptions functionality from the np.array_str command, which applies only to a single print statement.", "Unutbu gave a really complete answer (they got a +1 from me too), but here is a lo-tech alternative:", "FYI Numpy 1.15 (release date pending) will include a context manager for setting print options locally. This means that the following will work the same as the corresponding example in the accepted answer (by unutbu and Neil G) without having to write your own context manager. E.g., using their example:", "The gem that makes it all too easy to obtain the result as a string (in today's numpy versions) is hidden in denis answer:\nnp.array2string"]}, {"question": "I am getting a ValueError: cannot reindex from a duplicate axis when I am trying to set an index to a certain value. I tried to reproduce this with a simple example, but I could not do it.", "answers": ["This error usually rises when you join / assign to a column when the index has duplicate values. Since you are assigning to a row, I suspect that there is a duplicate value in affinity_matrix.columns, perhaps not shown in your question.", "As others have said, you've probably got duplicate values in your original index. To find them do this:", "Indices with duplicate values often arise if you create a DataFrame by concatenating other DataFrames. IF you don't care about preserving the values of your index, and you want them to be unique values, when you concatenate the the data, set ignore_index=True.", "For people who are still struggling with this error, it can also happen if you accidentally create a duplicate column with the same name.  Remove duplicate columns like so:", "Simply skip the error using .values at the end."]}, {"question": "In C# there's a null-coalescing operator (written as ??) that allows for easy (short) null checking during assignment:", "answers": ["Ok, it must be clarified how the or operator works. It is a boolean operator, so it works in a boolean context. If the values are not boolean, they are converted to boolean for the purposes of the operator.", "Strictly,", "Here's a function that will return the first argument that isn't None:", "In case you need to nest more than one null coalescing operation such as:", "I realize this is answered, but there is another option when you're dealing with dict-like objects."]}]