[{"question": "What is the use of the yield keyword in Python? What does it do?", "answers": ["To understand what yield does, you must understand what generators are. And before you can understand generators, you must understand iterables.", "When you see a function with yield statements, apply this easy trick to understand what will happen:", "Think of it this way:", "The yield keyword is reduced to two simple facts:", "What does the yield keyword do in Python?"]}, {"question": "Given the following code, what does the if __name__ == \"__main__\": do?", "answers": ["It's boilerplate code that protects users from accidentally invoking the script when they didn't intend to. Here are some common problems when the guard is omitted from a script:", "When your script is run by passing it as a command to the Python interpreter,", "The simplest explanation for the __name__ variable (imho) is the following:", "To outline the basics:", "if __name__ == \"__main__\" is the part that runs when the script is run from (say) the command line using a command like python myscript.py."]}, {"question": "If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?", "answers": ["Yes, It was added in version 2.5. The expression syntax is:", "You can index into a tuple:", "For versions prior to 2.5, there's the trick:", " <expression 1> if <condition> else <expression 2> ", "From the documentation:"]}, {"question": "In Python, what are metaclasses and what do we use them for?", "answers": ["Before understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.", "A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.", "Note, this answer is for Python 2.x as it was written in 2008, metaclasses are slightly different in 3.x.", "Others have explained how metaclasses work and how they fit into the Python type system. Here's an example of what they can be used for. In a testing framework I wrote, I wanted to keep track of the order in which classes were defined, so that I could later instantiate them in this order. I found it easiest to do this using a metaclass.", "One use for metaclasses is adding new properties and methods to an instance automatically."]}, {"question": "I have two Python dictionaries, and I want to write a single expression that returns these two dictionaries, merged (i.e. taking the union).  The update() method would be what I need, if it returned its result instead of modifying a dictionary in-place.", "answers": ["For dictionaries x and y, z becomes a shallowly-merged dictionary with values from y replacing those from x.", "In your case, what you can do is:", "An alternative:", "Another, more concise, option:", "This probably won't be a popular answer, but you almost certainly do not want to do this.  If you want a copy that's a merge, then use copy (or deepcopy, depending on what you want) and then update.  The two lines of code are much more readable - more Pythonic - than the single line creation with .items() + .items().  Explicit is better than implicit."]}, {"question": "How do you call an external command (as if I'd typed it at the Unix shell or Windows command prompt) from within a Python script?", "answers": ["Use the subprocess module in the standard library:", "Summary of ways to call external programs, including their advantages and disadvantages:", "Typical implementation:", "Some hints on detaching the child process from the calling one (starting the child process in background).", "Note that this is dangerous, since the command isn't cleaned. I leave it up to you to google for the relevant documentation on the 'os' and 'sys' modules. There are a bunch of functions (exec* and spawn*) that will do similar things."]}, {"question": "What is the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory using Python? Here is what I tried:", "answers": ["On Python \u2265 3.5, use pathlib.Path.mkdir:", "pathlib.Path.mkdir as used above recursively creates the directory and does not raise an exception if the directory already exists. If you don't need or want the parents to be created, skip the parents argument.", "Using try except and the right error code from errno module gets rid of the race condition and is cross-platform:", "Starting from Python 3.5, pathlib.Path.mkdir has an exist_ok flag:", "I would personally recommend that you use os.path.isdir() to test instead of os.path.exists()."]}, {"question": "What is the difference between a function decorated with @staticmethod and one decorated with @classmethod?", "answers": ["Maybe a bit of example code will help: Notice the difference in the call signatures of foo, class_foo and static_foo:", "A staticmethod is a method that knows nothing about the class or instance it was called on. It just gets the arguments that were passed, no implicit first argument. It is basically useless in Python -- you can just use a module function instead of a staticmethod.", "Basically @classmethod makes a method whose first argument is the class it's called from (rather than the class instance), @staticmethod does not have any implicit arguments.", "Official python docs:", "To decide whether to use @staticmethod or @classmethod you have to look inside your method. If your method accesses other variables/methods in your class then use @classmethod. On the other hand, if your method does not touches any other parts of the class then use @staticmethod."]}, {"question": "I need a good explanation (references are a plus) on Python's slice notation. ", "answers": ["It's pretty simple really:", "The Python tutorial talks about it (scroll down a bit until you get to the part about slicing).", "Enumerating the possibilities allowed by the grammar:", "The answers above don't discuss slice assignment. To understand slice assignment, it's helpful to add another concept to the ASCII art:", "In short, the colons (:) in subscript notation (subscriptable[subscriptarg]) make slice notation - which has the optional arguments, start, stop, step:"]}, {"question": "I am a bit puzzled by the following code:", "answers": ["key is just a variable name.  ", "It's not that key is a special word, but that dictionaries implement the iterator protocol.  You could do this in your class, e.g. see this question for how to build class iterators.", "Iterating over a dict iterates through its keys in no particular order, as you can see here:", "key is simply a variable.", "When you iterate through dictionaries using the for .. in ..-syntax, it always iterates over the keys (the values are accessible using dictionary[key])."]}, {"question": "How can I create or use a global variable in a function?", "answers": ["You can use a global variable within other functions by declaring it as global within each function that assigns a value to it:", "If I'm understanding your situation correctly, what you're seeing is the result of how Python handles local (function) and global (module) namespaces.", "You may want to explore the notion of namespaces. In Python, the module is the natural place for global data:", "Python uses a simple heuristic to decide which scope it should load a variable from, between local and global.  If a variable name appears on the left hand side of an assignment, but is not declared global, it is assumed to be local.  If it does not appear on the left hand side of an assignment, it is assumed to be global.  ", "If you want to refer to a global variable in a function, you can use the global keyword to declare which variables are global. You don't have to use it in all cases (as someone here incorrectly claims) - if the name referenced in an expression cannot be found in local scope or scopes in the functions in which this function is defined, it is looked up among global variables."]}, {"question": "I'm looking for a string.contains or string.indexof method in Python.", "answers": ["You can use the in operator:", "If it's just a substring search you can use string.find(\"substring\").", "99% of use cases will be covered using the keyword, in, which returns True or False:", "if needle in haystack: is the normal use, as @Michael says -- it relies on the in operator, more readable and faster than a method call.", "Here are a few useful examples that speak for themselves concerning the in method:"]}, {"question": "I know that I can do:", "answers": ["From Python Documentation:", "Do this:", "From Python documentation -> 8.3 Handling Exceptions:", "If you frequently use a large number of exceptions, you can pre-define a tuple, so you don't have to re-type them many times. ", "One of the way to do this is.."]}, {"question": "What is the difference between __str__ and __repr__ in Python?", "answers": ["Alex summarized well but, surprisingly, was too succinct.", "My rule of thumb:  __repr__ is for developers, __str__ is for customers.", "Unless you specifically act to ensure otherwise, most classes don't have helpful results for either:", "__repr__: representation of python object usually eval will convert it back to that object", "In short, the goal of __repr__ is to be unambiguous and __str__ is to be\n  readable."]}, {"question": "How do I concatenate two lists in Python?", "answers": ["You can use the + operator to combine them:", "Python >= 3.5 alternative: [*l1, *l2]", "It's also possible to create a generator that simply iterates over the items in both lists using itertools.chain(). This allows you to chain lists (or any iterable) together for processing without copying the items to a new list:", "You could also use the list.extend() method in order to add a list to the end of another one:", "You can use sets to obtain merged list of unique values"]}, {"question": "For example, if passed the following:", "answers": ["Using the implicit booleanness of the empty list is quite pythonic.", "The pythonic way to do it is from the PEP 8 style guide.", "I prefer it explicitly:", "This is the first google hit for \"python test empty array\" and similar queries, plus other people seem to be generalizing the question beyond just lists, so I thought I'd add a caveat for a different type of sequence that a lot of people might use.", "For example, if passed the following:"]}, {"question": "What's the difference between the list methods append() and extend()?", "answers": ["append appends object at the end.", "append adds an element to a list, and extend concatenates the first list with another list (or another iterable, not necessarily a list.)", "The list.append method appends an object to the end of the list.", "append appends a single element. extend appends a list of elements.", "With append you can append a single element that will extend the list:"]}, {"question": "What is __init__.py for in a Python source directory?", "answers": ["It used to be a required part of a package (old, pre-3.3 \"regular package\", not newer 3.3+ \"namespace package\").", "Files named __init__.py are used to mark directories on disk as Python package directories.\nIf you have the files", "In addition to labeling a directory as a Python package and defining __all__, __init__.py allows you to define any variable at the package level. Doing so is often convenient if a package defines something that will be imported frequently, in an API-like fashion. This pattern promotes adherence to the Pythonic \"flat is better than nested\" philosophy.", "There are 2 main reasons for __init__.py", "The __init__.py file makes Python treat directories containing it as modules. "]}, {"question": "Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:", "answers": ["Actually, this is not a design flaw, and it is not because of internals or performance.\nIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.", "Suppose you have the following code", "The relevant part of the documentation:", "I know nothing about the Python interpreter inner workings (and I'm not an expert in compilers and interpreters either) so don't blame me if I propose anything unsensible or impossible.", "Well, the reason is quite simply that bindings are done when code is executed, and the function definition is executed, well... when the functions is defined."]}, {"question": "I would like to know how to put a time delay in a Python script.", "answers": ["Here is another example where something is run approximately once a minute:", "You can use the sleep() function in the time module. It can take a float argument for sub-second resolution.", "In a single thread I suggest the sleep function:", "Delays can be also implemented by using the following methods.", "There are five methods which I know: time.sleep(), pygame.time.wait(), matplotlib's pyplot.pause(), .after(), and asyncio.sleep()."]}, {"question": "The Python documentation seems unclear about whether parameters are passed by reference or value, and the following code produces the unchanged value 'Original'", "answers": ["Arguments are passed by assignment. The rationale behind this is twofold:", "The problem comes from a misunderstanding of what variables are in Python. If you're used to most traditional languages, you have a mental model of what happens in the following sequence:", "I found the other answers rather long and complicated, so I created this simple diagram to explain the way Python treats variables and parameters.\n", "It is neither pass-by-value or pass-by-reference - it is call-by-object. See this, by Fredrik Lundh:", "Think of stuff being passed by assignment instead of by reference/by value. That way, it is always clear, what is happening as long as you understand what happens during the normal assignment."]}, {"question": "While using new_list = my_list, any modifications to new_list changes my_list every time. Why is this, and how can I clone or copy the list to prevent it?", "answers": ["With new_list = my_list, you don't actually have two lists. The assignment just copies the reference to the list, not the actual list, so both new_list and my_list refer to the same list after the assignment.", "Felix already provided an excellent answer, but I thought I'd do a speed comparison of the various methods:", "I've been told that Python 3.3+ adds the list.copy() method, which should be as fast as slicing:", "In Python 3, a shallow copy can be made with:", "There are many answers already that tell you how to make a proper copy, but none of them say why your original 'copy' failed. "]}, {"question": "How can I make two decorators in Python that would do the following?", "answers": ["If you are not into long explanations, see Paolo Bergantino\u2019s answer.", "Check out the documentation to see how decorators work. Here is what you asked for:", "Alternatively, you could write a factory function which return a decorator which wraps the return value of the decorated function in a tag passed to the factory function. For example:", "It looks like the other people have already told you how to solve the problem. I hope this will help you understand what decorators are.", "And of course you can return lambdas as well from a decorator function:"]}, {"question": "I'm trying to understand the use of super(). From the looks of it, both child classes can be created, just fine. ", "answers": ["super() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven't already.", "The reason we use super is so that child classes that may be using cooperative multiple inheritance will call the correct next parent class function in the Method Resolution Order (MRO).", "It's been noted that in Python 3.0+ you can use", "Super has no side effects", "Just a heads up... with Python 2.7, and I believe ever since super() was introduced in version 2.2, you can only call super() if one of the parents inherit from a class that eventually inherits object (new-style classes)."]}, {"question": "In the following method definitions, what does the * and ** do for param2?", "answers": ["The *args and **kwargs is a common idiom to allow arbitrary number of arguments to functions as described in the section more on defining functions in the Python documentation.", "It's also worth noting that you can use * and ** when calling functions as well. This is a shortcut that allows you to pass multiple arguments to a function directly using either a list/tuple or a dictionary. For example, if you have the following function:", "The single * means that there can be any number of extra positional arguments. foo() can be invoked like foo(1,2,3,4,5). In the body of foo() param2 is a sequence containing 2-5.", "They allow for functions to be defined to accept and for users to pass any number of arguments, positional (*) and keyword (**).", "Let us first understand what are positional arguments and keyword arguments.\nBelow is an example of function definition with Positional arguments."]}, {"question": "How can I select rows from a DataFrame based on values in some column in Pandas?", "answers": ["To select rows whose column value equals a scalar, some_value, use ==:", "There are several ways to select rows from a Pandas dataframe:", "The Pandas equivalent to", "I find the syntax of the previous answers to be redundant and difficult to remember. Pandas introduced the query() method in v0.13 and I much prefer it. For your question, you could do df.query('col == val')", "August 2019 updated answer"]}, {"question": "How do you change the size of figure drawn with Matplotlib?", "answers": ["figure tells you the call signature:", "If you've already got the figure created, you can use figure.set_size_inches to adjust the figure size:", "There is also this workaround in case you want to change the size without using the figure environment. So in case you are using plt.plot() for example, you can set a tuple with width and height.", "Deprecation note:\n  As per the official Matplotlib guide, usage of the pylab module is no longer recommended. Please consider using the matplotlib.pyplot module instead, as described by this other answer.", "Please try a simple code as following:"]}, {"question": "How can I raise an exception in Python so that it can later be caught via an except block?", "answers": ["Use the most specific Exception constructor that semantically fits your issue.", "DON'T DO THIS. Raising a bare Exception is absolutely not the right thing to do; see Aaron Hall's excellent answer instead.", "In Python3 there are 4 different syntaxes for rasing exceptions: ", "For the common case where you need to throw an exception in response to some unexpected conditions, and that you never intend to catch, but simply to fail fast to enable you to debug from there if it ever happens \u2014 the most logical one seems to be AssertionError:", "Read the existing answers first, this is just an addendum."]}, {"question": "How can I output colored text to the terminal in Python?", "answers": ["This somewhat depends on what platform you are on. The most common way to do this is by printing ANSI escape sequences. For a simple example, here's some Python code from the Blender build scripts:", "There is also the Python termcolor module. Usage is pretty simple:", "The answer is Colorama for all cross-platform coloring in Python.", "Print a string that starts a color/style, then the string, and then end the color/style change with '\\x1b[0m':", "Define a string that starts a color and a string that ends the color. Then print your text with the start string at the front and the end string at the end."]}, {"question": "I set an environment variable that I want to access in my Python application. How do I get its value?", "answers": ["Environment variables are accessed through os.environ", "To check if the key exists (returns True or False)", "The original question (first part) was \"how to check environment variables in Python.\" ", "Actually it can be done this way:", "You can access the environment variables using"]}, {"question": "In Python, what commands can I use to find:", "answers": ["To get the full path to the directory a Python file is contained in, write this in that file:", "Current working directory:  os.getcwd()", "You may find this useful as a reference:", "The pathlib module, introduced in Python 3.4 (PEP 428 \u2014 The pathlib module \u2014 object-oriented filesystem paths), makes the path-related experience much much better.", "To get the current directory full path"]}, {"question": "I wanted to test if a key exists in a dictionary before updating the value for the key.\nI wrote the following code:", "answers": ["in is the intended way to test for the existence of a key in a dict.", "You don't have to call keys:", "You can test for the presence of a key in a dictionary, using the in keyword:", "You can shorten your code to this:", "For additional information on speed execution of the accepted answer's proposed methods (10\u00a0million loops):"]}, {"question": "pip is a replacement for easy_install. But should I install pip using easy_install on Windows? Is there a better way?", "answers": ["Good news! Python 3.4 (released March 2014) and Python 2.7.9 (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins Ruby, Node.js, Haskell, Perl, Go\u2014almost every other contemporary language with a majority open-source community. Thank you, Python.", "-- Outdated -- use distribute, not setuptools as described here. --\n-- Outdated #2 -- use setuptools as distribute is deprecated.", "2014 UPDATE:", "2016+ Update: ", "Python 3.4, which  was released in March 2014, comes with pip included:\nhttp://docs.python.org/3.4/whatsnew/3.4.html\nSo, since the release of Python 3.4, the up-to-date way to install pip on Windows is to just install Python."]}, {"question": "It is my understanding that the range() function, which is actually an object type in Python 3, generates its contents on the fly, similar to a generator.", "answers": ["The Python 3 range() object doesn't produce numbers immediately; it is a smart sequence object that produces numbers on demand. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration.", "The fundamental misunderstanding here is in thinking that range is a generator. It's not. In fact, it's not any kind of iterator.", "Use the source, Luke!", "To add to Martijn\u2019s answer, this is the relevant part of the source (in C, as the range object is written in native code):", "If you're wondering why this optimization was added to range.__contains__, and why it wasn't added to xrange.__contains__ in 2.7:"]}, {"question": "In Python, how do you get the last element of a list?", "answers": ["some_list[-1] is the shortest and most Pythonic.", "If your str() or list() objects might end up being empty as so: astr = '' or alist = [], then you might want to use alist[-1:] instead of alist[-1] for object \"sameness\".", "You can also do:", "The simplest way to display last element in python is", "To just get the last element, "]}, {"question": "When deleting a key from a dictionary, I use:", "answers": ["To delete a key regardless of whether it is in the dictionary, use the two-argument form of dict.pop():", "Specifically to answer \"is there a one line way of doing this?\"", "It took me some time to figure out what exactly my_dict.pop(\"key\", None) is doing. So I'll add this as an answer to save others googling time:", "del my_dict[key] is slightly faster than my_dict.pop(key) for removing a key from a dictionary when the key exists", "If you need to remove a lot of keys from a dictionary in one line of code, I think using map() is quite succinct and Pythonic readable:"]}, {"question": "Is there a way to convert a string from uppercase, or even part uppercase to lowercase? ", "answers": ["Use .lower() - For example:", "Is there any way to convert an entire user inputted string from uppercase, or even part uppercase to lowercase?", "With Python 2, this doesn't work for non-English words in UTF-8. In this case decode('utf-8') can help:", "Also, you can overwrite some variables:", "You can use the built-in string method lower to do that"]}, {"question": "Is it possible to have static class variables or methods in Python? What syntax is required to do this?", "answers": ["Variables declared inside the class definition, but not inside a method are class or static variables:", "@Blair Conrad said static variables declared inside the class definition, but not inside a method are class or \"static\" variables:", "As the other answers have noted, static and class methods are easily accomplished using the built-in decorators:", "You can also add class variables to classes on the fly", "Personally I would use a classmethod whenever I needed a static method. Mainly because I get the class as an argument."]}, {"question": "I'd like to do it in Python. What I'd like to do in this example in C:", "answers": ["In Python 3, you can use the sep= and end= parameters of the print function:", "For Python 2 and earlier, it should be as simple as described in Re: How does one print without a CR? by Guido van Rossum (paraphrased):", "Note: The title of this question used to be something like \"How to printf in Python\"", "Use the Python\u00a03-style print function for Python\u00a02.6+ (it will also break any existing keyworded print statements in the same file).", "How to print on the same line:"]}, {"question": "What is the best way to go call a function, given a string with the function's name in a Python program. For example, let's say that I have a module foo, and I have a string whose content is \"bar\". What is the best way to call foo.bar()?", "answers": ["Assuming module foo with method bar:", "or", "Patrick's solution is probably the cleanest.\nIf you need to dynamically pick up the module as well, you can import it like:", "Just a simple contribution. If the class that we need to instance is in the same file, we can use something like this:", "Given a string, with a complete python path to a function, this is how I went about getting the result of said function:"]}, {"question": "Consider the following:", "answers": ["The len() function can be used with several different types in Python - both built-in types and library types. For example:", "To find the size of a list, use the builtin function, len:", "While this may not be useful due to the fact that it'd make a lot more sense as being \"out of the box\" functionality, a fairly simple hack would be to build a class with a length property:", "Besides len you can also use operator.length_hint (requires Python 3.4+). For a normal list both are equivalent, but length_hint makes it possible to get the length of a list-iterator, which could be useful in certain circumstances:", "And for completeness (primarily educational), it is possible without using the len() function. I would not condone this as a good option DO NOT PROGRAM LIKE THIS IN PYTHON, but it serves a purpose for learning algorithms."]}, {"question": "Assume I have the following list:", "answers": ["Use random.choice():", "If you want to randomly select more than one item from a list, or select an item from a set, I'd recommend using random.sample instead.", "If you also need the index, use random.randrange", "As of Python 3.6 you can use the secrets module, which is preferable to the random module for cryptography or security uses.", "I propose a script for removing randomly picked up items off a list until it is empty:"]}, {"question": "Is there a way in Python to determine if an object has some attribute?  For example:", "answers": ["Try hasattr():", "As Jarret Hardie answered, hasattr will do the trick.  I would like to add, though, that many in the Python community recommend a strategy of \"easier to ask for forgiveness than permission\" (EAFP) rather than \"look before you leap\" (LBYL).  See these references:", "You can use hasattr() or catch AttributeError, but if you really just want the value of the attribute with a default if it isn't there, the best option is just to use getattr():", "I think what you are looking for is hasattr. However, I'd recommend something like this if you want to detect python properties-", "According to pydoc, hasattr(obj, prop) simply calls getattr(obj, prop) and catches exceptions. So, it is just as valid to wrap the attribute access with a try statement and catch AttributeError as it is to use hasattr() beforehand."]}, {"question": "I'm using virtualenv and the virtualenvwrapper. I can switch between virtualenv's just fine using the workon command.", "answers": ["Usually, activating a virtualenv gives you a shell function named:", "Use:", "I defined an alias, workoff, as the opposite of workon:", "To activate a Python virtual environment:", "To activate a Python virtual environment:"]}, {"question": "We are working on an S60 version and this platform has a nice Python API..", "answers": ["One way is to use Kivy:", "There is also the new Android Scripting Environment (ASE/SL4A) project. It looks awesome, and it has some integration with native Android components. ", "Yes! : Android Scripting Environment", "Pygame is a 2D game engine for Python (on desktop) that is popular with new programmers. The Pygame Subset for Android describes itself as...", "As a Python lover and Android programmer, I'm sad to say this is not a good way to go. There are two problems:"]}, {"question": "I want a to be rounded to 13.95.", "answers": ["You are running into the old problem with floating point numbers that not all numbers can be represented exactly. The command line is just showing you the full floating point form from memory.", "There are new format specifications, String Format Specification Mini-Language:", "The built-in round() works just fine in Python 2.7 or later.", "Nobody here seems to have mentioned it yet, so let me give an example in Python 3.6's f-string/template-string format, which I think is beautifully neat:", "I feel that the simplest approach is to use the format() function."]}, {"question": "I wanted to compare reading lines of string input from stdin using Python and C++ and was shocked to see my C++ code run an order of magnitude slower than the equivalent Python code. Since my C++ is rusty and I'm not yet an expert Pythonista, please tell me if I'm doing something wrong or if I'm misunderstanding something.", "answers": ["By default, cin is synchronized with stdio, which causes it to avoid any input buffering.  If you add this to the top of your main, you should see much better performance:", "Just out of curiosity I've taken a look at what happens under the hood, and I've used dtruss/strace on each test.", "I'm a few years behind here, but:", "I reproduced the original result on my computer using g++ on a Mac.", "getline, stream operators, scanf, can be convenient if you don't care about file loading time or if you are loading small text files. But, if the performance is something you care about, you should really just buffer the entire file into memory (assuming it will fit)."]}, {"question": "I have the following folder structure.", "answers": ["Note: This answer was intended for a very specific question. For most programmers coming here from a search engine, this is not the answer you are looking for. Typically you would structure your files into packages (see other answers) instead of modifying the search path.", "Nothing wrong with:", "When modules are in parallel locations, as in the question:", "First import sys in name-file.py", "I think an ad-hoc way would be to use the environment variable PYTHONPATH as described in the documentation: Python2, Python3"]}, {"question": "gives me : Key Error: Hello\\\\", "answers": ["You need to double the {{ and }}:", "Python 3.6+ (2017)", "You escape it by doubling the braces.", "The OP wrote this comment:", "Try this:"]}, {"question": "Is there a simple way to determine if a variable is a list, dictionary, or something else? I am getting an object back that may be either type and I need to be able to tell the difference.", "answers": ["There are two built-in functions that help you identify the type of an object. You can use type()  if you need the exact type of an object, and isinstance() to check an object\u2019s type against something. Usually, you want to use isinstance() most of the times since it is very robust and also supports type inheritance.", "You can do that using type():", "It might be more Pythonic to use a try...except block. That way, if you have a class which quacks like a list, or quacks like a dict, it will behave properly regardless of what its type really is.", "On instances of object you also have the:", "Determine the type of an object with type"]}, {"question": "This has always confused me. It seems like this would be nicer:", "answers": ["It's because any iterable can be joined (e.g, list, tuple, dict, set), but its contents and the \"joiner\" must be strings.", "This was discussed in the String methods... finally thread in the Python-Dev achive, and was accepted by Guido. This thread began in Jun 1999, and str.join was included in Python 1.6 which was released in Sep 2000 (and supported Unicode). Python 2.0 (supported str methods including join) was released in Oct 2000.", "Because the join() method is in the string class, instead of the list class?", "I agree that it's counterintuitive at first, but there's a good reason. Join can't be a method of a list because:", "This is because join is a \"string\" method! It creates a string from any iterable. If we stuck the method on lists, what about when we have iterables that aren't lists? "]}, {"question": "How do I remove an element from a list by index in Python?", "answers": ["Use del and specify the index of the element you want to delete:", "You probably want pop:", "Like others mentioned pop and del are the efficient ways to remove an item of given index. Yet just for the sake of completion (since the same thing can be done via many ways in Python):", "pop is also useful to remove and keep an item from a list.  Where del actually trashes the item.", "If you want to remove elements at specific positions in a list, like the 2nd, 3rd and 7th elements, you can't use"]}, {"question": "Is it possible to have static methods in Python which I could call without initializing a class, like:", "answers": ["Yep, using the staticmethod decorator", "I think that Steven is actually right. To answer the original question, then, in order to set up a class method, simply assume that the first argument is not going to be a calling instance, and then make sure that you only call the method from the class.", "Yes, check out the staticmethod decorator:", "You don't really need to use the @staticmethod decorator. Just declaring a method (that doesn't expect the self parameter) and call it from the class. The decorator is only there in case you want to be able to call it from an instance as well (which was not what you wanted to do)", "Static methods in Python?"]}, {"question": "How do you append to the file instead of overwriting it? Is there a special function that appends to the file?", "answers": ["This can be achieved by setting the mode in open() to \"a\" (append) instead of \"w\" (write). See the documentation op open() for all available modes.", "You need to open the file in append mode, by setting \"a\" or \"ab\" as the mode. See open().", "I always do this,", "Python has many variations off of the main three modes, these three modes are:", "You probably want to pass \"a\" as the mode argument.  See the docs for open()."]}, {"question": "When deleting a column in a DataFrame I use:", "answers": ["The best way to do this in Pandas is to use drop:", "As you've guessed, the right syntax is ", "Use:", "Delete first, second and fourth columns:", "The actual question posed, missed by most answers here is:"]}, {"question": "What is a Pythonic way to pad a numeric string with zeroes to the left, i.e. so the numeric string has a specific length?", "answers": ["Strings:", "Just use the rjust method of the string object.", "Besides zfill, you can use general string formatting:", "For Python 3.6+ using f-strings:", "if you want the opposite:"]}, {"question": "Could someone explain to me the meaning of @classmethod and @staticmethod in python? I need to know the difference and the meaning. ", "answers": ["Though classmethod and staticmethod are quite similar, there's a slight difference in usage for both entities: classmethod must have a reference to a class object as the first parameter, whereas staticmethod can have no parameters at all.", "Rostyslav Dzinko's answer is very appropriate. I thought I could highlight one other reason you should choose @classmethod over @staticmethod when you are creating an additional constructor.", "@classmethod means: when this method is called, we pass the class as the first argument instead of the instance of that class (as we normally do with methods). This means you can use the class and its properties inside that method rather than a particular instance.", "@staticmethod function is nothing more than a function defined inside a class. It is callable without instantiating the class first. It\u2019s definition is immutable via inheritance.", "when should I use them, why should I use them, and how should I use them?"]}, {"question": "How do I find out a name of class that created an instance of an object in Python if the function I am doing this from is the base class of which the class of the instance has been derived?", "answers": ["Have you tried the __name__ attribute of the class? ie type(x).__name__ will give you the name of the class, which I think is what you want.", "Do you want the name of the class as a string?", "type() ?", "The sample code above (when input in the interactive interpreter) will produce '__main__.A' as opposed to 'A' which is produced if the __name__ attribute is invoked. By simply passing the result of A.__class__ to the str constructor the parsing is handled for you. However, you could also use the following code if you want something more explicit.", "In Python 2,"]}, {"question": "What I want is to start counting time somewhere in my code and then get the passed time, to measure the time it took to execute few function. I think I'm using the timeit module wrong, but the docs are just confusing for me.", "answers": ["If you just want to measure the elapsed wall-clock time between two points, you could use  time.time():", "Use timeit.default_timer instead of timeit.timeit. The former provides the best clock available on your platform and version of Python automatically:", "Since time.clock() is deprecated as of Python 3.3, you will want to use time.perf_counter() for system-wide timing, or time.process_time() for process-wide timing, just the way you used to use time.clock():", "Measuring time in seconds:", "Given a function you'd like to time,"]}, {"question": "I have a very long query. I would like to split it in several lines in Python. A way to do it in JavaScript would be using several sentences and joining them with a + operator (I know, maybe it's not the most efficient way to do it, but I'm not really concerned about performance in this stage, just code readability). Example:", "answers": ["Are you talking about multi-line strings? Easy, use triple quotes to start and end them.", "If you don't want a multiline string, but just have a long single line string, you can use parentheses. Just make sure you don't include commas between the string segments (then it will be a tuple).", "Breaking lines by \\ works for me.  Here is an example:", "I found myself happy with this one:", "I find that when building long strings, you are usually doing something like building an SQL query, in which case this is best:"]}, {"question": "How can I generate random integers between 0 and 9 (inclusive) in Python?", "answers": ["Try:", "Return a random integer N such that a <= N <= b.", "Try this:", "This generates 10 pseudorandom integers in range 0 to 9 inclusive.", "The secrets module is new in Python 3.6. This is better than the random module for cryptography or security uses."]}, {"question": "I am trying to install version 1.2.2 of MySQL_python, using a fresh virtualenv created with the --no-site-packages option. The current version shown in PyPi is 1.2.3. Is there a way to install the older version? I have tried:", "answers": ["TL;DR:", "You can even use a version range with pip install command. Something like this:", "One way, as suggested in this post, is to mention version in pip as:", "To install a specific python package version whether it is the first time, an upgrade or a downgrade use: ", "I believe that if you already have a package it installed, pip will not overwrite it with another version.  Use -I to ignore previous versions."]}, {"question": "I spent most of the day yesterday searching for a clear answer for installing pip (package manager for Python). I can't find a good solution.", "answers": ["pip's documentation lists the supported mechanisms to install it: https://pip.pypa.io/en/stable/installation/#supported-methods", "\u26a1\ufe0f TL;DR \u2014 One-line solution.", "I'm surprised no-one has mentioned this - since 2013, python itself is capable of installing pip, no external commands (and no internet connection) required.", "You can install it through Homebrew on OS X.  Why would you install Python with Homebrew?", "On Mac:"]}, {"question": "Python 3.3 includes in its standard library the new package venv. What does it do, and how does it differ from all the other packages that seem to match the regex (py)?(v|virtual|pip)?env?", "answers": ["This is my personal recommendation for beginners: start by learning virtualenv and pip, tools which work with both Python 2 and 3 and in a variety of situations, and pick up other tools once you start needing them.", "I would just avoid the use of virtualenv after Python3.3+ and instead use the standard shipped library venv. To create a new virtual environment you would type:", "Added below \"Conclusion\" paragraph", "Let's start with the problems these tools want to solve:", "Jan 2020 Update"]}, {"question": "I'm trying to do some of the code golf challenges, but they all require the input to be taken from stdin. How do I get that in Python?", "answers": ["You could use the fileinput module:", "There's a few ways to do it.", "Note that this will include a newline character at the end. To remove the newline at the end, use line.rstrip() as @brittohalloran said.", "Python also has built-in functions input() and raw_input(). See the Python documentation under Built-in Functions.", "Here's from Learning Python:"]}, {"question": "There are several ways to write to stderr:", "answers": ["I found this to be the only one short, flexible, portable and readable:", "Is my choice, just more readable and saying exactly what you intend to do and portable across versions.  ", "Python 2:", "Nobody's mentioned logging yet, but logging was created specifically to communicate error messages. Basic configuration will set up a stream handler writing to stderr.", "For Python 2 my choice is:\nprint >> sys.stderr, 'spam'\nBecause you can simply print lists/dicts etc. without convert it to string. \nprint >> sys.stderr, {'spam': 'spam'}\ninstead of:\nsys.stderr.write(str({'spam': 'spam'}))"]}, {"question": "Can someone please explain the exact meaning of having single and double leading underscores before an object's name in Python, and the difference between both?", "answers": ["Names, in a class, with a leading underscore are simply to indicate to other programmers that the attribute or method is intended to be private.  However, nothing special is done with the name itself.", "__foo__: this is just a convention, a way for the Python system to use names that won't conflict with user names.", "Excellent answers so far but some tidbits are missing. A single leading underscore isn't exactly just a convention: if you use from foobar import *, and module foobar does not define an __all__ list, the names imported from the module do not include those with a leading underscore. Let's say it's mostly a convention, since this case is a pretty obscure corner;-).", "._variable is semiprivate and meant just for convention", "Single underscore at the beginning:"]}, {"question": "What's the proper way to declare custom exception classes in modern Python? My primary goal is to follow whatever standard other exception classes have, so that (for instance) any extra string I include in the exception is printed out by whatever tool caught the exception.", "answers": ["Maybe I missed the question, but why not:", "With modern Python Exceptions, you don't need to abuse .message, or override .__str__() or .__repr__() or any of it. If all you want is an informative message when your exception is raised, do this:", "This is fine unless your exception is really a type of a more specific exception:", "see how exceptions work by default if one vs more attributes are used (tracebacks omitted):", "As of Python 3.8 (2018, https://docs.python.org/dev/whatsnew/3.8.html), the recommended method is still:"]}, {"question": "What is the best way to check whether a given object is of a given type? How about checking whether the object inherits from a given type?", "answers": ["To check if o is an instance of str or any subclass of str, use isinstance (this would be the \"canonical\" way):", "The most Pythonic way to check the type of an object is... not to check it.", "isinstance(o, str) will return True if o is an str or is of a type that inherits from str.", "After the question was asked and answered, type hints were added to Python. Type hints in Python allow types to be checked but in a very different way from statically typed languages. Type hints in Python associate the expected types of arguments with functions as runtime accessible data associated with functions and this allows for types to be checked. Example of type hint syntax:", "In Python 3.10, you can use | in isinstance:"]}, {"question": "I have a JSON file that is a mess that I want to prettyprint. What's the easiest way to do this in Python?", "answers": ["The json module already implements some basic pretty printing in the dump and dumps functions, with the indent parameter that specifies how many spaces to indent by:", "You can do this on the command line:", "You could use the built-in module pprint (https://docs.python.org/3.9/library/pprint.html).", "Pygmentize is a killer tool. See this.", "Use this function and don't sweat having to remember if your JSON is a str or dict again - just look at the pretty print:"]}, {"question": "I am trying to build a shared library using a C extension file but first I have to generate the output file using the command below:", "answers": ["Looks like you haven't properly installed the header files and static libraries for python dev.  Use your package manager to install them system-wide.", "On Ubuntu, I was running Python 3 and I had to install ", "For Python 3.7 and Ubuntu in particular, I needed", "Two things you have to do.", "on Fedora run this for Python 2:"]}, {"question": "Is there any reason for a class declaration to inherit from object?", "answers": ["In Python 3, apart from compatibility between Python 2 and 3, no reason. In Python 2, many reasons. ", "Python 3", "Yes, this is a 'new style' object. It was a feature introduced in python2.2.", "History from Learn Python the Hard Way:", "Yes, it's historical. Without it, it creates an old-style class."]}, {"question": "Project Euler and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs. With Python, sometimes the approaches are somewhat kludgey - i.e., adding timing code to __main__.", "answers": ["Python includes a profiler called cProfile. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.", "A while ago I made pycallgraph which generates a visualisation from your Python code. Edit: I've updated the example to work with 3.3, the latest release as of this writing.", "It's worth pointing out that using the profiler only works (by default) on the main thread, and you won't get any information from other threads if you use them.  This can be a bit of a gotcha as it is completely unmentioned in the profiler documentation.", "The python wiki is a great page for profiling resources:\nhttp://wiki.python.org/moin/PythonSpeed/PerformanceTips#Profiling_Code", "@Maxy's comment on this answer helped me out enough that I think it deserves its own answer: I already had cProfile-generated .pstats files and I didn't want to re-run things with pycallgraph, so I used gprof2dot, and got pretty svgs:"]}, {"question": "I'm trying to get the number of rows of dataframe df with Pandas, and here is my code.", "answers": ["For a dataframe df, one can use any of the following:", "Suppose df is your dataframe then:", "Use len(df) :-).", "This table summarises the different situations in which you'd want to count something in a DataFrame (or Series, for completeness), along with the recommended method(s).", "len() lets you for getting the number of items in a list. So, for getting row counts of a DataFrame, simply use len(df)."]}, {"question": "How can I load a Python module given its full path?", "answers": ["For Python 3.5+ use:", "The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:", "To import your module, you need to add its directory to the environment variable, either temporarily or permanently.", "If your top-level module is not a file but is packaged as a directory with __init__.py, then the accepted solution almost works, but not quite. In Python 3.5+ the following code is needed (note the added line that begins with 'sys.modules'):", "It sounds like you don't want to specifically import the configuration file (which has a whole lot of side effects and additional complications involved). You just want to run it, and be able to access the resulting namespace. The standard library provides an API specifically for that in the form of runpy.run_path:"]}, {"question": "So I have difficulty with the concept of *args and **kwargs.", "answers": ["The syntax is the * and **.  The names *args and **kwargs are only by convention but there's no hard requirement to use them.", "One place where the use of *args and **kwargs is quite useful is for subclassing.", "Here's an example that uses 3 different types of parameters.", "Here's one of my favorite places to use the ** syntax as in Dave Webb's final example:", "One case where *args and **kwargs are useful is when writing wrapper functions (such as decorators) that need to be able accept arbitrary arguments to pass through to the function being wrapped.  For example, a simple decorator that prints the arguments and return value of the function being wrapped:"]}, {"question": "How can I represent an infinite number in python? No matter which number you enter in the program, no number should be greater than this representation of infinity.", "answers": ["In Python, you can do:", "Since Python 3.5 you can use math.inf:", "No one seems to have mentioned about the negative infinity explicitly, so I think I should add it.", "I don't know exactly what you are doing, but float(\"inf\") gives you a float Infinity, which is greater than any other number.", "There is an infinity in the NumPy library: from numpy import inf. To get negative infinity one can simply write -inf."]}, {"question": "What is the quickest way to HTTP GET in Python if I know the content will be a string? I am searching the documentation for a quick one-liner like:", "answers": ["Python 3:", "You could use a library called requests.", "If you want solution with httplib2 to be oneliner consider instantiating anonymous Http object", "Have a look at httplib2, which - next to a lot of very useful features - provides exactly what you want.", "It's simple enough with the powerful urllib3 library."]}, {"question": "I'm coming from the Java world and reading Bruce Eckels' Python 3 Patterns, Recipes and Idioms. ", "answers": ["It's cultural.  In Python, you don't write to other classes' instance or class variables.  In Java, nothing prevents you from doing the same if you really want to - after all, you can always edit the source of the class itself to achieve the same effect. Python drops that pretence of security and encourages programmers to be responsible. In practice, this works very nicely.", "Private variables in python is more or less a hack: the interpreter intentionally renames the variable.", "As correctly mentioned by many of the comments above, let's not forget the main goal of Access Modifiers: To help users of code understand what is supposed to change and what is supposed not to. When you see a private field you don't mess around with it. So it's mostly syntactic sugar which is easily achieved in Python by the _ and __.", "There is a variation of private variables in the underscore convention.", "As mentioned earlier, you can indicate that a variable or method is private by prefixing it with an underscore. If you don't feel like this is enough, you can always use the property decorator. Here's an example:"]}, {"question": "I found some answers online, but I have no experience with regular expressions, which I believe is what is needed here.", "answers": ["Luckily, Python has this built-in :)", "Do a str.replace('; ', ', ') and then a str.split(', ')", "Here's a safe way for any iterable of delimiters, using regular expressions:", "In response to Jonathan's answer above, this only seems to work for certain delimiters.  For example:", "This is how the regex look like:"]}, {"question": "I have a data frame df and I use several columns from it to groupby:", "answers": ["The simplest way to get row counts per group is by calling .size(), which returns a Series:", "On groupby object, the agg function can take a list to apply several aggregation methods at once. This should give you the result you need:", "Returns count, mean, std, and other useful statistics per-group.", "To get multiple stats, collapse the index, and retain column names:", "We can easily do it by using groupby and count. But, we should remember to use reset_index()."]}, {"question": "I've come across situations where a current version of a package seems not to be working and requires reinstallation. But pip install -U won't touch a package that is already up-to-date. I see how to force a reinstallation by first uninstalling (with pip uninstall) and then installing, but is there a way to simply force an \"update\" to a nominally current version in a single step?", "answers": ["When upgrading, reinstall all packages even if they are already up-to-date.", "You might want to have all three options: --upgrade and --force-reinstall ensures reinstallation, while --no-deps avoids reinstalling dependencies.", "If you want to reinstall packages specified in a requirements.txt file, without upgrading, so just reinstall the specific versions specified in the requirements.txt file:", "doesn't appear to force reinstall using python2.7 with pip-1.5", "In the case you need to force the reinstallation of pip itself you can do:"]}, {"question": "I want to create a series of lists, all of varying lengths. Each list will contain the same element e, repeated n times (where n = length of the list).", "answers": ["You can also write:", "Be careful when the item being repeated is a list. The list will not be cloned: all the elements will refer to the same list!", "Depending on your use-case, you want to use different techniques with different semantics.", "Itertools has a function just for that:", "As others have pointed out, using the * operator for a mutable object duplicates references, so if you change one you change them all. If you want to create independent instances of a mutable object, your xrange syntax is the most Pythonic way to do this. If you are bothered by having a named variable that is never used, you can use the anonymous underscore variable."]}, {"question": "I have four different files named: main.py, vector.py, entity.py and physics.py. I will not post all the code, just the imports, because I think that's where the error is (If you want, I can post more).", "answers": ["You have circular dependent imports. physics.py is imported from entity before class Ent is defined and physics tries to import entity that is already initializing. Remove the dependency to physics from entity module.", "While you should definitely avoid circular dependencies, you can defer imports in python.", "This is a circular dependency. It can be solved without any structural modifications to the code. The problem occurs because in vector you demand that entity be made available for use immediately, and vice versa. The reason for this problem is that you asking to access the contents of the module before it is ready -- by using from x import y. This is essentially the same as", "To make logic clear is very important. This problem appear, because the reference become a dead loop.", "In my case, I was working in a Jupyter notebook and this was happening due the import already being cached from when I had defined the class/function inside my working file. "]}, {"question": "I've got a dict that has a whole bunch of entries. I'm only interested in a select few of them. Is there an easy way to prune all the other ones out?", "answers": ["Constructing a new dict: ", "Slightly more elegant dict comprehension:", "Here's an example in python 2.6:", "You can do that with project function from my funcy library:", "Code 1:"]}, {"question": "Given the name of a Python package that can be installed with pip, is there any way to find out a list of all the possible versions of it that pip could install? Right now it's trial and error.", "answers": ["For pip >= 21.2 use:", "(update: As of March 2020, many people have reported that yolk, installed via pip install yolk3k, only returns latest version.  Chris's answer seems to have the most upvotes and worked for me)", "You don't need a third party package to get this information. pypi provides simple JSON feeds for all packages under", "Update:\nAs of Sep 2017 this method no longer works: --no-install was removed in pip 7", "I came up with dead-simple bash script. Thanks to jq's author."]}, {"question": "I want to add an item to an existing dictionary in Python. For example, this is my dictionary:", "answers": ["Easy as py.", "It can be as simple as:", "It occurred to me that you may have actually be asking how to implement the + operator for dictionaries, the following seems to work:"]}, {"question": "I am working with code that throws a lot of (for me at the moment) useless warnings using the warnings library. Reading (/scanning) the documentation I only found a way to disable warnings for single functions. But I don't want to change so much of the code.", "answers": ["Look at the Temporarily Suppressing Warnings section of the Python docs:", "There's the -W option.", "You can also define an environment variable (new feature in 2010 - i.e. python 2.7)", "If you don't want something complicated, then: ", "This is an old question but there is some newer guidance in PEP 565 that to turn off all warnings if you're writing a python application you should use:"]}, {"question": "How does one round a number UP in Python?", "answers": ["The ceil (ceiling) function:", "I know this answer is for a question from a while back, but if you don't want to import math and you just want to round up, this works for me.", "Interesting Python 2.x issue to keep in mind:", "If working with integers, one way of rounding up is to take advantage of the fact that // rounds down: Just do the division on the negative number, then negate the answer.  No import, floating point, or conditional needed.", "You might also like numpy:"]}, {"question": "Is there an easy way with Python f-strings to fix the number of digits after the decimal point? (Specifically f-strings, not other string formatting options like .format or %)", "answers": ["Include the type specifier in your format expression:", "When it comes to float numbers, you can use format specifiers:", "Adding to Rob\u1d69's answer: in case you want to print rather large numbers, using thousand separators can be a great help (note the comma).", "Adding to Rob's answer, you can use format specifiers with f strings (more here).", "Going further, Format strings have the below syntax. As you can see there is a lot more that can be done."]}, {"question": "Is there any way to make pip play well with multiple versions of Python? For example, I want to use pip to explicitly install things to either my site 2.5 installation or my site 2.6 installation.", "answers": ["The current recommendation is to use python -m pip, where python is the version of Python you would like to use. This is the recommendation because it works across all versions of Python, and in all forms of virtualenv. For example:", "On Windows, you can execute the pip module using a given Python version through the Python launcher, py.exe, if you chose to install it during Python 3 setup.", "/path/to/python2.{5,6} /path/to/pip install PackageName doesn't work?", "I had python 2.6 installed by default (Amazon EC2 AMI), but needed python2.7 plus some external packages for my application. Assuming you already installed python2.7 alongside with default python (2.6 in my case). Here is how to install pip and packages for non-default python2.7", "It worked for me in windows this way:"]}, {"question": "I am trying to fix how python plots my data.", "answers": ["You could explicitly set where you want to tick marks with plt.xticks:", "Another approach is to set the axis locator:", "I like this solution (from the Matplotlib Plotting Cookbook):", "In case anyone is interested in a general one-liner, simply get the current ticks and use it to set the new ticks by sampling every other tick.", "This is a bit hacky, but by far the cleanest/easiest to understand example that I've found to do this. It's from an answer on SO here:"]}, {"question": "I have a Unicode string in Python, and I would like to remove all the accents (diacritics).", "answers": ["Unidecode is the correct answer for this. It transliterates any unicode string into the closest possible representation in ascii text.", "How about this:", "I just found this answer on the Web:", "Actually I work on project compatible python 2.6, 2.7 and 3.4 and I have to create IDs from free user entries. ", "This handles not only accents, but also \"strokes\" (as in \u00f8 etc.):"]}, {"question": "Does time.time() in the Python time module return the system's time or the time in UTC?", "answers": ["The time.time() function returns the number of seconds since the epoch, as seconds.  Note that the \"epoch\" is defined as the start of January 1st, 1970 in UTC.  So the epoch is defined in terms of UTC and establishes a global moment in time.  No matter where you are \"seconds past epoch\" (time.time()) returns the same value at the same moment.", "This is for the text form of a timestamp that can be used in your text files. (The title of the question was different in the past, so the introduction to this answer was changed to clarify how it could be interpreted as the time. [updated 2016-01-14])", "Based on the answer from #squiguy, to get a true timestamp I would type cast it from float. ", "The answer could be neither or both.", "To get a local timestamp using datetime library, Python 3.x"]}, {"question": "I need a way to get a dictionary value if its key exists, or simply return None, if it does not.", "answers": ["You can use dict.get()", "Wonder no more. It's built into the language.", "Use dict.get", "You should use the get() method from the dict class", "If you want a more transparent solution, you can subclass dict to get this behavior:"]}, {"question": "How can I get the position of a character inside a string in Python?", "answers": ["There are two string methods for this, find() and index().  The difference between the two is what happens when the search string isn't found.  find() returns -1  and index() raises a ValueError.", "Just for a sake of completeness, if you need to find all positions of a character in a string, you can do the following:", "\"Long winded\" way", "Just for completion, in the case I want to find the extension in a file name in order to check it, I need to find the last '.', in this case use rfind:", "What happens when the string contains a duplicate character?\nfrom my experience with index() I saw that for duplicate you get back the same index."]}, {"question": "I want to fill out a string with spaces. I know that the following works for zero's:", "answers": ["You can do this with str.ljust(width[, fillchar]):", "For a flexible method that works even when formatting complicated string, you probably should use the string-formatting mini-language,", "The new(ish) string format method lets you do some fun stuff with nested keyword arguments. The simplest case:", "You can try this:", "Correct way of doing this would be to use Python's format syntax as described in the official documentation"]}, {"question": "Dictionaries are ordered in Python 3.6 (under the CPython implementation at least) unlike in previous incarnations. This seems like a substantial change, but it's only a short paragraph in the documentation. It is described as a CPython implementation detail rather than a language feature, but also implies this may become standard in the future.", "answers": ["Are dictionaries ordered in Python 3.6+?", "Below is answering the original first question:", "Update:\nGuido van Rossum announced on the mailing list that as of Python 3.7 dicts in all Python implementations must preserve insertion order.", "I wanted to add to the discussion above but don't have the reputation to comment.", "To fully answer this question in 2020, let me quote several statements from official Python docs:"]}, {"question": "I am trying to pass a list as an argument to a command line program. Is there an argparse option to pass a list as option?", "answers": ["Use the nargs option or the 'append' setting of the action option (depending on how you want the user interface to behave).", "I prefer passing a delimited string which I parse later in the script. The reasons for this are; the list can be of any type int or str, and sometimes using nargs I run into problems if there are multiple optional arguments and positional arguments.", "Additionally to nargs, you might want to use choices if you know the list in advance:", "Using nargs parameter in argparse's add_argument method", "If you are intending to make a single switch take multiple parameters, then you use nargs='+'. If your example '-l' is actually taking integers:"]}, {"question": "I'm just trying to streamline one of my classes and have introduced some functionality in the same style as the flyweight design pattern.", "answers": ["Use __new__ when you need to control\nthe creation of a new instance.", "__new__ is static class method, while __init__ is instance method. \n__new__ has to create the instance first, so __init__ can initialize it. Note that __init__ takes self as parameter. Until you create instance there is no self.", "In most well-known OO languages, an expression like SomeClass(arg1, arg2) will allocate a new instance, initialise the instance's attributes, and then return it.", "To quote the documentation:", "I realize that this question is quite old but I had a similar issue.\nThe following did what I wanted:"]}, {"question": "How to set the current working directory in Python?", "answers": ["Try os.chdir", "Perhaps this is what you are looking for:", "To set the working directory:", "It work for Mac also ", "people using pandas package"]}, {"question": "After you train a model in Tensorflow: ", "answers": ["I am improving my answer to add more details for saving and restoring models. ", "In (and after) TensorFlow version 0.11.0RC1, you can save and restore your model directly by calling tf.train.export_meta_graph and tf.train.import_meta_graph according to https://www.tensorflow.org/programmers_guide/meta_graph.", "Adapted from the docs", "For TensorFlow version < 0.11.0RC1:", "My environment: Python 3.6, Tensorflow 1.3.0"]}, {"question": "Just like C, you can break a long line into multiple short lines. But in Python, if I do this, there will be an indent error... Is it possible?", "answers": ["From PEP 8 - Style Guide for Python Code:", "There is more than one way to do it.", "If you want to assign a long string to variable, you can do it as below:", "It works in Python too:", "When trying to enter continuous text (say, a query) do not put commas at the end of the line or you will get a list of strings instead of one long string:"]}, {"question": "How would one create an iterative function (or iterator object) in python?", "answers": ["Iterator objects in python conform to the iterator protocol, which basically means they provide two methods: __iter__()  and  __next__().  ", "There are four ways to build an iterative function:", "I see some of you doing return self in __iter__. I just wanted to note that __iter__ itself can be a generator (thus removing the need for __next__ and raising StopIteration exceptions)", "First of all the itertools module is incredibly useful for all sorts of cases in which an iterator would be useful, but here is all you need to create an iterator in python:", "This question is about iterable objects, not about iterators. In Python, sequences are iterable too so one way to make an iterable class is to  make it behave like a sequence, i.e. give it __getitem__ and __len__ methods. I have tested this on Python 2 and 3."]}, {"question": "What is the python keyword \"with\" used for?", "answers": ["In python the with keyword is used when working with unmanaged resources (like file streams). It is similar to the using statement in VB.NET and C#. It allows you to ensure that a resource is \"cleaned up\" when the code that uses it finishes running, even if exceptions are thrown. It provides 'syntactic sugar' for try/finally blocks.", "Explanation from the Pershing on Programming blog:"]}, {"question": "Sometimes I want to just insert some print statements in my code, and see what gets printed out when I exercise it. My usual way to \"exercise\" it is with existing pytest tests. But when I run these, I don't seem able to see any standard output (at least from within PyCharm, my IDE).", "answers": ["The -s switch disables per-test capturing (only if a test fails).", "pytest captures the stdout from individual tests and displays them only on certain conditions, along with the summary of the tests it prints by default.", "In an upvoted comment to the accepted answer, Joe asks:", "When running the test use the -s option. All print statements in exampletest.py would get printed on the console when test is run.", "According to pytest documentation, version 3 of pytest can temporary disable capture in a test:"]}, {"question": "I understand how this construct works:", "answers": ["A common construct is to run a loop until something is found and then to break out of the loop. The problem is that if I break out of the loop or the loop ends I need to determine which case happened. One method is to create a flag or store variable that will let me do a second test to see how the loop was exited.", "It's a strange construct even to seasoned Python coders. When used in conjunction with for-loops it basically means \"find some item in the iterable, else if none was found do ...\". As in:", "There's an excellent presentation by Raymond Hettinger, titled Transforming Code into Beautiful, Idiomatic Python, in which he briefly addresses the history of the for ... else construct. The relevant section is \"Distinguishing multiple exit points in loops\" starting at 15:50 and continuing for about three minutes. Here are the high points:", "To make it simple, you can think of it like that;", "Because they didn't want to introduce a new keyword to the language. Each one steals an identifier and causes backwards compatibility problems, so it's usually a last resort."]}, {"question": "I'm new to Python and I'm just trying to understand how its packages work.  Presumably eggs are some sort of packaging mechanism, but what would be a quick overview of what role they play and may be some information on why they're useful and how to create them?", "answers": ["Note: Egg packaging has been superseded by Wheel packaging.", "The .egg file is a distribution format for Python packages. It\u2019s just an alternative to a source code distribution or Windows exe. But note that for pure Python, the .egg file is completely cross-platform.", "\"Egg\" is a single-file importable distribution format for Python-related projects.", "Disclaimer: egg is an abandoned format of python package, the tools to use eggs no longer exist."]}, {"question": "My Google-fu has failed me.", "answers": ["is will return True if two variables point to the same object (in memory), == if the objects referred to by the variables are equal.", "There is a simple rule of thumb to tell you when to use == or is.", "Yes, they have a very important difference.", "== determines if the values are equal, while is determines if they are the exact same object.", "== and is are different comparison! As others already said:"]}, {"question": "I am interested in knowing how to convert a pandas dataframe into a NumPy array.", "answers": ["It's time to deprecate your usage of values and as_matrix().", "To convert a pandas dataframe (df) to a numpy ndarray, use this code:", "Note: The .as_matrix() method used in this answer is deprecated. Pandas 0.23.4 warns:", "I would just chain the DataFrame.reset_index() and DataFrame.values functions to get the Numpy representation of the dataframe, including the index:", "You can use the to_records method, but have to play around a bit with the dtypes if they are not what you want from the get go. In my case, having copied your DF from a string, the index type is string (represented by an object dtype in pandas):"]}, {"question": "I am using Python 3.1 and can't get the raw_input to \"freeze\" the dos pop-up. The book I'm reading is for Python 2.5 and I'm using Python 3.1", "answers": ["Starting with Python 3, raw_input() was renamed to input().", "This works in Python 3.x and 2.x:", "A reliable way to address this is", "As others have indicated, the raw_input function has been renamed to input in Python 3.0, and you really would be better served by a more up-to-date book, but I want to point out that there are better ways to see the output of your script.", "Timmerman's solution works great when running the code, but if you don't want to get Undefined name errors when using pyflakes or a similar linter you could use the following instead:"]}, {"question": "I'm using virtualenv and I need to install \"psycopg2\".", "answers": ["Note: Since a while back, there are binary wheels for Windows in PyPI, so this should no longer be an issue for Windows users. Below are solutions for Linux, Mac users, since lots of them find this post through web searches.", "On CentOS, you need the postgres dev packages:", "if you're on a mac you can use homebrew", "On Mac Mavericks with Postgres.app version 9.3.2.0 RC2 I needed to use the following code after installing Postgres:", "I recently configured psycopg2 on a windows machine. The easiest install is using a windows executable binary. You can find it at http://stickpeople.com/projects/python/win-psycopg/."]}, {"question": "I'm working on a python script that starts several processes and database connections. Every now and then I want to kill the script with a Ctrl+C signal, and I'd like to do some cleanup.", "answers": ["Register your handler with signal.signal like this:", "You can treat it like an exception (KeyboardInterrupt), like any other. Make a new file and run it from your shell with the following contents to see what I mean:", "And as a context manager:", "You can handle CTRL+C by catching the KeyboardInterrupt exception. You can implement any clean-up code in the exception handler.", "From Python's documentation:"]}, {"question": "I am trying to save a csv to a folder after making some edits to the file. ", "answers": ["Use index=False.", "There are two ways to handle the situation where we do not want the index to be stored in csv file.", "If you want no index, read file using:", "As others have stated, if you don't want to save the index column in the first place, you can use df.to_csv('processed.csv', index=False)", "Another solution if you want to keep this column as index. "]}, {"question": "I want to install pip. It should support Python 3, but it requires setuptools, which is available only for Python 2.", "answers": ["edit: Manual installation and use of setuptools is not the standard process anymore.", "I was able to install pip for python 3 on Ubuntu just by running sudo apt-get install python3-pip. ", "Good news! Python 3.4 (released March 2014) ships with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded by the prohibitive difficulty of setup. In shipping with a package manager, Python joins Ruby, Nodejs, Haskell, Perl, Go--almost every other contemporary language with a majority open-source community. Thank you Python.", "if you're using python 3.4+", "For Ubuntu 12.04 or older, "]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["There are a bunch of ways to do it, but the most straightforward is to simply \nuse the Python debugger. Just add following line in to a Django view function:", "I really like Werkzeug's interactive debugger. It's similar to Django's debug page, except that you get an interactive shell on every level of the traceback. If you use the django-extensions, you get a runserver_plus managment command which starts the development server and gives you Werkzeug's debugger on exceptions.", "A little quickie for template tags:", "There are a few tools that cooperate well and can make your debugging task easier.", "I use PyCharm (same pydev engine as eclipse).  Really helps me to visually be able to step through my code and see what is happening."]}, {"question": "Is there a built-in function for getting the size of a file object in bytes? I see some people do something like this:", "answers": ["Use os.path.getsize(path) which will", "Return the size, in bytes, of path. Raise os.error if the file does not exist or is inaccessible.", "You may use os.stat() function, which is a wrapper of system call stat():", "Try ", "You can use os.stat(path) call"]}, {"question": "What is the difference between the search() and match() functions in the Python re module?", "answers": ["re.match is anchored at the beginning of the string. That has nothing to do with newlines, so it is not the same as using ^ in the pattern.", "search \u21d2 find something anywhere in the string and return a match object.", "match is much faster than search, so instead of doing regex.search(\"word\") you can do regex.match((.*?)word(.*?)) and gain tons of performance if you are working with millions of samples.", "re.search searches for the pattern throughout the string, whereas re.match does not search the pattern; if it does not, it has no other choice than to match it at start of the string.", "You can refer the below example to understand the working of re.match and re.search"]}, {"question": "The documentation for the argparse python module, while excellent I'm sure, is too much for my tiny beginner brain to grasp right now. I don't need to do math on the command line or meddle with formatting lines on the screen or change option characters. All I want to do is \"If arg is A, do this, if B do that, if none of the above show help and quit\".", "answers": ["Here's the way I do it with argparse (with multiple args):", "My understanding of the original question is two-fold. First, in terms of the simplest possible argparse example, I'm surprised that I haven't seen it here. Of course, to be dead-simple, it's also all overhead with little power, but it might get you started.", "The argparse documentation is reasonably good but leaves out a few useful details which might not be obvious. (@Diego Navarro already mentioned some of this but I'll try to expand on his answer slightly.) Basic usage is as follows:", "Matt is asking about positional parameters in argparse, and I agree that the Python documentation is lacking on this aspect. There's not a single, complete example in the ~20 odd pages that shows both parsing and using positional parameters. ", "Yet another summary introduction, inspired by this post."]}, {"question": "I\u2019m trying to port an open-source library to Python 3.  (SymPy, if anyone is wondering.) ", "answers": ["As of March 2020, most of the other answers to this question are several years out-of-date. When you come across advice on Python packaging issues, remember to look at the date of publication, and don't trust out-of-date information.", "I\u2019m a distutils maintainer and distutils2/packaging contributor.  I did a talk about Python packaging at ConFoo 2011 and these days I\u2019m writing an extended version of it.  It\u2019s not published yet, so here are excerpts that should help define things.", "NOTE: Answer deprecated, Distribute now obsolete. This answer is no longer valid since the Python Packaging Authority was formed and has done a lot of work cleaning this up.", "I realize that I have replied to your secondary question without addressing unquestioned assumptions in your original problem:", "Updating this question in late 2014 where fortunately the Python packaging chaos has been greatly cleaned up by Continuum's \"conda\" package manager.  "]}, {"question": "I've installed a library using the command", "answers": ["Normally your requirements.txt file would look something like this:", "\u201cEditable\u201d packages syntax can be used in requirements.txt to import packages from a variety of VCS (git, hg, bzr, svn):", "requirements.txt allows the following ways of specifying a dependency on a package in a git repository as of pip 7.0:1", "First, install with git+git or git+https, in any way you know. Example of installing kronok's branch of the brabeion project:", "Since pip v1.5, (released Jan 1 2014: CHANGELOG, PR) you may also specify a subdirectory of a git repo to contain your module.  The syntax looks like this:"]}, {"question": "I'm writing a Python application that takes as a command as an argument, for example:", "answers": ["With Python older than 2.7/3.1, that's pretty much how you do it.", "The recommended way for Python 2.7 and 3.1 and later is to use importlib module:", "Note: imp is deprecated since Python 3.4 in favor of importlib", "Nowadays you should use importlib. ", "Use the imp module, or the more direct __import__() function."]}, {"question": "I have a function that analyzes a CSV file with Pandas and produces a dict with summary information. I want to return the results as a response from a Flask view. How do I return a JSON response?", "answers": ["As of Flask 1.1.0 a view can directly return a Python dict and Flask will call jsonify automatically.", "jsonify serializes the data you pass it to JSON. If you want to serialize the data yourself, do what jsonify does by building a response with status=200 and mimetype='application/json'.", "Pass keyword arguments to flask.jsonify and they will be output as a JSON object.", "If you don't want to use jsonify for some reason, you can do what it does manually. Call flask.json.dumps to create JSON data, then return a response with the application/json content type.", "To return a JSON response and set a status code you can use make_response:"]}, {"question": "I haven't been able to find an understandable explanation of how to actually use Python's itertools.groupby() function.  What I'm trying to do is this:", "answers": ["IMPORTANT NOTE: You have to sort your data first.", "itertools.groupby is a tool for grouping items.", "The example on the Python docs is quite straightforward:", "A neato trick with groupby is to run length encoding in one line:", "Another example:"]}, {"question": "I want my Python function to split a sentence (input) and store each word in a list. My current code splits the sentence, but does not store the words as a list. How do I do that?", "answers": ["This should be enough to store each word in a list.  words is already a list of the words from the sentence, so there is no need for the loop.", "Splits the string in text on any consecutive runs of whitespace.", "str.split()", "Depending on what you plan to do with your sentence-as-a-list, you may want to look at the Natural Language Took Kit.  It deals heavily with text processing and evaluation. You can also use it to solve your problem:", "How about this algorithm? Split text on whitespace, then trim punctuation. This carefully removes punctuation from the edge of words, without harming apostrophes inside words such as we're."]}, {"question": "I am printing Python exception messages to a log file with logging.error:", "answers": ["logger.exception will output a stack trace alongside the error message.", "Using exc_info options may be better, to allow you to choose the error level (if you use exception, it will always be at the error level): ", "One nice thing about logging.exception that SiggyF's answer doesn't show is that you can pass in an arbitrary message, and logging will still show the full traceback with all the exception details:", "Quoting", "You can log the stack trace without an exception."]}, {"question": "Python has an ordered dictionary. What about an ordered set?", "answers": ["There is an ordered set (possible new link) recipe for this which is referred to from the Python 2 Documentation. This runs on Py2.6 or later and 3.0 or later without any modifications. The interface is almost exactly the same as a normal set, except that initialisation should be done with a list.", "The answer is no, but you can use collections.OrderedDict from the Python standard library with just keys (and values as None) for the same purpose.", "Update: This answer is obsolete as of Python 3.7. See jrc's answer above for a better solution. Will keep this answer here only for historical reasons.", "While others have pointed out that there is no built-in implementation of an insertion-order preserving set in Python (yet), I am feeling that this question is missing an answer which states what there is to be found on PyPI.", "I can do you one better than an OrderedSet: boltons has a pure-Python, 2/3-compatible IndexedSet type that is not only an ordered set, but also supports indexing (as with lists)."]}, {"question": "Is there a Python equivalent for the case statement such as the examples available in VB.NET or C#?", "answers": ["In Python 3.10, they introduced the pattern matching.", "The direct replacement is if/elif/else. "]}, {"question": "Is output buffering enabled by default in Python's interpreter for sys.stdout?", "answers": ["From Magnus Lycka answer on a mailing list:", "I would rather put my answer in How to flush output of print function? or in Python's print function that flushes the buffer when it's called?, but since they were marked as duplicates of this one (what I do not agree), I'll answer it here.", "Credits: \"Sebastian\", somewhere on the Python mailing list.", "Yes, it is.", "This relates to  Crist\u00f3v\u00e3o D. Sousa's answer, but I couldn't comment yet."]}, {"question": "In Python Pandas, what's the best way to check whether a DataFrame has one (or more) NaN values?", "answers": ["jwilner's response is spot on. I was exploring to see if there's a faster option, since in my experience, summing flat arrays is (strangely) faster than counting. This code seems faster:", "You have a couple of options. ", "To find out which rows have NaNs in a specific column:", "If you need to know how many rows there are with \"one or more NaNs\":", "df.isnull().any().any() should do it."]}, {"question": "I'm trying to map a list into hex, and then use the list elsewhere. In python 2.6, this was easy:", "answers": ["Do this:", "New and neat in Python 3.5:", "Why aren't you doing this:", "List-returning map function has the advantage of saving typing, especially during interactive sessions. You can define lmap function (on the analogy of python2's imap) that returns list:", "Converting my old comment for better visibility: For a \"better way to do this\" without map entirely, if your inputs are known to be ASCII ordinals, it's generally much faster to convert to bytes and decode, a la bytes(list_of_ordinals).decode('ascii'). That gets you a str of the values, but if you need a list for mutability or the like, you can just convert it (and it's still faster). For example, in ipython microbenchmarks converting 45 inputs:"]}, {"question": "I have a list of lists:", "answers": ["A key can be a function that returns a tuple:", "I'm not sure if this is the most pythonic method ...\nI had a list of tuples that needed sorting 1st by descending integer values and 2nd alphabetically. This required reversing the integer sort but not the alphabetical sort. Here was my solution: (on the fly in an exam btw, I was not even aware you could 'nest' sorted functions)", "Several years late to the party but I want to both sort on 2 criteria and use reverse=True. In case someone else wants to know how, you can wrap your criteria (functions) in parenthesis:", "It appears you could use a list instead of a tuple. \nThis becomes more important I think when you are grabbing attributes instead of 'magic indexes' of a list/tuple.  ", "Here's one way: You basically re-write your sort function to take a list of sort functions, each sort function compares the attributes you want to test, on each sort test, you look and see if the cmp function returns a non-zero return if so break and send the return value. \nYou call it by calling a Lambda of a function of a list of Lambdas."]}, {"question": "Can you tell me when to use these vectorization methods with basic examples? ", "answers": ["Straight from Wes McKinney's Python for Data Analysis book, pg. 132 (I highly recommended this book):", "First major difference: DEFINITION", "DataFrame.apply operates on entire rows or columns at a time.", "Adding to the other answers, in a Series there are also map and apply. ", "@jeremiahbuddha mentioned that apply works on row/columns, while applymap works element-wise. But it seems you can still use apply for element-wise computation...."]}, {"question": "I'm quite familiar with Django, but I recently noticed there exists an on_delete=models.CASCADE option with the models. I have searched for the documentation for the same, but I couldn't find anything more than:", "answers": ["This is the behaviour to adopt when the referenced object is deleted. It is not specific to Django; this is an SQL standard. Although Django has its own implementation on top of SQL. (1)", "The on_delete method is used to tell Django what to do with model instances that depend on the model instance you delete. (e.g. a ForeignKey relationship). The on_delete=models.CASCADE tells Django to cascade the deleting effect i.e. continue deleting the dependent models as well. ", "FYI, the on_delete parameter in models is backwards from what it sounds like.  You put on_delete on a foreign key (FK) on a model to tell Django what to do if the FK entry that you are pointing to on your record is deleted.  The options our shop have used the most are PROTECT, CASCADE, and SET_NULL. Here are the basic rules I have figured out:", "As mentioned earlier, CASCADE will delete the record that has a foreign key and references another object that was deleted. So for example if you have a real estate website and have a Property that references a City ", "Using CASCADE means actually telling Django to delete the referenced record.\nIn the poll app example below: When a 'Question' gets deleted it will also delete the Choices this Question has."]}, {"question": "It seems that python supports many different commands to stop script execution.The choices I've found are:  quit(), exit(), sys.exit(), os._exit() ", "answers": ["Let me give some information on them:", "The functions* quit(), exit(), and sys.exit() function in the same way: they raise the SystemExit exception.  So there is no real difference, except that sys.exit() is always available but exit() and quit() are only available if the site module is imported.", "os._exit():", "sys.exit is the canonical way to exit. "]}, {"question": "What is the difference between abstract class and interface in Python?", "answers": ["What you'll see sometimes is the following:", "An interface, for an object, is a set of methods and attributes on that object.", "Python >= 2.6 has Abstract Base Classes.", "In a more basic way to explain:\nAn interface is sort of like an empty muffin pan.\nIt's a class file with a set of method definitions that have no code.", "Python doesn't really have either concept."]}, {"question": "I've seen some code samples and tutorials that use", "answers": ["Without the main sentinel, the code would be executed even if the script were imported as a module.", "Everyone else has already answered it, but I think I still have something else to add.", "if the content of foo.py", "\"What does if __name__==\u201c__main__\u201d: do?\" has already been answered.", "Consider the second script. If you import it in another one, the instructions, as at \"global level\", will be executed."]}, {"question": "I'm not sure if this is Flask specific, but when I run an app in dev mode (http://localhost:5000), I cannot access it from other machines on the network (with http://[dev-host-ip]:5000). With Rails in dev mode, for example, it works fine. I couldn't find any docs regarding the Flask dev server configuration. Any idea what should be configured to enable this?", "answers": ["While this is possible, you should not use the Flask dev server in production. The Flask dev server is not designed to be particularly secure, stable, or efficient. See the docs on deploying for correct solutions.", "If you use the flask executable to start your server, use flask run --host=0.0.0.0 to change the default from 127.0.0.1 and open it up to non-local connections.", "Try this if the 0.0.0.0 method doesn't work", "Add host='0.0.0.0' to app.run`.", "If your cool app has it's configuration loaded from an external file, like in the following example, then don't forget to update the corresponding config file with HOST=\"0.0.0.0\""]}, {"question": "I'm using the Python bindings to run Selenium WebDriver:", "answers": ["You can read the innerHTML attribute to get the source of the content of the element or outerHTML for the source with the current element.", "There is not really a straightforward way of getting the HTML source code of a webelement. You will have to use JavaScript. I am not too sure about python bindings, but you can easily do like this in Java. I am sure there must be something similar to JavascriptExecutor class in Python.", "Sure we can get all HTML source code with this script below in Selenium Python:", "In Ruby, using selenium-webdriver (2.32.1), there is a page_source method that contains the entire page source.", "Using the attribute method is, in fact, easier and more straightforward."]}, {"question": "This code reads thefile.csv, makes changes, and writes results to thefile_subset1.", "answers": ["In Python 2, open outfile with mode 'wb' instead of 'w'.  The csv.writer writes \\r\\n into the file directly.  If you don't open the file in binary mode, it will write \\r\\r\\n because on Windows text mode will translate each \\n into \\r\\n.", "Opening the file in binary mode \"wb\" will not work in Python 3+.  Or rather, you'd have to convert your data to binary before writing it.  That's just a hassle.", "The simple answer is that csv files should always be opened in binary mode whether for input or output, as otherwise on Windows there are problems with the line ending. Specifically on output the csv module will write \\r\\n (the standard CSV row terminator) and then (in text mode) the runtime will replace the \\n by \\r\\n (the Windows standard line terminator) giving a result of \\r\\r\\n.", "Note: It seems this is not the preferred solution because of how the extra line was being added on a Windows system.  As stated in the python document:", "A lot of the other answers have become out of date in the ten years since the original question. For Python3, the answer is right in the documentation:"]}, {"question": "Why does the following behave unexpectedly in Python?", "answers": ["Take a look at this:", "In summary - let me emphasize: Do not use is to compare integers.", "I'm late but, you want some source with your answer? I'll try and word this in an introductory manner so more folks can follow along.", "It depends on whether you're looking to see if 2 things are equal, or the same object. ", "As you can check in source file intobject.c, Python caches small integers for efficiency. Every time you create a reference to a small integer, you are referring the cached small integer, not a new object. 257 is not an small integer, so it is calculated as a different object."]}, {"question": "Is there a way to rename a dictionary key, without reassigning its value to a new name and removing the old name key; and without iterating through dict key/value?\nIn case of OrderedDict, do the same, while keeping that key's position.", "answers": ["For a regular dict, you can use:", "Using a check for newkey!=oldkey, this way you can do:", "In case  of  renaming  all dictionary  keys:", "You can use this OrderedDict recipe written by Raymond Hettinger and modify it to add a rename method, but this is going to be a O(N) in complexity:", "A few people before me mentioned the .pop trick to delete and create a key in a one-liner."]}, {"question": "I'm running a program which is processing 30,000 similar files. A random number of them are stopping and producing this error...", "answers": ["read_csv takes an encoding option to deal with files in different formats. I mostly use read_csv('file', encoding = \"ISO-8859-1\"), or alternatively encoding = \"utf-8\" for reading, and generally utf-8 for to_csv.", "Simplest of all Solutions:", "Pandas allows to specify encoding, but does not allow to ignore errors not to automatically replace the offending bytes. So there is no one size fits all method but different ways depending on the actual use case.", "after executing this code you will find encoding of 'filename.csv' then execute code as following", "This is a more general script approach for the stated question."]}, {"question": "I noticed a Python script I was writing was acting squirrelly, and traced it to an infinite loop, where the loop condition was while line is not ''. Running through it in the debugger, it turned out that line was in fact ''. When I changed it to !='' rather than is not '', it worked fine. ", "answers": ["For all built-in Python objects (like\n  strings, lists, dicts, functions,\n  etc.), if x is y, then x==y is also\n  True.", "I would like to show a little example on how is and == are involved in immutable types. Try that:", "The logic is not flawed.  The statement", "See This question"]}, {"question": "Is there a way to make Python logging using the logging module automatically output things to stdout in addition to the log file where they are supposed to go? For example, I'd like all calls to logger.warning, logger.critical, logger.error to go to their intended places but in addition always be copied to stdout. This is to avoid duplicating messages like:", "answers": ["All logging output is handled by the handlers; just add a logging.StreamHandler() to the root logger.", "The simplest way to log to stdout:", "You could create two handlers for file and stdout and then create one logger with handlers argument to basicConfig. It could be useful if you have the same log_level and format output for both handlers:", "It's possible using multiple handlers.", "The simplest way to log to file and to stderr:"]}, {"question": "Is this correct? Is there a better way to structure this? Will this cover all my bases? ", "answers": ["Have a look at the Requests exception docs.  In short:", "One additional suggestion to be explicit. It seems best to go from specific to general down the stack of errors to get the desired error to be caught, so the specific ones don't get masked by the general one.", "Exception object also contains original response e.response, that could be useful if need to see error body in response from the server. For example:", "Here's a generic way to do things which at least means that you don't have to surround each and every requests call with try ... except:"]}, {"question": "Suppose I have:", "answers": ["Similarly, ", "And if you want to access more than one column at a time you could do:", "this command gives you a row vector, if you just want to loop over it, it's fine, but if you want to hstack with some other array with dimension 3xN, you will have", "You could also transpose and return a row:", "Although the question has been answered, let me mention some nuances."]}, {"question": "What is the best way to extend a dictionary with another one while avoiding the use of a for loop? For instance:", "answers": ["Latest Python Standard Library Documentation", "A beautiful gem in this closed question:", "Have you tried using dictionary comprehension with dictionary mapping:", "Will add keys and values from b to a, overwriting if there's already a value for a key.", "As others have mentioned, a.update(b) for some dicts a and b will achieve the result you've asked for in your question. However, I want to point out that many times I have seen the extend method of mapping/set objects desire that in the syntax a.extend(b), a's values should NOT be overwritten by b's values. a.update(b) overwrites a's values, and so isn't a good choice for extend."]}, {"question": "I am using Python 3.2.1 and I can't import the StringIO module. I use \nio.StringIO and it works, but I can't use it with numpy's genfromtxt like this:", "answers": ["when i write import StringIO it says there is no such module.", "In my case I have used:", "On Python 3 numpy.genfromtxt expects a bytes stream. Use the following:", "Thank you OP for your question, and Roman for your answer. I had to search a bit to find this; I hope the following helps others.", "You can use the StringIO from the six module:"]}, {"question": "I am trying to get a Python script to run on the linux server I'm connected to via ssh. The script uses mysqldb. I have all the other components I need, but when I try to install mySQLdb via setuptools like so:, ", "answers": ["mySQLdb is a python interface for mysql, but it is not mysql itself. And apparently mySQLdb needs the command 'mysql_config', so you need to install that first.", "I was installing python-mysql on Ubuntu 12.04 using", "(Specific to Mac OS X) ", "On Red Hat I had to do", "On python 3.5.2"]}, {"question": "I have a list l:", "answers": ["Do-something if <condition>, else do-something else.", "The reason you're getting this error has to do with how the list comprehension is performed.", "And for a reward, here is the comment, I wrote to remember this the first time I did this error:", "You must put the expression at the beginning of the list comprehension, an if statement at the end filters elements!", "Like in [a if condition1 else b for i in list1 if condition2], the two ifs with condition1 and condition2 doing two different things. The part (a if condition1 else b) is from a lambda expression:"]}, {"question": "I want to iterate over each line of an entire file. One way to do this is by reading the entire file, saving it to a list, then going over the line of interest. This method uses a lot of memory, so I am looking for an alternative.", "answers": ["The correct, fully Pythonic way to read a file is the following:", "Two memory efficient ways in ranked order (first is best) -", "With universal newline support all text file lines will seem to be terminated with '\\n', whatever the terminators in the file, '\\r', '\\n', or '\\r\\n'. ", "this is a possible way of reading a file in python:", "Some context up front as to where I am coming from. Code snippets are at the end."]}, {"question": "I came across the following header format for Python source files in a document about Python coding guidelines:", "answers": ["Its all metadata for the Foobar module.", "I strongly favour minimal file headers, by which I mean just:", "The answers above are really complete, but if you want a quick and dirty header to copy'n paste, use this:", "Also see PEP 263 if you are using a non-ascii characterset", "What I use in some project is this line in the first line for Linux machines:"]}, {"question": "I have a problem with the transfer of variable 'insurance_mode' by the decorator. I would do it by the following decorator statement:", "answers": ["The syntax for decorators with arguments is a bit different - the decorator with arguments should return a function that will take a function and return another function. So it should really return a normal decorator. A bit confusing, right? What I mean is:", "Edit : for an in-depth understanding of the mental model of decorators, take a look at this awesome Pycon Talk. well worth the 30 minutes.", "I'd like to show an idea which is IMHO quite elegant. The solution proposed by t.dubrownik shows a pattern which is always the same: you need the three-layered wrapper regardless of what the decorator does.", "Here is a slightly modified version of t.dubrownik's answer. Why?", "I presume your problem is passing arguments to your decorator. This is a little tricky and not straightforward."]}, {"question": "How do I declare an array in Python?", "answers": ["Now variable refers to an empty list*.", "This is surprisingly complex topic in Python. ", "You don't actually declare things, but this is how you create an array in Python:", "I think you (meant)want an list with the first 30 cells already filled.\nSo", "This is how:"]}, {"question": "I'm new to programming and started with Python about two months ago and am going over Sweigart's Automate the Boring Stuff with Python text. I'm using IDLE and already installed the Selenium module and the Firefox browser.", "answers": ["selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH.", "This solved it for me.", "This steps solved it for me on Ubuntu and Firefox 50.", "I see the discussions still talk about the old way of setting up geckodriver by downloading the binary and configuring the path manually.", "The answer by saurabh solves the issue, but it doesn't explain why Automate the Boring Stuff with Python doesn't include those steps."]}, {"question": "Suppose I have a df which has columns of 'ID', 'col_1', 'col_2'. And I define a function :", "answers": ["Here's an example using apply on the dataframe, which I am calling with axis = 1. ", "There is a clean, one-line way of doing this in Pandas:", "A simple solution is:", "A interesting question! my answer as below:", "The method you are looking for is Series.combine. \nHowever, it seems some care has to be taken around datatypes. \nIn your example, you would (as I did when testing the answer) naively call "]}, {"question": "Imagine this directory structure:", "answers": ["Everyone seems to want to tell you what you should be doing rather than just answering the question.", "Here is the solution which works for me:", "Alternatively 2 or 3 could use: from app.package_a import module_a", "\"Guido views running scripts within a package as an anti-pattern\" (rejected\nPEP-3122)", "This is solved 100%:"]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["ctypes module is part of the standard library, and therefore is more stable and widely available than swig, which always tended to give me problems.", "You should have a look at Boost.Python. Here is the short introduction taken from their website:", "The quickest way to do this is using SWIG.", "I started my journey in the Python <-> C++ binding from this page, with the objective of linking high level data types (multidimensional STL vectors with Python lists) :-)", "There is also pybind11, which is like a lightweight version of Boost.Python and compatible with all modern C++ compilers:"]}, {"question": "I am writing a project in Django and I see that 80% of the code is in the file models.py. This code is confusing and, after a certain time, I cease to understand what is really happening.", "answers": ["It seems like you are asking about the difference between the data model and the domain model \u2013\u00a0the latter is where you can find the business logic and entities as perceived by your end user, the former is where you actually store your data.", "I usually implement a service layer in between views and models. This acts like your project's API and gives you a good helicopter view of what is going on. I inherited this practice from a colleague of mine that uses this layering technique a lot with Java projects (JSF), e.g:", "First of all, Don't repeat yourself.", "Django employs a slightly modified kind of MVC. There's no concept of a \"controller\" in Django. The closest proxy is a \"view\", which tends to cause confusion with MVC converts because in MVC a view is more like Django's \"template\".", "In Django, MVC structure is as Chris Pratt said, different from classical MVC model used in other frameworks, I think the main reason for doing this is avoiding a too strict application structure, like happens in others MVC frameworks like CakePHP."]}, {"question": "I have constructed a condition that extract exactly one row from my data frame:", "answers": ["If you have a DataFrame with only one row, then access the first (only) row as a Series using iloc, and then the value using the column name:", "These are fast access for scalars", "You can turn your 1x1 dataframe into a numpy array, then access the first and only value of that array:", "Most answers are using iloc which is good for selection by position.", "It doesn't need to be complicated:"]}, {"question": "I have a Pandas Dataframe as below:", "answers": ["I believe DataFrame.fillna() will do this for you.", "It is not guaranteed that the slicing returns a view or a copy. You can do", "You could use replace to change NaN to 0:", "The below code worked for me.", "I just wanted to provide a bit of an update/special case since it looks like people still come here. If you're using a multi-index or otherwise using an index-slicer the inplace=True option may not be enough to update the slice you've chosen. For example in a 2x2 level multi-index this will not change any values (as of pandas 0.15):"]}, {"question": "Is there a way to conveniently define a C-like structure in Python? I'm tired of writing stuff like:", "answers": ["With the introduction of Data Classes in Python 3.7 we get very close. ", "Use a named tuple, which was added to the collections module in the standard library in Python 2.6. It's also possible to use Raymond Hettinger's named tuple recipe if you need to support Python 2.4.", "You can use a tuple for a lot of things where you would use a struct in C (something like x,y coordinates or RGB colors for example).", "Perhaps you are looking for Structs without constructors:", "How about a dictionary?"]}, {"question": "I know there is a method for a Python list to return the first index of something:", "answers": ["Yes, given an array, array, and a value, item to search for, you can use np.where as:", "If you need the index of the first occurrence of only one value, you can use nonzero (or where, which amounts to the same thing in this case):", "You can also convert a NumPy array to list in the air and get its index. For example,", "Just to add a very performant and handy numba alternative based on np.ndenumerate to find the first index:", "l.index(x) returns the smallest i such that i is the index of the first occurrence of x in the list."]}, {"question": "I see people are using any to gather another list to see if an item exists in a list, but is there a quick way to just do something like this?", "answers": ["You can use this syntax:", "In addition to what other have said, you may also be interested to know that what in does is to call the list.__contains__ method, that you can define on any class you write and can get extremely handy to use python at his full extent. \u00a0", "I came up with this one liner recently for getting True if a list contains any number of occurrences of an item, or False if it contains no occurrences or nothing at all. Using next(...) gives this a default return value (False) and means it should run significantly faster than running the whole list comprehension.", "The list method index will return -1 if the item is not present, and will return the index of the item in the list if it is present. Alternatively in an if statement you can do the following:", "There is also the list method:"]}, {"question": "Given a Python object of any kind, is there an easy way to get the list of all methods that this object has?", "answers": ["For many objects, you can use this code, replacing 'object' with the object you're interested in:", "You can use the built in dir() function to get a list of all the attributes a module has.  Try this at the command line to see how it works.", "The simplest method is to use dir(objectname). It will display all the methods available for that object. Cool trick.", "I believe that you want something like this:", "To check if it has a particular method:"]}, {"question": "Suppose the following:", "answers": ["Two options that don't require copying the whole set:", "Least code would be:", "I wondered how the functions will perform for different sets, so I did a benchmark:", "for first_item in muh_set: break remains the optimal approach in Python 3.x. Curse you, Guido.", "To provide some timing figures behind the different approaches, consider the following code.\nThe get() is my custom addition to Python's setobject.c, being just a pop() without removing the element."]}, {"question": "randrange(start, stop) only takes integer arguments. So how would I get a random number between two float values?", "answers": ["Use random.uniform(a, b):", "if you want generate a random float with N digits to the right of point, you can make this : ", "random.uniform(a, b) appears to be what your looking for.  From the docs:", "Most commonly, you'd use:", "From my experience dealing with python, I can only say that the random function can help in generating random float numbers. Take the example below;"]}, {"question": "str.split(//) does not seem to work like Ruby does. Is there a simple way of doing this without looping?", "answers": ["You need list", "You take the string and pass it to list()", "You can also do it in this very simple way without list():", "If you want to process your String one character at a time. you have various options.  ", "If you just need an array of chars:"]}, {"question": "I need help with setting the limits of y-axis on matplotlib. Here is the code that I tried, unsuccessfully.", "answers": ["Get current axis via plt.gca(), and then set its limits:", "Another workaround is to get the plot's axes and reassign changing only the y-values:", "One thing you can do is to set your axis range by yourself by using matplotlib.pyplot.axis.", "You can instantiate an object from matplotlib.pyplot.axes and call the set_ylim() on it. It would be something like this:", "Just for fine tuning. If you want to set only one of the boundaries of the axis and let the other boundary unchanged, you can choose one or more of the following statements"]}, {"question": "What's all this fuss about Python and CPython (Jython,IronPython), I don't get it:", "answers": ["CPython is the original Python implementation. It is the implementation you download from Python.org. People call it CPython to distinguish it from other, later, Python implementations, and to distinguish the implementation of the language engine from the Python programming language itself.", "You need to distinguish between a language and an implementation. Python is a language, ", "Even I had the same problem understanding how are CPython, JPython, IronPython, PyPy are different from each other.", "This article thoroughly explains the difference between different implementations of Python. Like the article puts it: ", "Python is a language: a set of rules that can be used to write programs. There are several implementaions of this language. "]}, {"question": "I'm using the subprocess module to start a subprocess and connect to its output stream (standard output). I want to be able to execute non-blocking reads on its standard output. Is there a way to make .readline non-blocking or to check if there is data on the stream before I invoke .readline? I'd like this to be portable or at least work under Windows and Linux.", "answers": ["fcntl, select, asyncproc won't help in this case.", "I have often had a similar problem; Python programs I write frequently need to have the ability to execute some primary functionality while simultaneously accepting user input from the command line (stdin). Simply putting the user input handling functionality in another thread doesn't solve the problem because readline() blocks and has no timeout. If the primary functionality is complete and there is no longer any need to wait for further user input I typically want my program to exit, but it can't because readline() is still blocking in the other thread waiting for a line. A solution I have found to this problem is to make stdin a non-blocking file using the fcntl module:", "Python 3.4 introduces new provisional API for asynchronous IO -- asyncio module. ", "Try the asyncproc module. For example:", "You can do this really easily in Twisted. Depending upon your existing code base, this might not be that easy to use, but if you are building a twisted application, then things like this become almost trivial. You create a ProcessProtocol class, and override the outReceived() method. Twisted (depending upon the reactor used) is usually just a big select() loop with callbacks installed to handle data from different file descriptors (often network sockets). So the outReceived() method is simply installing a callback for handling data coming from STDOUT.  A simple example demonstrating this behavior is as follows:"]}, {"question": "Is there any benefit in using compile for regular expressions in Python?", "answers": ["I've had a lot of experience running a compiled regex 1000s of times versus compiling on-the-fly, and have not noticed any perceivable difference.  Obviously, this is anecdotal, and certainly not a great argument against compiling, but I've found the difference to be negligible.", "For me, the biggest benefit to re.compile is being able to separate definition of the regex from its use.", "FWIW:", "Here's a simple test case:", "I just tried this myself. For the simple case of parsing a number out of a string and summing it, using a compiled regular expression object is about twice as fast as using the re methods."]}, {"question": "I want to delete the file filename if it exists.  Is it proper to say", "answers": ["A more pythonic way would be:", "I prefer to suppress an exception rather than checking for the file's existence, to avoid a TOCTTOU bug.  Matt's answer is a good example of this, but we can simplify it slightly under Python 3, using contextlib.suppress():", "As of Python 3.8, use missing_ok=True and pathlib.Path.unlink (docs here)", "os.path.exists returns True for folders as well as files. Consider using os.path.isfile to check for whether the file exists instead.", "In the spirit of Andy Jones' answer, how about an authentic ternary operation:"]}, {"question": "I've been working on a web app using Django, and I'm curious if there is a way to schedule a job to run periodically. ", "answers": ["One solution that I have employed is to do this:", "Celery is a distributed task queue, built on AMQP (RabbitMQ). It also handles periodic tasks in a cron-like fashion (see periodic tasks). Depending on your app, it might be worth a gander.", "We've open-sourced what I think is a structured app. that Brian's solution above alludes too. We would love any / all feedback!", "If you're using a standard POSIX OS, you use cron.", "Interesting new pluggable Django app: django-chronograph"]}, {"question": "I have a list of 2-item tuples and I'd like to convert them to 2 lists where the first contains the first item in each tuple and the second list holds the second item.", "answers": ["zip is its own inverse! Provided you use the special * operator.", "You could also do", "I like to use zip(*iterable) (which is the piece of code you're looking for) in my programs as so:", "If you have lists that are not the same length, you may not want to use zip as per Patricks answer. This works:", "Gives a tuple of lists as in the question."]}, {"question": "What is the related_name argument useful for on ManyToManyField and ForeignKey fields? For example, given the following code, what is the effect of related_name='maps'?", "answers": ["The related_name attribute specifies the name of the reverse relation from the User model back to your model.", "To add to existing  answer - related name is a must in case there 2 FKs in the model that point to the same table. For example in case of Bill of material", "The related_name argument is also useful if you have more complex related class names. For example, if you have a foreign key relationship:", "The essentials of your question are as follows.", "The related name parameter is actually an option. If we do not set it, Django\nautomatically creates the other side of the relation for us. In the case of the Map model,\nDjango would have created a map_set attribute, allowing access via m.map_set in your\nexample(m being your class instance). The formula Django uses is the name of the model followed by the\nstring _set. The related name parameter thus simply overrides Django\u2019s default rather\nthan providing new behavior."]}, {"question": "How can I use ORDER BY descending in a SQLAlchemy query like the following?", "answers": ["Just as an FYI, you can also specify those things as column attributes. For instance, I might have done:", "Usage from @jpmc26", "One other thing you might do is:", "This will order by amount in descending order\nor ", "You can try: .order_by(ClientTotal.id.desc())"]}, {"question": "I have a file called tester.py, located on /project.", "answers": ["Take a look at the Packages documentation (Section 6.4).", "In lib\\BoxTime.py, write a function foo() like this:", "You can try inserting it in sys.path:", "I am writing this down because everyone seems to suggest that you have to create a lib directory.", "Try import .lib.BoxTime. For more information read about relative import in PEP 328."]}, {"question": "Python is installed in a local directory.  ", "answers": ["Based on your comments to orip's post, I guess this is what happened:", "Does", "I ran into something very similar when I did this exercise in LPTHW; I could never get Python to recognise that I had files in the directory I was calling from. But I was able to get it to work in the end. What I did, and what I recommend, is to try this:", "On *nix, also make sure that PYTHONPATH is configured correctly, especially that it has this format:", "You are reading this answer says that your __init__.py is in the right place, you have installed all the dependencies and you are still getting the ImportError."]}, {"question": "I am very new to Python and trying to > pip install linkchecker on Windows 7. Some notes:", "answers": ["Just install any package with the \"config --global http.sslVerify false\" statement", "You can specify a cert with this param:", "For me the problem was fixed by creating a folder\npip, with a file: pip.ini\nin \nC:\\Users\\<username>\\AppData\\Roaming\\\ne.g:", "kenorb\u2019s answer is very useful (and great!).\nAmong his solutions, maybe this is the most simple one: \n--trusted-host", "The answers are quite similar and a bit confusing. In my case, the certificates in my company's network was the issue. I was able to work around the problem using:"]}, {"question": "I'm having trouble parsing HTML elements with \"class\" attribute using Beautifulsoup. The code looks like this", "answers": ["You can refine your search to only find those divs with a given class using BS3:", "From the documentation:", "Update: 2016\nIn the latest version of beautifulsoup, the method 'findAll' has been renamed to \n'find_all'. Link to official documentation", "CSS selectors", "Specific to BeautifulSoup 3:"]}, {"question": "What the difference is between flush() and commit() in SQLAlchemy?", "answers": ["A Session object is basically an ongoing transaction of changes to a database (update, insert, delete). These operations aren't persisted to the database until they are committed (if your program aborts for some reason in mid-session transaction, any uncommitted changes within are lost).", "This does not strictly answer the original question but some people have mentioned that with session.autoflush = True you don't have to use session.flush()... And this is not always true.", "Why flush if you can commit?", "Use flush when you need to simulate a write, for example to get a primary key ID from an autoincrementing counter.", "The existing answers don't make a lot of sense unless you understand what a database transaction is. (Twas the case for myself until recently.)"]}, {"question": "I'm having a hard time wrapping my brain around PEP 380.", "answers": ["Let's get one thing out of the way first. The explanation that yield from g is equivalent to for v in g: yield v does not even begin to do justice to what yield from is all about. Because, let's face it, if all yield from does is expand the for loop, then it does not warrant adding yield from to the language and preclude a whole bunch of new features from being implemented in Python 2.x.", "What are the situations where \"yield from\" is useful?", "Wherever you invoke a generator from within a generator you need a \"pump\" to re-yield the values:  for v in inner_generator: yield v.  As the PEP points out there are subtle complexities to this which most people ignore.  Non-local flow-control like throw() is one example given in the PEP.  The new syntax yield from inner_generator is used wherever you would have written the explicit for loop before.  It's not merely syntactic sugar, though:  It handles all of the corner cases that are ignored by the for loop.  Being \"sugary\" encourages people to use it and thus get the right behaviors.", "A short example will help you understand one of yield from's use case: get value from another generator", "In applied usage for the Asynchronous IO coroutine, yield from has a similar behavior as await in a coroutine function. Both of which is used to suspend the execution of coroutine. "]}, {"question": "How do I learn where the source file for a given Python module is installed? Is the method different on Windows than on Linux?", "answers": ["For a pure python module you can find the source by looking at themodule.__file__.\nThe datetime module, however, is written in C, and therefore datetime.__file__ points to a .so file (there is no datetime.__file__ on Windows), and therefore, you can't see the source.", "Running python -v from the command line should tell you what is being imported and from where.  This works for me on Windows and Mac OS X.", "I realize this answer is 4 years late, but the existing answers are misleading people.", "If you're using pip to install your modules, just pip show $module the location is returned.", "The sys.path list contains the list of directories which will be searched for modules at runtime:"]}, {"question": "Is there a performance or code maintenance issue with using assert as part of the standard code instead of using it just for debugging purposes?", "answers": ["Asserts should be used to test conditions that should never happen.  The purpose is to crash early in the case of a corrupt program state.", "\"assert\" statements are removed when the compilation is optimized.  So, yes, there are both performance and functional differences.", "To be able to automatically throw an error when x become less than zero throughout the function. You can use class descriptors. Here is an example:", "Assume you work on 200,000 lines of code with four colleagues Alice, Bernd, Carl, and Daphne.\nThey call your code, you call their code.", "In addition to the other answers, asserts themselves throw exceptions, but only AssertionErrors. From a utilitarian standpoint, assertions aren't suitable for when you need fine grain control over which exceptions you catch."]}, {"question": "In C++, I can iterate over an std::string like this:", "answers": ["As Johannes pointed out, ", "If you need access to the index as you iterate through the string, use enumerate():", "Even easier:", "Just to make a more comprehensive answer, the C way of iterating over a string can apply in Python, if you really wanna force a square peg into a round hole.", "Well you can also do something interesting like this and do your job by using for loop"]}, {"question": "[] = empty list", "answers": ["No, there's no literal syntax for the empty set. You have to write set().", "By all means, please use set() to create an empty set. ", "Just to extend the accepted answer:", "Yes. The same notation that works for non-empty dict/set works for empty ones.", "It depends on if you want the literal for a comparison, or for assignment."]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["If you're brand new to using unittests, the simplest approach to learn is often the best. On that basis along I recommend using py.test rather than the default unittest module.", "The free Python book Dive Into Python has a chapter on unit testing that you might find useful.", "There are, in my opinion, three great Python testing frameworks that are good to check out:", "The docs for unittest would be a good place to start.", "unittest comes with the standard library, but I would recommend you nosetests."]}, {"question": "In Python, I have an ndarray y\nthat is printed as array([0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1])", "answers": ["Non-numpy way:", "What about using numpy.count_nonzero, something like ", "Personally, I'd go for:\n(y == 0).sum() and (y == 1).sum()", "For your case you could also look into numpy.bincount", "If you know that they are just 0 and 1:"]}, {"question": "Sometimes I come across code such as this:", "answers": ["I think this would be best explained by the following picture:", "These are subplot grid parameters encoded as a single integer. For example, \"111\" means \"1x1 grid, first subplot\" and \"234\" means \"2x3 grid, 4th subplot\".", "The answer from Constantin is spot on but for more background this behavior is inherited from Matlab. ", "My solution is", " "]}, {"question": "I'm trying to use NetworkX to read a Shapefile and use the function write_shp() to generate the Shapefiles that will contain the nodes and edges, but when I try to run the code it gives me the following error:", "answers": ["As you are in python3 , use dict.items() instead of dict.iteritems()", "In Python2, we had .items() and .iteritems() in dictionaries. dict.items() returned list of tuples in dictionary [(k1,v1),(k2,v2),...]. It copied all tuples in dictionary and created new list. If dictionary is very big, there is very big memory impact. ", "I had a similar problem (using 3.5) and lost 1/2 a day to it but here is a something that works - I am retired and just learning Python so I can help my grandson (12) with it.", "In Python2, dictionary.iteritems() is more efficient than dictionary.items() so in Python3, the functionality of dictionary.iteritems() has been migrated to dictionary.items() and iteritems() is removed. So you are getting this error. ", "The purpose of .iteritems() was to use less memory space by yielding one result at a time while looping. I am not sure why Python 3 version does not support iteritems()though it's been proved to be efficient than .items()"]}, {"question": "__del__(self) above fails with an AttributeError exception.  I understand Python doesn't guarantee the existence of \"global variables\" (member data in this context?) when __del__() is invoked.  If that is the case and this is the reason for the exception, how do I make sure the object destructs properly?", "answers": ["I'd recommend using Python's with statement for managing resources that need to be cleaned up.  The problem with using an explicit close() statement is that you have to worry about people forgetting to call it at all or forgetting to place it in a finally block to prevent a resource leak when an exception occurs.", "The standard way is to use atexit.register:", "As an appendix to Clint's answer, you can simplify PackageResource using contextlib.contextmanager:", "A better alternative is to use weakref.finalize. See the examples at Finalizer Objects and Comparing finalizers with __del__() methods.", "I don't think that it's possible for instance members to be removed before __del__ is called. My guess would be that the reason for your particular AttributeError is somewhere else (maybe you mistakenly remove self.file elsewhere)."]}]