[{"question": "I have a directory that contains my Python unit tests. Each unit test module is of the form test_*.py. I am attempting to make a file called all_test.py that will, you guessed it, run all files in the aforementioned test form and return the result. I have tried two methods so far; both have failed. I will show the two methods, and I hope someone out there knows how to actually do this correctly.", "answers": ["With Python 2.7 and higher you don't have to write new code or use third-party tools to do this; recursive test execution via the command line is built-in.  Put an __init__.py in your test directory and:", "In python 3, if you're using unittest.TestCase:", "You could use a test runner that would do this for you.  nose is very good for example.  When run, it will find tests in the current tree and run them.", "This is now possible directly from unittest: unittest.TestLoader.discover.", "Well by studying the code above a bit (specifically using TextTestRunner and defaultTestLoader), I was able to get pretty close. Eventually I fixed my code by also just passing all test suites to a single suites constructor, rather than adding them \"manually\", which fixed my other problems. So here is my solution."]}, {"question": "In a program I'm writing I have Python use the re.search() function to find matches in a block of text and print the results. However, the program exits once it finds the first match in the block of text.", "answers": ["Use re.findall or re.finditer instead."]}, {"question": "What are the advantages and disadvantages of each?", "answers": ["Numpy matrices are strictly 2-dimensional, while numpy arrays (ndarrays) are\nN-dimensional.  Matrix objects are a subclass of ndarray, so they inherit all\nthe attributes and methods of ndarrays.", "Scipy.org recommends that you use arrays:", "Just to add one case to unutbu's list. ", "As per the official documents, it's not anymore advisable to use matrix class since it will be removed in the future.", "As others have mentioned, perhaps the main advantage of matrix was that it provided a convenient notation for matrix multiplication."]}, {"question": "I've been making Python scripts for simple tasks at work and never really bothered packaging them for others to use. Now I have been assigned to make a Python wrapper for a REST API. I have absolutely no idea on how to start and I need help.", "answers": ["A module is a file containing Python definitions and statements. The file name is the module name with the suffix .py", "Python 3 - UPDATED 18th November 2015", "Since nobody did cover this question of the OP yet:", "Once you have defined your chosen commands, you can simply drag and drop the saved file into the Lib folder in your python program files. ", "Make a file named \"hello.py\""]}, {"question": "I have a Python file which might have to support Python versions < 3.x and >= 3.x. Is there a way to introspect the Python runtime to know the version which it is running (for example, 2.6 or 3.2.x)?", "answers": ["Sure, take a look at sys.version and sys.version_info.", "Try this code, this should work:", "Per sys.hexversion and API and ABI Versioning:", "Just in case you want to see all of the gory details in human readable form, you can use:", "The best solution depends on how much code is incompatible. If there are a lot of places you need to support Python 2 and 3, six is the compatibility module. six.PY2 and six.PY3 are two booleans if you want to check the version."]}, {"question": "What's the easiest way to add an empty column to a pandas DataFrame object?  The best I've stumbled upon is something like", "answers": ["If I understand correctly, assignment should fill:", "To add to DSM's answer and building on this associated question, I'd split the approach into two cases:", "an even simpler solution is: ", "I like:", "Starting with v0.16.0, DF.assign() could be used to assign new columns (single/multiple) to a DF. These columns get inserted in alphabetical order at the end of the DF."]}, {"question": "\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\r\n                ", "answers": ["Try PDFMiner. It can extract text from PDF files as HTML, SGML or \"Tagged PDF\" format.", "The PDFMiner package has changed since codeape posted.  ", "Since none for these solutions support the latest version of PDFMiner I wrote a simple solution that will return text of a pdf using PDFMiner. This will work for those who are getting import errors with process_pdf ", "Pdftotext An open source program (part of Xpdf) which you could call from python (not what you asked for but might be useful). I've used it with no problems. I think google use it in google desktop.", "pyPDF works fine (assuming that you're working with well-formed PDFs).  If all you want is the text (with spaces), you can just do:"]}, {"question": "On my local machine, I run a python script which contains this line", "answers": ["Don't use os.system. It has been deprecated in favor of subprocess. From the docs: \"This module intends to replace several older modules and functions: os.system, os.spawn\".", "To somewhat expand on the earlier answers here, there are a number of details which are commonly overlooked.", "Call it with subprocess", "You can use subprocess, but I always felt that it was not a 'Pythonic' way of doing it. So I created Sultan (shameless plug) that makes it easy to run command line functions.", "It is possible you use the bash program, with the parameter -c for execute the commands:"]}, {"question": "How can I convert a DataFrame column of strings (in dd/mm/yyyy format) to datetimes?", "answers": ["The easiest way is to use to_datetime:", "If your date column is a string of the format '2017-01-01'\nyou can use pandas astype to convert it to datetime.", "You can use the following if you want to specify tricky formats:", "If you have a mixture of formats in your date, don't forget to set infer_datetime_format=True to make life easier."]}, {"question": "Right now I'm importing a fairly large CSV as a dataframe every time I run the script. Is there a good solution for keeping that dataframe constantly available in between runs so I don't have to spend all that time waiting for the script to run?", "answers": ["The easiest way is to pickle it using to_pickle:", "Although there are already some answers I found a nice comparison in which they tried several ways to serialize Pandas DataFrames: Efficiently Store Pandas DataFrames. ", "If I understand correctly, you're already using pandas.read_csv() but would like to speed up the development process so that you don't have to load the file in every time you edit your script, is that right? I have a few recommendations:", "Pickle works good!", "You can use feather format file. It is extremely fast."]}, {"question": "Is there a way to have a defaultdict(defaultdict(int)) in order to make the following code work?", "answers": ["Yes like this:", "The parameter to the defaultdict constructor is the function which will be called for building new elements. So let's use a lambda !", "I find it slightly more elegant to use partial:", "Previous answers have addressed how to make a two-levels or n-levels defaultdict.  In some cases you want an infinite one:", "For reference, it's possible to implement a generic nested defaultdict factory method through:"]}, {"question": "I'm curious, whether there is any way to print formatted numpy.arrays, e.g., in a way similar to this:", "answers": ["You can use set_printoptions to set the precision of the output:", "You can get a subset of the np.set_printoptions functionality from the np.array_str command, which applies only to a single print statement.", "Unutbu gave a really complete answer (they got a +1 from me too), but here is a lo-tech alternative:", "FYI Numpy 1.15 (release date pending) will include a context manager for setting print options locally. This means that the following will work the same as the corresponding example in the accepted answer (by unutbu and Neil G) without having to write your own context manager. E.g., using their example:", "The gem that makes it all too easy to obtain the result as a string (in today's numpy versions) is hidden in denis answer:\nnp.array2string"]}, {"question": "I am getting a ValueError: cannot reindex from a duplicate axis when I am trying to set an index to a certain value. I tried to reproduce this with a simple example, but I could not do it.", "answers": ["This error usually rises when you join / assign to a column when the index has duplicate values. Since you are assigning to a row, I suspect that there is a duplicate value in affinity_matrix.columns, perhaps not shown in your question.", "As others have said, you've probably got duplicate values in your original index. To find them do this:", "Indices with duplicate values often arise if you create a DataFrame by concatenating other DataFrames. IF you don't care about preserving the values of your index, and you want them to be unique values, when you concatenate the the data, set ignore_index=True.", "For people who are still struggling with this error, it can also happen if you accidentally create a duplicate column with the same name.  Remove duplicate columns like so:", "Simply skip the error using .values at the end."]}, {"question": "In C# there's a null-coalescing operator (written as ??) that allows for easy (short) null checking during assignment:", "answers": ["Ok, it must be clarified how the or operator works. It is a boolean operator, so it works in a boolean context. If the values are not boolean, they are converted to boolean for the purposes of the operator.", "Strictly,", "Here's a function that will return the first argument that isn't None:", "In case you need to nest more than one null coalescing operation such as:", "I realize this is answered, but there is another option when you're dealing with dict-like objects."]}, {"question": "I have a list of tuples in Python, and I have a conditional where I want to take the branch ONLY if the tuple is not in the list (if it is in the list, then I don't want to take the if branch)", "answers": ["The bug is probably somewhere else in your code, because it should work fine:", "The cheapest and most readable solution is using the in operator (or in your specific case, not in). As mentioned in the documentation,"]}, {"question": "In comparison to Java (in a string), you would do something like \"First Line\\r\\nSecond Line\".", "answers": ["It depends on how correct you want to be. \\n will usually do the job. If you really want to get it right, you look up the newline character in the os package. (It's actually called linesep.)", "The new line character is \\n. It is used inside a string.", "You can either write in the new lines separately or within a single string, which is easier.", "Platform independent line breaker: Linux,windows & IOS", "EDIT: I am older and wiser now. Here is a more readable solution that will work correctly even if you aren't at top level indentation (e.g. in a function definition)."]}, {"question": "I want to send a datetime.datetime object in serialized form from Python using JSON and de-serialize in JavaScript using JSON. What is the best way to do this?", "answers": ["You can add the 'default' parameter to json.dumps to handle this:", "For cross-language projects, I found out that strings containing RfC 3339 dates are the best way to go. An RfC 3339 date looks like this:", "I've worked it out.", "Using json, you can subclass JSONEncoder and override the default() method to provide your own custom serializers:", "Here's a fairly complete solution for recursively encoding and decoding datetime.datetime and datetime.date objects using the standard library json module. This needs Python >= 2.6 since the %f format code in the datetime.datetime.strptime() format string is only supported in since then. For Python 2.5 support, drop the %f and strip the microseconds from the ISO date string before trying to convert it, but you'll loose microseconds precision, of course. For interoperability with ISO date strings from other sources, which may include a time zone name or UTC offset, you may also need to strip some parts of the date string before the conversion. For a complete parser for ISO date strings (and many other date formats) see the third-party dateutil module."]}, {"question": "I would like to get some feedback on these tools on:", "answers": ["Well, I am a bit curious, so I just tested the three myself right after asking the question ;-)", "pep8 was recently added to PyPi."]}, {"question": "How can I order by descending my query set in django by date?", "answers": ["Notice the - before check_in.", "A hyphen \"-\" in front of \"check_in\" indicates descending order. Ascending order is implied.", "Adding the - will order it in descending order.\nYou can also set this by adding a default ordering to the meta of your model. This will mean that when you do a query you just do MyModel.objects.all() and it will come out in the correct order.", "You can also use the following instruction:", "for ascending order:"]}, {"question": "I want to delete a particular record. Such as", "answers": ["There are a couple of ways:", "this will raise exception if the object with specified primary key doesn't exist because at first it tries to retrieve the specified object.", "if you want to delete one instance then write the code", "If you want to delete one item    ", "The delete() method is used to delete model instances from a database.This method immediately deletes the object. this method returns the number of object deleted."]}, {"question": "In order to test some functionality I would like to create a DataFrame from a string. Let's say my test data looks like:", "answers": ["A simple way to do this is to use StringIO.StringIO (python2) or io.StringIO (python3) and pass that to the pandas.read_csv function. E.g:", "Split Method", "In one line, but first import IO", "A quick and easy solution for interactive work is to copy-and-paste the text by loading the data from the clipboard.", "This answer applies when a string is manually entered, not when it's read from somewhere."]}, {"question": "In Python, I've seen two variable values swapped using this syntax:", "answers": ["Python evaluates expressions from left to right. Notice that while\nevaluating an assignment, the right-hand side is evaluated before the\nleft-hand side.", "That is the standard way to swap two variables, yes.", "I know three ways to swap variables, but a, b = b, a is the simplest. There is", "I would not say it is a standard way to swap because it will cause some unexpected errors.", "Does not work for multidimensional arrays, because references are used here."]}, {"question": "I have seen many projects using simplejson module instead of json module from the Standard Library. Also, there are many different simplejson modules. Why would use these alternatives, instead of the one in the Standard Library?", "answers": ["json is simplejson, added to the stdlib. But since json was added in 2.6, simplejson has the advantage of working on more Python versions (2.4+). ", "I have to disagree with the other answers: the built in json library (in Python 2.7) is not necessarily slower than simplejson. It also doesn't have this annoying unicode bug.", "All of these answers aren't very helpful because they are time sensitive.", "I've been benchmarking json, simplejson and cjson.", "Some values are serialized differently between simplejson and json."]}, {"question": "Most operations in pandas can be accomplished with operator chaining (groupby, aggregate, apply, etc), but the only way I've found to filter rows is via normal bracket indexing", "answers": ["I'm not entirely sure what you want, and your last line of code does not help either, but anyway:", "Filters can be chained using a Pandas query:", "The answer from @lodagro is great. I would extend it by generalizing the mask function as:", "Since version 0.18.1 the .loc method accepts a callable for selection. Together with lambda functions you can create very flexible chainable filters:", "pandas provides two alternatives to Wouter Overmeire's answer which do not require any overriding. One is .loc[.] with a callable, as in"]}, {"question": "In Python for *nix, does time.sleep() block the thread or the process?", "answers": ["It blocks the thread.  If you look in Modules/timemodule.c in the Python source, you'll see that in the call to floatsleep(), the substantive part of the sleep operation is wrapped in a Py_BEGIN_ALLOW_THREADS and Py_END_ALLOW_THREADS block, allowing other threads to continue to execute while the current one sleeps.  You can also test this with a simple python program:", "It will just sleep the thread except in the case where your application has only a single thread, in which case it will sleep the thread and effectively the process as well.", "Just the thread.", "The thread will block, but the process is still alive.", "Only the thread unless your process has a single thread."]}, {"question": "What is the difference between 'SAME' and 'VALID' padding in tf.nn.max_pool of tensorflow?", "answers": ["If you like ascii art:", "When stride is 1 (more typical with convolution than pooling), we can think of the following distinction:", "I'll give an example to make it clearer:", "The TensorFlow Convolution example gives an overview about the difference between SAME and VALID :", "Padding is an operation to increase the size of the input data. In case of 1-dimensional data you just append/prepend the array with a constant, in 2-dim you surround matrix with these constants. In n-dim you surround your n-dim hypercube with the constant. In most of the cases this constant is zero and it is called zero-padding."]}, {"question": "Is there a Pool class for worker threads, similar to the multiprocessing module's Pool class?", "answers": ["I just found out that there actually  is a thread-based Pool interface in the multiprocessing module, however it is hidden somewhat and not properly documented.", "In Python 3 you can use concurrent.futures.ThreadPoolExecutor, i.e.:", "Yes, and it seems to have (more or less) the same API. ", "For something very simple and lightweight (slightly modified from here):", "Hi to use the thread pool in Python you can use this library :"]}, {"question": "I have a timezone aware timestamptz field in PostgreSQL. When I pull data from the table, I then want to subtract the time right now so I can get it's age.", "answers": ["have you tried to remove the timezone awareness?", "The correct solution is to add the timezone info e.g., to get the current time as an aware datetime object in Python 3:", "I know some people use Django specifically as an interface to abstract this type of database interaction.  Django provides utilities that can be used for this:", "Conclusion: You must mange your datetime variables with the same time info", "You don't need anything outside the std libs"]}, {"question": "I can't figure out how to use an array or matrix in the way that I would normally use a list. I want to create an empty array (or matrix) and then add one column (or row) to it at a time.", "answers": ["You have the wrong mental model for using NumPy efficiently. NumPy arrays are stored in contiguous blocks of memory. If you want to add rows or columns to an existing array, the entire array needs to be copied to a new block of memory, creating gaps for the new elements to be stored. This is very inefficient if done repeatedly to build an array.", "A NumPy array is a very different data structure from a list and is designed to be used in different ways.  Your use of hstack is potentially very inefficient... every time you call it, all the data in the existing array is copied into a new one. (The append function will have the same issue.)  If you want to build up your matrix one column at a time, you might be best off to keep it in a list until it is finished, and only then convert it into an array.", "To create an empty multidimensional array in NumPy (e.g. a 2D array m*n to store your matrix), in case you don't know m how many rows you will append and don't care about the computational cost Stephen Simmons mentioned (namely re-buildinging the array at each append), you can squeeze to 0 the dimension to which you want to append to: X = np.empty(shape=[0, n]).", "I looked into this a lot because I needed to use a numpy.array as a set in one of my school projects and I needed to be initialized empty... I didn't found any relevant answer here on Stack Overflow, so I started doodling something. ", "You can use the append function.  For rows:"]}, {"question": "Unless I'm mistaken, creating a function in Python works like this:", "answers": ["The other answers have done a good job at explaining duck typing and the simple answer by tzot:", "Python is strongly typed because every object has a type, every object knows its type, it's impossible to accidentally or deliberately use an object of a type \"as if\" it was an object of a different type, and all elementary operations on the object are delegated to its type.", "You don't specify a type.  The method will only fail (at runtime) if it tries to access attributes that are not defined on the parameters that are passed in.", "Many languages have variables, which are of a specific type and have a value. Python does not have variables; it has objects, and you use names to refer to these objects.", "I have implemented a wrapper if anyone would like to specify variable types."]}, {"question": "How can I sort this list in descending order?", "answers": ["This will give you a sorted version of the array.", "In one line, using a lambda:", "You can simply do this:", "you simple type:", "Since your list is already in ascending order, we can simply reverse the list."]}, {"question": "Two options in setup.py develop and install are confusing me. According to this site, using develop creates a special link to site-packages directory.", "answers": ["python setup.py install is used to install (typically third party) packages that you're not going to develop/modify/debug yourself.", "From the documentation. The develop will not install the package but it will create a .egg-link in the deployment directory back to the project source code directory.", "Another thing that people may find useful when using the develop method is the --user option to install without sudo. Ex:"]}, {"question": "This is probably a trivial question, but how do I parallelize the following loop in python?", "answers": ["Using multiple threads on CPython won't give you better performance for pure-Python code due to the global interpreter lock (GIL).  I suggest using the multiprocessing module instead:", "The above works beautifully on my machine (Ubuntu, package joblib was pre-installed, but can be installed via pip install joblib).", "To parallelize a simple for loop, joblib brings a lot of value to raw use of multiprocessing. Not only the short syntax, but also things like transparent bunching of iterations when they are very fast (to remove the overhead) or capturing of the traceback of the child process, to have better error reporting.", "Use a PoolExecutor from concurrent.futures. Compare the original code with this, side by side. First, the most concise way to approach this is with executor.map:", "You can use asyncio. (Documentation can be found here). It is used as a foundation for multiple Python asynchronous frameworks that provide high-performance network and web-servers, database connection libraries, distributed task queues, etc. Plus it has both high-level and low-level APIs to accomodate any kind of problem."]}, {"question": "I recently discovered pytest. It seems great. However, I feel the documentation could be better.", "answers": ["Is this the correct use of conftest.py?", "In a wide meaning conftest.py is a local per-directory plugin. Here you define directory-specific hooks and fixtures. In my case a have a root directory containing project specific tests directories. Some common magic is stationed in 'root' conftest.py. Project specific - in their own ones. Can't see anything bad in storing fixtures in conftest.py unless they are not used widely (In that case I prefer to define them in test files directly)", "I use the conftest.py file to define the fixtures that I inject into my tests, is this the correct use of conftest.py?", "Here are the official docs about using conftest.py to share fixtures:"]}, {"question": "I'm sure this is a trivial operation, but I can't figure out how it's done.", "answers": ["From the Django documentation:", "When you have list of items and you want to check the possible values from the list then you can't use =.", "From the Django documentation:"]}, {"question": "I would like to install scipy-0.15.1-cp33-none-win_amd64.whl that I have saved to the local drive. I am using:", "answers": ["cp33 means CPython 3.3.", "This can also be caused by using an out-of-date pip with a recent wheel file.", "I had the same problem while installing scipy-0.17.0-cp35-none-win_amd64.whl and my Python version was 3.5. It returned the same error message:", "I come across this problem because of a wrong name of my package (scipy-0.17.0-cp27-none-win_amd64 (1)).", "Change the filename to scipy-0.15.1-cp33-none-any.whl and then run this command:"]}, {"question": "If you read an entire file with content = open('Path/to/file', 'r').read() is the file handle left open until the script exits?  Is there a more concise method to read a whole file? ", "answers": ["The answer to that question depends somewhat on the particular Python implementation.  ", "You can use pathlib.", "Well, if you have to read file line by line to work with each line, you can use", "Instead of retrieving the file content as a single string,\nit can be handy to store the content as a list of all lines the file comprises:"]}, {"question": "In numpy, some of the operations return in shape (R, 1) but some return (R,). This will make matrix multiplication more tedious since explicit reshape is required. For example, given a matrix M, if we want to do numpy.dot(M[:,0], numpy.ones((1, R))) where R is the number of rows (of course, the same issue also occurs column-wise). We will get matrices are not aligned error since M[:,0] is in shape (R,) but numpy.ones((1, R)) is in shape (1, R).", "answers": ["You write, \"I know literally it's list of numbers and list of lists where all list contains only a number\" but that's a bit of an unhelpful way to think about it.", "The difference between (R,) and (1,R) is literally the number of indices that you need to use.  ones((1,R)) is a 2-D array that happens to have only one row.  ones(R) is a vector.  Generally if it doesn't make sense for the variable to have more than one row/column, you should be using a vector, not a matrix with a singleton dimension.", "The shape is a tuple. If there is only 1 dimension the shape will be one number and just blank after a comma. For 2+ dimensions, there will be a number after all the commas.", "For its base array class, 2d arrays are no more special than 1d or 3d ones.  There are some operations that preserve the dimensions, some that reduce them, other combine or even expand them.", "There are a lot of good answers here already. But for me it was hard to find some example, where the shape or array can break all the program."]}, {"question": "Both function return the same list.\nThen what is the need of two different functions performing same job.", "answers": ["The current API is that:", "As explained here a key difference is that:", "Here is the correct namespace for the functions:"]}, {"question": "I am trying to install PIL (the Python Imaging Library) using the command:", "answers": ["https://pypi.org/project/Pillow/", "This works for me:", "It is very simple using apt install use this command to get it done", "Install ", "You should install as described here:"]}, {"question": "This is the first time I've really sat down and tried python 3, and seem to be failing miserably. I have the following two files:", "answers": ["TL;DR: You can't do relative imports from the file you execute since __main__ module is not a part of a package.", "I figured it out. Very frustrating, especially coming from python2.", "You have to append your project's path to PYTHONPATH and make sure to use absolute imports.", "Setting PYTHONPATH can also help with this problem. ", "You can simply add following file to your tests directory, and then python will run it before the tests"]}, {"question": "How are \"keyword arguments\" different from regular arguments? Can't all arguments be passed as name=value instead of using positional syntax?", "answers": ["There are two related concepts, both called \"keyword arguments\".", "There is one last language feature where the distinction is important. Consider the following function:", "Using keyword arguments is the same thing as normal arguments except order doesn't matter. For example the two functions calls below are the same:", "They have no keywords before them. The order is important!", "There are two ways to assign argument values to function parameters, both are used."]}, {"question": "I am currently using Beautiful Soup to parse an HTML file and calling get_text(), but it seems like I'm being left with a lot of \\xa0 Unicode representing spaces. Is there an efficient way to remove all of them in Python 2.7, and change them into spaces? I guess the more generalized question would be, is there a way to remove Unicode formatting?", "answers": ["\\xa0 is actually non-breaking space in Latin1 (ISO 8859-1), also chr(160). You should replace it with a space.", "There's many useful things in Python's unicodedata library. One of them is the .normalize() function.", "After trying several methods, to summarize it, this is how I did it. Following are two ways of avoiding/removing \\xa0 characters from parsed HTML string.", "Try using .strip() at the end of your line\nline.strip() worked well for me", "try this:"]}, {"question": "I noticed that in Python, people initialize their class attributes in two different ways.", "answers": ["Neither way is necessarily correct or incorrect, they are just two different kinds of class elements:", "I think this sample explains the difference between the styles:"]}, {"question": "I've created an object like this:", "answers": ["You could use the pickle module in the standard library.\nHere's an elementary application of it to your example:", "I think it's a pretty strong assumption to assume that the object is a class. What if it's not a class?  There's also the assumption that the object was not defined in the interpreter.  What if it was defined in the interpreter?  Also, what if the attributes were added dynamically? When some python objects have attributes added to their __dict__ after creation, pickle doesn't respect the addition of those attributes (i.e. it 'forgets' they were added -- because pickle serializes by reference to the object definition).", "Quick example using company1 from your question, with python3. ", "You can use anycache to do the job for you. It considers all the details:", "Newer versions of pandas has also a functionality to save pickles."]}, {"question": "If I have a numpy dtype, how do I automatically convert it to its closest python data type?  For example,", "answers": ["Use val.item() to convert most NumPy values to a native Python type:", "found myself having mixed set of numpy types and standard python. as all numpy types derive from numpy.generic, here's how you can convert everything to python standard types:", "If you want to convert (numpy.array OR numpy scalar OR native type OR numpy.darray) TO native type you can simply do :", "tolist() is a more general approach to accomplish this. It works in any primitive dtype and also in arrays or matrices.", "How about:"]}, {"question": "I'm looking for an easy (and quick) way to determine if two unordered lists contain the same elements:", "answers": ["Python has a built-in datatype for an unordered collection of (hashable) things, called a set. If you convert both lists to sets, the comparison will be unordered.", "If elements are always nearly sorted as in your example then builtin .sort() (timsort) should be fast:", "Copying from here: Check if two unordered lists are equal", "You want to see if they contain the same elements, but don't care about the order.", "Assuming you already know lists are of equal size, the following will guarantee True if and only if two vectors are exactly the same (including order)"]}, {"question": "How can I get a string after a specific substring?", "answers": ["The easiest way is probably just to split on your target word", "If you want to deal with the case where s2 is not present in s1, then use s1.find(s2) as opposed to index. If the return value of that call is -1, then s2 is not in s1.", "I'm surprised nobody mentioned partition.", "You want to use str.partition():", "If you want to do this using regex, you could simply use a non-capturing group, to get the word \"world\" and then grab everything after, like so"]}, {"question": "What is the quickest/simplest way to drop nan and inf/-inf values from a pandas.DataFrame without resetting mode.use_inf_as_null?", "answers": ["The simplest way would be to first replace() infs to NaN:", "With option context, this is possible without permanently setting use_inf_as_na. For example:", "Use (fast and simple):", "Here is another method using .loc to replace inf with nan on a Series:", "The above solution will modify the infs that are not in the target columns. To remedy that,"]}, {"question": "With PEP 557 data classes are introduced into python standard library. ", "answers": ["Data classes are just regular classes that are geared towards storing state, rather than containing a lot of logic. Every time you create a class that mostly consists of attributes, you make a data class.", "The question has been addressed.  However, this answer adds some practical examples to aid in the basic understanding of dataclasses.", "From the PEP specification:", "Consider this simple class Foo"]}, {"question": "I used easy_install to install pytest on a mac and started writing tests for a project with a file structure likes so:", "answers": ["I'm not sure why py.test does not add the current directory in the PYTHONPATH itself, but here's a workaround (to be executed from the root of your repository):", "The least invasive solution is adding an empty file named conftest.py in the repo/ directory:", "I had the same problem. I fixed it by adding an empty __init__.py file to my tests directory.", "Yes, the source folder is not in Python's path if you cd to the tests directory. ", "Run pytest itself as a module with:\npython -m pytest tests"]}, {"question": "Python will not run in git bash (Windows). When I type python in the command line, it takes me to a blank line without saying that it has entered python 2.7.10 like its does in Powershell. It doesn't give me an error message, but python just doesn't run.", "answers": ["Just enter this in your git shell on windows - > alias python='winpty python.exe', that is all and you are going to have alias to the python executable.  This alias will be valid for the duration of the shell session.", "I don't see next option in a list of answers, but I can get interactive prompt with \"-i\" key:", "This is a known bug in MSys2, which provides the terminal used by Git Bash. You can work around it by running a Python build without ncurses support, or by using WinPTY, used as follows:", "I am windows 10 user and I have installed GIT in my system by just accepting the defaults.", "Try python -i instead of python, it's a cursor thing."]}, {"question": "If I want to use the results of argparse.ArgumentParser(), which is a Namespace object, with a method that expects a dictionary or mapping-like object (see collections.Mapping), what is the right way to do it?", "answers": ["You can access the namespace's dictionary with vars():", "Straight from the horse's mouth:", "Is it proper to \"reach into\" an object and use its dict property?", "Note that if you're trying to treat args as a dict to find out if it has an attribute, you can just do the following instead:"]}, {"question": "I got a lot of errors with the message :", "answers": ["This is what postgres does when a query produces an error and you try to run another query without first rolling back the transaction.  (You might think of it as a safety feature, to keep you from corrupting your data.)", "To get rid of the error, roll back the last (erroneous) transaction after you've fixed your code:", "In Flask you just need to write:", "So, I ran into this same issue. The problem I was having here was that my database wasn't properly synced. Simple problems always seem to cause the most angst...", "In my experience, these errors happen this way:"]}, {"question": "What's the difference between raise and raise from in Python?", "answers": ["The difference is that when you use from, the __cause__ attribute is set and the message states that the exception was directly caused by. If you omit the from then no __cause__ is set, but the __context__ attribute may be set as well, and the traceback then shows the context as during handling something else happened."]}, {"question": "What named colors are available in matplotlib for use in plots?  I can find a list on the matplotlib documentation that claims that these are the only names:", "answers": ["I constantly forget the names of the colors I want to use and keep coming back to this question =)", "Matplotlib uses a dictionary from its colors.py module. ", "In addition to BoshWash's answer, here is the picture generated by his code:", "To get a full list of colors to use in plots:"]}, {"question": "I have a string which is like this:", "answers": ["You want split, from the built-in shlex module.", "Have a look at the shlex module, particularly shlex.split.", "I see regex approaches here that look complex and/or wrong.  This surprises me, because regex syntax can easily describe \"whitespace or thing-surrounded-by-quotes\", and most regex engines (including Python's) can split on a regex.  So if you're going to use regexes, why not just say exactly what you mean?:", "Depending on your use case, you may also want to check out the csv module:", "I use shlex.split to process 70,000,000 lines of squid log, it's so slow. So I switched to re."]}, {"question": "I am trying to plot a simple graph using pyplot, e.g.:", "answers": ["I found a solution to my problem (thanks to the help of ImportanceOfBeingErnest).", "In my case, the error message was implying that I was working in a headless console. So plt.show() could not work. What worked was calling plt.savefig:", "If you use Arch Linux (distributions like Manjaro or Antegros) simply type:", "Simple install", "Try import tkinter because pycharm already installed tkinter for you, I looked Install tkinter for Python"]}, {"question": "In a comment on this question, I saw a statement that recommended using", "answers": ["== is an equality test. It checks whether the right hand side and the left hand side are equal objects (according to their __eq__ or __cmp__ methods.)", "First, let me go over a few terms. If you just want your question answered, scroll down to \"Answering your question\".", "Consider the following:", "None is a singleton, therefore identity comparison will always work, whereas an object can fake the equality comparison via .__eq__().", "Some objects are singletons, and thus is with them is equivalent to ==.  Most are not."]}, {"question": "I've tried reading through questions about sibling imports and even the\npackage documentation, but I've yet to find an answer.", "answers": ["There are plenty of sys.path.append -hacks available, but I found an alternative way of solving the problem in hand.", "Since I wrote the answer below, modifying sys.path is still a quick-and-dirty trick that works well for private scripts, but there has been several improvements", "Here is another alternative that I insert at top of the Python files in tests folder:", "You don't need and shouldn't hack sys.path unless it is necessary and in this case it is not. Use:", "I don't yet have the comprehension of Pythonology necessary to see the intended way of sharing code amongst unrelated projects without a sibling/relative import hack.  Until that day, this is my solution.  For examples or tests to import stuff from ..\\api, it would look like: "]}, {"question": "I noticed that the Python 2.7 documentation includes yet another command-line parsing module.  In addition to getopt and optparse we now have argparse.", "answers": ["As of python 2.7, optparse is deprecated, and will hopefully go away in the future.", "Why should I use it instead of\n  optparse? Are their new features I\n  should know about?", "The best source for rationale for a Python addition would be its PEP: PEP 389: argparse - New Command Line Parsing Module, in particular, the section entitled, Why aren't getopt and optparse enough?", "There are also new kids on the block!", "At first I was as reluctant as @fmark to switch from optparse to argparse, because: "]}, {"question": "Possible Duplicate:\nPython: What OS am I running on? ", "answers": ["If you want user readable data but still detailed, you can use platform.platform()", "I usually use sys.platform to get the platform. sys.platform will distinguish between linux, other unixes, and OS X, while os.name is \"posix\" for all of them.", "This gives you the essential information you will usually need. To distinguish between, say, different editions of Windows, you will have to use a platform-specific method.", "https://docs.python.org/library/os.html", "Something along the lines:"]}, {"question": "If I have that code:", "answers": ["use str", "Use repr() and The difference between using repr and str", "Even though I realise this is an old question, I'd like to suggest using the traceback module to handle output of the exceptions.", "Another way hasn't been given yet:", "To inspect the error message and do something with it (with Python 3)..."]}, {"question": "You know how in Linux when you try some Sudo stuff it tells you to enter the password and, as you type, nothing is shown in the terminal window (the password is not shown)?", "answers": ["Use getpass.getpass():", "getpass works on Linux, Windows, and Mac.", "Use getpass for this purpose.", "This code will print an asterisk instead of every letter.", "Updating on the answer of @Ahmed ALaa"]}, {"question": "models.py:", "answers": ["It looks like you were on the right track - get_FOO_display() is most certainly what you want:", "For every field that has choices set, the object will have a get_FOO_display() method, where FOO is the name of the field. This method returns the \u201chuman-readable\u201d value of the field.", "Others have pointed out that a get_FOO_display method is what you need.\nI'm using this:"]}, {"question": "I want to figure out how to remove nan values from my array. My array looks something like this: ", "answers": ["If you're using numpy for your arrays, you can also use", "works both for lists and numpy array\nsince v!=v only for NaN", "Try this:", "For me the answer by @jmetz didn't work, however using pandas isnull() did.", "As shown by others "]}, {"question": "I use the following simple code to parse some arguments; note that one of them is required. Unfortunately, when the user runs the script without providing the argument, the displayed usage/help text does not indicate that there is a non-optional argument, which I find very confusing. How can I get python to indicate that an argument is not optional?", "answers": ["Parameters starting with - or -- are usually considered optional. All other parameters are positional parameters and as such required by design (like positional function arguments). It is possible to require optional arguments, but this is a bit against their design. Since they are still part of the non-positional arguments, they will still be listed under the confusing header \u201coptional arguments\u201d even if they are required. The missing square brackets in the usage part however show that they are indeed required.", "Since I prefer to list required arguments before optional, I hack around it via:", "Building off of @Karl Rosaen", "One more time, building off of @RalphyZ", "by default there're 2 argument groups in parser._action_groups: positional arguments and named arguments (titled 'optional arguments').\nyou can add your named optional arguments to the existing 'optional arguments' group, and required named arguments to a new 'required arguments' group. After that you can re-order groups:"]}, {"question": "I'm trying to install a new Python environment on my shared hosting. I follow the steps written in this post:", "answers": ["The gcc compiler is not in your $PATH.\nIt means either you dont have gcc installed or it's not in your $PATH variable.", "You need to run", "For Ubuntu / Debian :", "Assuming you're on a debain/ubuntu system, you will need to run the following first:", "sudo apt install build-essential is the command."]}, {"question": "I am trying to use Pythons mock package to mock Pythons requests module. What are the basic calls to get me working in below scenario?", "answers": ["This is how you can do it (you can run this file as-is):", "Try using the responses library. Here is an example from their documentation:", "Here is what worked for me:", "I used requests-mock for writing tests for separate module:", "this is how you mock requests.post, change it to your http method"]}, {"question": "I'm trying to get a better understanding of the difference. I've found a lot of explanations online, but they tend towards the abstract differences rather than the practical implications.", "answers": ["A compiled language is one where the program, once compiled, is expressed in the instructions of the target machine. For example, an addition \"+\" operation in your source code could be translated directly to the \"ADD\" instruction in machine code.", "A language itself is neither compiled nor interpreted, only a specific implementation of a language is.  Java is a perfect example.  There is a bytecode-based platform (the JVM), a native compiler (gcj) and an interpeter for a superset of Java (bsh).  So what is Java now? Bytecode-compiled, native-compiled or interpreted?  ", "Start thinking in terms of a: blast from the past ", "The extreme and simple cases:", "From http://www.quora.com/What-is-the-difference-between-compiled-and-interpreted-programming-languages"]}, {"question": "How can I get the output of a process run using subprocess.call()?", "answers": ["If you have Python version >= 2.7, you can use subprocess.check_output which basically does exactly what you want (it returns standard output as string).", "Output from subprocess.call() should only be redirected to files.", "For python 3.5+ it is recommended that you use the run function from the subprocess module. This returns a CompletedProcess object, from which you can easily obtain the output as well as return code.", "I have the following solution. It captures the exit code, the stdout, and the stderr too of the executed external command:", "I recently just figured out how to do this, and here's some example code from a current project of mine:"]}, {"question": "I am trying to plot some data from a camera in real time using OpenCV. However, the real-time plotting (using matplotlib) doesn't seem to be working.", "answers": ["Here's the working version of the code in question (requires at least version Matplotlib 1.1.0 from 2011-11-14):", "If you're interested in realtime plotting, I'd recommend looking into matplotlib's animation API. In particular, using blit to avoid redrawing the background on every frame can give you substantial speed gains (~10x):", "I know I'm a bit late to answer this question. Nevertheless, I've made some code a while ago to plot live graphs, that I would like to share:", "None of the methods worked for me.\nBut I have found this\nReal time matplotlib plot is not working while still in a loop", "The top (and many other) answers were built upon plt.pause(), but that was an old way of animating the plot in matplotlib. It is not only slow, but also causes focus to be grabbed upon each update (I had a hard time stopping the plotting python process)."]}, {"question": "Following this python example, I encode a string as Base64 with:", "answers": ["base64 encoding takes 8-bit binary byte data and encodes it uses only the characters A-Z, a-z, 0-9, +, /* so it can be transmitted over channels that do not preserve all 8-bits of data, such as email.", "You need to push a bytes-like object (bytes, bytearray, etc) to the base64.b64encode() method. Here are two ways:", "If the data to be encoded contains \"exotic\" characters, I think you have to encode in \"UTF-8\"", "If the string is Unicode the easiest way is:", "There is all you need:"]}, {"question": "The time module can be initialized using seconds since epoch:", "answers": ["datetime.datetime.fromtimestamp will do, if you know the time zone, you could produce the same output as with time.gmtime", "Seconds since epoch to datetime to strftime:", "From the docs, the recommended way of getting a timezone aware datetime object from seconds since epoch is:", "Note that datetime.datetime.fromtimestamp(timestamp) and .utcfromtimestamp(timestamp) fail on windows for dates before Jan. 1, 1970 while negative unix timestamps seem to work on unix-based platforms. The docs say this:", "For those that want it ISO 8601 compliant, since the other solutions do not have the T separator nor the time offset (except Meistro's answer):"]}, {"question": "I'm investigating how to develop a decent web app with Python. Since I don't want some high-order structures to get in my way, my choice fell on the lightweight Flask framework. Time will tell if this was the right choice.", "answers": ["The current recommended way is with the flask command line utility.", "If you are talking about test/dev environments, then just use the debug option. It will auto-reload the flask app when a code change happens.", "The werkzeug debugger already has an 'auto reload' function available that can be enabled by doing one of the following:", "If you're running using uwsgi look at the python auto reload option:", "A few updates for Flask 1.0 and above"]}, {"question": "I have read the official definition of \"raise\", but I still don't quite understand what it does. ", "answers": ["It has 2 purposes.", "raise without any arguments is a special use of python syntax. It means get the exception and re-raise it. If this usage it could have been called reraise.", "It's used for raising errors.", "Besides raise Exception(\"message\") and raise Python 3 introduced a new form, raise Exception(\"message\") from e. It's called exception chaining, it allows you to preserve the original exception (the root cause) with its traceback.", "You can use it to raise errors as part of error-checking:"]}, {"question": "I want to use type hints in my current Python 3.5 project. My function should receive a function as parameter. ", "answers": ["As @jonrsharpe noted in a comment, this can be done with typing.Callable:", "Another interesting point to note is that you can use the built in function type() to get the type of a built in function and use that.\nSo you could have", "An easiest and fancy solution is:", "My specific use case for wanting this functionality was to enable rich code completion in PyCharm. Using Callable didn't cause PyCharm to suggest that the object had a .__code__ attribute, which is what I wanted, in this case."]}, {"question": "Imagine a python script that will take a long time to run, what will happen if I modify it while it's running? Will the result be different?", "answers": ["Nothing, because Python precompiles your script into a PYC file and launches that.", "When you run a python program and the interpreter is started up, the first thing that happens is the following:", "This is a fun question. The answer is that \"it depends\".", "No, the result will not reflect the changes once saved. The result will not change when running regular python files. You will have to save your changes and re-run your program.", "It happens nothing. Once the script is loaded in memory and running it will keep like this."]}, {"question": "Inspired by the question series 'Hidden features of ...', I am curious to hear about your favorite Django tips or lesser known but useful features you know of.", "answers": ["I'm just going to start with a tip from myself :)", "Install Django Command Extensions and pygraphviz and then issue the following command to get a really nice looking Django model visualization:", "Use django-annoying's render_to decorator instead of render_to_response.", "There's a set of custom tags I use all over my site's templates. Looking for a way to autoload it (DRY, remember?), I found the following:", "Virtualenv + Python = life saver if you are working on multiple Django projects and there is a possibility that they all don't depend on the same version of Django/an application."]}, {"question": "I created a histogram plot using data from a file and no problem. Now I wanted to superpose data from another file in the same histogram, so I do something like this", "answers": ["Here you have a working example:", "The accepted answers gives the code for a histogram with overlapping bars, but in case you want each bar to be side-by-side (as I did), try the variation below:", "In the case you have different sample sizes, it may be difficult to compare the distributions with a single y-axis. For example:", "As a completion to Gustavo Bezerra's answer:", "You should use bins from the values returned by hist:"]}, {"question": "How can I send the HTML content in an email using Python? I can send simple text.", "answers": ["From Python v2.7.14 documentation - 18.1.11. email: Examples:", "Here is a Gmail implementation of the accepted answer:", "You might try using my mailer module.", "Here is a simple way to send an HTML email, just by specifying the Content-Type header as 'text/html':", "for python3, improve @taltman 's answer:"]}, {"question": "I know how to generate a random number within a range in Python.", "answers": ["If you just need sampling without replacement:", "Generate the range of data first and then shuffle it like this", "You could add to a set until you reach n:", "You could use the random.sample function from the standard library to select k elements from a population:"]}, {"question": "I'm using python3.3 and I'm having a cryptic error when trying to pickle a simple dictionary. ", "answers": ["The output file needs to be opened in binary mode:", "Just had same issue.  In Python 3, Binary modes 'wb', 'rb' must be specified whereas in Python 2x,  they are not needed.  When you follow tutorials that are based on Python 2x,  that's why you are here. ", "pickle uses a binary protocol, hence only accepts binary files. As the document said in the first sentence, \"The pickle module implements binary protocols for serializing and de-serializing\"."]}, {"question": "I want to display:", "answers": ["You should use the new format specifications to define how your value should be represented:", "The String Formatting Operations section of the Python documentation contains the answer you're looking for.  In short:", "I suppose you're probably using the Decimal() objects from the decimal module? (If you need exactly two digits of precision beyond the decimal point with arbitrarily large numbers, you definitely should be, and that's what your question's title suggests...)", "You can change 2 in 2f to any number of decimal points you want to show.", "You can use the string formatting operator as so:"]}, {"question": "Is there a way in python to programmatically determine the width of the console? I mean the number of characters that fits in one line without wrapping, not the pixel width of the window.", "answers": ["Not sure why it is in the module shutil, but it landed there in Python 3.3, Querying the size of the output terminal:", "uses the 'stty size' command which according to a thread on the python mailing list is reasonably universal on linux. It opens the 'stty size' command as a file, 'reads' from it, and uses a simple string split to separate the coordinates.", "use", "Code above didn't return correct result on my linux because winsize-struct has 4 unsigned shorts, not 2 signed shorts:", "It's either:"]}, {"question": "I have been searching and tried various alternatives without success and spent several days on it now - driving me mad.", "answers": ["Here is my workflow after creating a folder and cd'ing into it:", "You forgot to do source bin/activate where source is a executable name.\nStruck me first few times as well, easy to think that manual is telling \"execute this from root of the environment folder\". ", "You can do ", "Go to the project directory. In my case microblog is the flask project directory and under microblog directory there should be app and venv folders. then run the below command, This is one worked for me in Ubuntu.", "Cd to the environment path, go to the bin folder.\nAt this point when you use ls command, you should see the \"activate\" file."]}, {"question": "I load some machine learning data from a CSV file. The first 2 columns are observations and the remaining columns are features.", "answers": ["See the deprecation in the docs", "Note: .ix has been deprecated since Pandas v0.20. You should instead use .loc or .iloc, as appropriate.", "Lets use the titanic dataset from the seaborn package as an example", "Also, Given a DataFrame ", "You can slice along the columns of a DataFrame by referring to the names of each column in a list, like so:"]}, {"question": "I want to find out my Python installation path on Windows. For example:", "answers": ["In your Python interpreter, type the following commands:", "If you have Python in your environment variable then you can use the following command in cmd or powershell:", "It would be either of", "If you need to know the installed path under Windows without starting the python interpreter, have a look in the Windows registry.", "Simple way is"]}, {"question": "I am working with a library which returns a byte string and I need to convert this to a string. ", "answers": ["The only thing that a computer can store is bytes.", "Assuming Python 3 (in Python 2, this difference is a little less well-defined) - a string is a sequence of characters, ie unicode codepoints; these are an abstract concept, and can't be directly stored on disk. A byte string is a sequence of, unsurprisingly, bytes - things that can be stored on disk. The mapping between them is an encoding - there are quite a lot of these (and infinitely many are possible) - and you need to know which applies in the particular case in order to do the conversion, since a different encoding may map the same bytes to a different string: ", "Note: I will elaborate more my answer for Python 3 since the end of life of Python 2 is very close.", "From What is Unicode:", "Let's have a simple one-character string '\u0161' and encode it into a sequence of bytes:"]}, {"question": "Run the following code from a directory that contains a directory named bar (containing one or more files) and a directory named baz (also containing one or more files).  Make sure there is not a directory named foo.", "answers": ["Here's a solution that's part of the standard library:", "This limitation of the standard shutil.copytree seems arbitrary and annoying. Workaround:", "Python 3.8 introduced the dirs_exist_ok argument to shutil.copytree:", "In slight improvement on atzz's answer to the function where the above function always tries to copy the files from source to destination. ", "A merge one inspired by atzz and Mital Vora:"]}, {"question": "I have a series of images that I want to create a video from.  Ideally I could specify a frame duration for each frame but a fixed frame rate would be fine too.  I'm doing this in wxPython, so I can render to a wxDC or I can save the images to files, like PNG.  Is there a Python library that will allow me to create either a video (AVI, MPG, etc) or an animated GIF from these frames?", "answers": ["I'd recommend not using images2gif from visvis because it has problems with PIL/Pillow and is not actively maintained (I should know, because I am the author).", "Here's how you do it using only PIL (install with: pip install Pillow):", "Well, now I'm using ImageMagick.  I save my frames as PNG files and then invoke ImageMagick's convert.exe from Python to create an animated GIF.  The nice thing about this approach is I can specify a frame duration for each frame individually.  Unfortunately this depends on ImageMagick being installed on the machine.  They have a Python wrapper but it looks pretty crappy and unsupported.  Still open to other suggestions.", "As of June 2009 the originally cited blog post has a method to create animated GIFs in the comments.  Download the script images2gif.py (formerly images2gif.py, update courtesy of @geographika).", "I used images2gif.py which was easy to use. It did seem to double the file size though.."]}, {"question": "I'm new to Python and Flask and I'm trying to do the equivalent of Response.redirect as in C# - ie: redirect to a specific URL - how do I go about this?", "answers": ["You have to return a redirect:", "Take a look at the example in the documentation.", "From the Flask API Documentation (v. 2.0.x):", "I believe that this question deserves an updated. Just compare with other approaches.", "Flask includes the redirect function for redirecting to any url. Futhermore, you can abort a request early with an error code with abort:"]}, {"question": "Can I insert a column at a specific column index in pandas? ", "answers": ["see docs: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.insert.html", "If you want a single value for all rows:", "You could try to extract columns as list, massage this as you want, and reindex your dataframe:", "This will work if there is no other column with the same name. If a column, with your provided name already exists in the dataframe, it will raise a ValueError.", "You can do that after you added the 'n' column into your df as follows. "]}, {"question": "For example I have simple DF:", "answers": ["Sure!  Setup:", "Another solution is to use the query method:", "And remember to use parenthesis!", "You can use pandas it has some built in functions for comparison. So if you want to select values of \"A\" that are met by the conditions of \"B\" and \"C\" (assuming you want back a DataFrame pandas object)"]}, {"question": "I'd like to create a file with path x using python. I've been using os.system(y) where y = 'touch %s' % (x). I've looked for a non-directory version of os.mkdir, but I haven't been able to find anything. Is there a tool like this to create a file without opening it, or using system or popen/subprocess?", "answers": ["There is no way to create a file without opening it There is os.mknod(\"newfile.txt\") (but it requires root privileges on OSX). The system call to create a file is actually open() with the O_CREAT flag. So no matter how, you'll always open the file.", "Of course there IS a way to create files without opening. It's as easy as calling os.mknod(\"newfile.txt\").  The only drawback is that this call requires root privileges on OSX."]}, {"question": "I can't understand why Python doesn't have a sign function. It has an abs builtin (which I consider sign's sister), but no sign.", "answers": ["EDIT:", "\"copysign\" is defined by IEEE 754, and part of the C99 specification. That's why it's in Python. The function cannot be implemented in full by abs(x) * sign(y) because of how it's supposed to handle NaN values.", "Another one liner for sign()", "Since cmp has been removed, you can get the same functionality with", "The definition on Wikipedia reads:"]}, {"question": "How can I see what's inside a bucket in S3 with boto3? (i.e. do an \"ls\")?", "answers": ["One way to see the contents would be:", "This is similar to an 'ls' but it does not take into account the prefix folder convention and will list the objects in the bucket.  It's left up to the reader to filter out prefixes which are part of the Key name. ", "I'm assuming you have configured authentication separately. ", "My s3 keys utility function is essentially an optimized version of @Hephaestus's answer:", "In order to handle large key listings (i.e. when the directory list is greater than 1000 items), I used the following code to accumulate key values (i.e. filenames) with multiple listings (thanks to Amelio above for the first lines).  Code is for python3:"]}, {"question": "PIL does support JPEG in my system.", "answers": ["libjpeg-dev is required to be able to process jpegs with pillow (or PIL), so you need to install it and then recompile pillow. It also seems that libjpeg8-dev is needed on Ubuntu 14.04", "For those on OSX, I used the following binary to get libpng and libjpeg installed systemwide:", "This is the only way that worked for me. Installing packages and reinstalling PIL didn't work.", "The followed works on ubuntu 12.04:", "On Fedora 17 I had to install libjpeg-devel and afterwards reinstall PIL:"]}, {"question": "When I try", "answers": ["Simply put, numpy.newaxis is used to increase the dimension of the existing array by one more dimension, when used once. Thus,", "The np.newaxis is just an alias for the Python constant None, which means that wherever you use np.newaxis you could also use None:", "You started with a one-dimensional list of numbers.  Once you used numpy.newaxis, you turned it into a two-dimensional matrix, consisting of four rows of one column each.", "newaxis object in the selection tuple serves to expand the dimensions of the resulting selection by one unit-length dimension."]}, {"question": "I've spent entirely too long researching how to get two subplots to share the same y-axis with a single colorbar shared between the two in Matplotlib. ", "answers": ["Just place the colorbar in its own axis and use subplots_adjust to make room for it.", "You can simplify Joe Kington's code using the axparameter of figure.colorbar() with a list of axes.\nFrom the documentation:", "This solution does not require manual tweaking of axes locations or colorbar size, works with multi-row and single-row layouts, and works with tight_layout().  It is adapted from a gallery example, using ImageGrid from matplotlib's AxesGrid Toolbox.", "Using make_axes is even easier and gives a better result. It also provides possibilities to customise the positioning of the colorbar.\nAlso note the option of subplots to share x and y axes.", "As a beginner who stumbled across this thread, I'd like to add a python-for-dummies adaptation of abevieiramota's very neat answer (because I'm at the level that I had to look up 'ravel' to work out what their code was doing):"]}, {"question": "The above code generates a file, test.csv, with an extra \\r at each row, like so:", "answers": ["The official csv documentation recommends opening the file with newline='' on all platforms to disable universal newlines translation:", "While @john-machin gives a good answer, it's not always the best approach. For example, it doesn't work on Python 3 unless you encode all of your inputs to the CSV writer. Also, it doesn't address the issue if the script wants to use sys.stdout as the stream.", "In Python 3 (I haven't tried this in Python 2), you can also simply do", "You can introduce the  lineterminator='\\n' parameter in the csv writer command.", "You have to add attribute newline=\"\\n\" to open function like this:"]}, {"question": "I have a function called by the main program:", "answers": ["The other answers all point out that you should not catch generic exceptions, but no one seems to want to tell you why, which is essential to understanding when you can break the \"rule\". Here is an explanation. Basically, it's so that you don't hide:", "Get the name of the class that exception object belongs:", "You usually should not catch all possible exceptions with try: ... except as this is overly broad. Just catch those that are expected to happen for whatever reason. If you really must, for example if you want to find out more about some problem while debugging, you should do", "Most answers point to except (\u2026) as (\u2026): syntax (rightly so) but at the same time nobody wants to talk about an elephant in the room, where the elephant is sys.exc_info() function.\nFrom the documentation of sys module (emphasis mine):", "Unless somefunction is a very bad coded legacy function, you shouldn't need what you're asking."]}, {"question": "I've recently become interested in algorithms and have begun exploring them by writing a naive implementation and then optimizing it in various ways.", "answers": ["This one has been answered already here: Python memory profiler", "Python 3.4 includes a new module: tracemalloc. It provides detailed statistics about which code is allocating the most memory. Here's an example that displays the top three lines allocating memory.", "If you only want to look at the memory usage of an object, (answer to other question)", "Disclosure:", "Below is a simple function decorator which allows to track how much memory the process consumed before the function call, after the function call, and what is the difference:"]}, {"question": "Say I have a function:", "answers": ["I'd recommend reading that PEP the error gives you.  The problem is that your code is trying to use the ASCII encoding, but the pound symbol is not an ASCII character.  Try using UTF-8 encoding.  You can start by putting # -*- coding: utf-8 -*- at the top of your .py file.  To get more advanced, you can also define encodings on a string by string basis in your code.  However, if you are trying to put the pound sign literal in to your code, you'll need an encoding that supports it for the entire file.", "Adding the following two lines at the top of my .py script worked for me (first line was necessary):", "First add the # -*- coding: utf-8 -*- line to the beginning of the file and then use u'foo' for all your non-ASCII unicode data:", "The error message tells you exactly what's wrong. The Python interpreter needs to know the encoding of the non-ASCII character.", "Adding the following two lines in the script solved the issue for me."]}, {"question": "I have a DataFrame with four columns. I want to convert this DataFrame to a python dictionary. I want the elements of first column be keys and the elements of other columns in same row be values. ", "answers": ["The to_dict() method sets the column names as dictionary keys so you'll need to reshape your DataFrame slightly. Setting the 'ID' column as the index and then transposing the DataFrame is one way to achieve this.", "Should a dictionary like:", "Suppose your dataframe is as follows:", "Try to use Zip", "If you don't mind the dictionary values being tuples, you can use itertuples:"]}, {"question": "I would like to know how can I set a variable with another variable in jinja. I will explain, I have got a submenu and I would like show which link is active. I tried this:", "answers": ["{{ }} tells the template to print the value, this won't work in expressions like you're trying to do.  Instead, use the {% set %} template tag and then assign the value the same way you would in normal python code.", "Nice shorthand for Multiple variable assignments", "Just Set it up like this"]}, {"question": "I have a pandas dataframe in which one column of text strings contains comma-separated values. I want to split each CSV field and create a new row per entry (assume that CSV are clean and need only be split on ','). For example, a should become b:", "answers": ["UPDATE 3: it makes more sense to use Series.explode() / DataFrame.explode() methods (implemented in Pandas 0.25.0 and extended in Pandas 1.3.0 to support multi-column explode) as is shown in the usage example:", "After painful experimentation to find something faster than the accepted answer, I got this to work. It ran around 100x faster on the dataset I tried it on.", "Series and DataFrame methods define a .explode() method that explodes lists into separate rows. See the docs section on Exploding a list-like column.", "How about something like this:", "Here's a function I wrote for this common task. It's more efficient than the Series/stack methods. Column order and names are retained."]}, {"question": "I have a script reading in a csv file with very huge fields:", "answers": ["The csv file might contain very huge fields, therefore increase the field_size_limit:", "This could be because your CSV file has embedded single or double quotes. If your CSV file is tab-delimited try opening it as:", ".csv field sizes are controlled via [Python.Docs]: csv.field_size_limit([new_limit]) (emphasis is mine):", "Below is to check the current limit", "I just had this happen to me on a 'plain' CSV file. Some people might call it an invalid formatted file. No escape characters, no double quotes and delimiter was a semicolon."]}, {"question": "Given a dictionary { k1: v1, k2: v2 ... } I want to get { k1: f(v1), k2: f(v2) ... } provided I pass a function f.", "answers": ["There is no such function; the easiest way to do this is to use a dict comprehension:", "These toolz are great for this kind of simple yet repetitive logic.", "You can do this in-place, rather than create a new dict, which may be preferable for large dictionaries (if you do not need a copy).", "Due to PEP-0469 which renamed iteritems() to items() and PEP-3113 which removed Tuple parameter unpacking, in Python 3.x you should write Martijn Pieters\u2666 answer like this:", "While my original answer missed the point (by trying to solve this problem with the solution to Accessing key in factory of defaultdict), I have reworked it to propose an actual solution to the present question."]}, {"question": "In the Anaconda repository, there are two types of installers:", "answers": ["Per the original docs:", "The difference is that miniconda is just shipping the repository management system. So when you install it there is just the management system without packages. Whereas with Anaconda, it is like a distribution with some built in packages. ", "conda is both a command line tool, and a python package.", "Miniconda gives you the Python interpreter itself, along with a command-line tool called conda which operates as a cross-platform package manager geared toward Python packages, similar in spirit to the apt or yum tools that Linux users might be familiar with.", "The 2 in Anaconda2 means that the main version of Python will be 2.x rather than the 3.x installed in Anaconda3. The current release has Python 2.7.13."]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["argparse is the way to go. Here is a short summary of how to use it:", "This answer suggests optparse which is appropriate for older Python versions. For Python 2.7 and above, argparse replaces optparse. See this answer for more information.", "Since 2012 there is a very easy, powerful and really cool module for argument parsing called docopt. Here is an example taken from its documentation: ", "The new hip way is argparse for these reasons.  argparse > optparse > getopt", "I prefer Click. It abstracts managing options and allows \"(...) creating beautiful command line interfaces in a composable way with as little code as necessary\"."]}, {"question": "I am sketching the architecture for a set of programs that share various interrelated objects stored in a database. I want one of the programs to act as a service which provides a higher level interface for operations on these objects, and the other programs to access the objects through that service.", "answers": ["Yes you can. I do it using the pythoncom libraries that come included with ActivePython or can be installed with pywin32 (Python for Windows extensions).", "The simplest way is to use the: NSSM - the Non-Sucking Service Manager. Just download and unzip to a location of your choosing. It's a self-contained utility, around 300KB (much less than installing the entire pywin32 suite just for this purpose) and no \"installation\" is needed. The zip contains a 64-bit and a 32-bit version of the utility. Either should work well on current systems (you can use the 32-bit version to manage services on 64-bit systems).", "Although I upvoted the chosen answer a couple of weeks back, in the meantime I struggled a lot more with this topic. It feels like having a special Python installation and using special modules to run a script as a service is simply the wrong way. What about portability and such?", "The simplest way to achieve this is to use native command sc.exe:", "There are a couple alternatives for installing as a service virtually any Windows executable."]}, {"question": "I need to choose some elements from the given list, knowing their index. Let say I would like to create a new list, which contains element with index 1, 2, 5, from given list [-2, 1, 5, 3, 8, 5, 6]. What I did is:", "answers": ["You can use operator.itemgetter:", "Alternatives:", "Another solution could be via pandas Series:", "Basic and not very extensive testing comparing the execution time of the five supplied answers:", "Here's a simpler way:"]}, {"question": "Recently I started using Python3 and it's lack of xrange hurts.", "answers": ["Some performance measurements, using timeit instead of trying to do it manually with time.", "Python3's range is Python2's xrange. There's no need to wrap an iter around it. To get an actual list in Python3, you need to use list(range(...))", "Python 3's range type works just like Python 2's xrange. I'm not sure why you're seeing a slowdown, since the iterator returned by your xrange function is exactly what you'd get if you iterated over range directly.", "One way to fix up your python2 code is:", "xrange from Python 2 is a generator and implements iterator while range is just a function.\nIn Python3 I don't know why was dropped off the xrange."]}, {"question": "I have a Decimal('3.9') as part of an object, and wish to encode this to a JSON string which should look like {'x': 3.9}. I don't care about precision on the client side, so a float is fine.", "answers": ["Simplejson 2.1 and higher has native support for Decimal type:", "I would like to let everyone know that I tried Micha\u0142 Marczyk's answer on my web server that was running Python 2.6.5 and it worked fine. However, I upgraded to Python 2.7 and it stopped working. I tried to think of some sort of way to encode Decimal objects and this is what I came up with:", "How about subclassing json.JSONEncoder?", "The native Django option is missing so I'll add it for the next guy/gall that looks for it.", "In my Flask app, Which uses python 2.7.11, flask alchemy(with 'db.decimal' types), and Flask Marshmallow ( for 'instant' serializer and deserializer), i had this error, every time i did a GET or POST. The serializer and deserializer, failed to convert  Decimal types into any JSON identifiable format. "]}, {"question": "Here is my code,", "answers": ["As suggested by Mark Ransom, I found the right encoding for that problem. The encoding was \"ISO-8859-1\", so replacing open(\"u.item\", encoding=\"utf-8\") with open('u.item', encoding = \"ISO-8859-1\") will solve the problem.", "The following also worked for me. ISO\u00a08859-1 is going to save a lot, mainly if using Speech Recognition APIs.", "Your file doesn't actually contain UTF-8 encoded data; it contains some other encoding. Figure out what that encoding is and use it in the open call.", "Try this to read using Pandas:", "This works:"]}, {"question": "Is there a way to open a file for both reading and writing?", "answers": ["Here's how you read a file, and then write to it (overwriting any existing data), without closing and reopening:", "Summarize the I/O behaviors", "r+ is the canonical mode for reading and writing at the same time. This is not different from using the fopen() system call since file() / open() is just a tiny wrapper around this operating system call.", "I have tried something like this and it works as expected:"]}, {"question": "What do I have to do in Python to figure out which encoding a string has?", "answers": ["In Python 3, all strings are sequences of Unicode characters. There is a bytes type that holds raw bytes.", "You can use type or isinstance.", "In python 3.x all strings are sequences of Unicode characters. and doing the isinstance check for str (which means unicode string by default) should suffice.", "Unicode is not an encoding - to quote Kumar McMillan:", "If your code needs to be compatible with both Python 2 and Python 3, you can't directly use things like isinstance(s,bytes) or isinstance(s,unicode) without wrapping them in either try/except or a python version test, because bytes is undefined in Python 2 and unicode is undefined in Python 3."]}, {"question": "I want to call a C library from a Python application. I don't want to wrap the whole API, only the functions and datatypes that are relevant to my case. As I see it, I have three choices:", "answers": ["Warning: a Cython core developer's opinion ahead.", "ctypes is your best bet for getting it done quickly, and it's a pleasure to work with as you're still writing Python!", "Cython is a pretty cool tool in itself, well worth learning, and is surprisingly close to the Python syntax. If you do any scientific computing with Numpy, then Cython is the way to go because it integrates with Numpy for fast matrix operations.", "For calling a C library from a Python application there is also cffi which is a new alternative for ctypes. It brings a fresh look for FFI: ", "I'll throw another one out there: SWIG"]}]