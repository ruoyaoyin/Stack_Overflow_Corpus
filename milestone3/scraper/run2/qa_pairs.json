[{"question": "Reading the changes in Python 3.1, I found something... unexpected:", "answers": ["Named tuples are basically easy-to-create, lightweight object types.  Named tuple instances can be referenced using object-like variable dereferencing or the standard tuple syntax.  They can be used similarly to struct or other common record types, except that they are immutable.  They were added in Python 2.6 and Python 3.0, although there is a recipe for implementation in Python 2.4.", "A named tuple is a tuple.", "namedtuple is a factory function for making a tuple class. With that class we can create tuples that are callable by name also.", "namedtuples are a great feature, they are perfect container for data. When you have to \"store\" data you would use tuples or dictionaries, like:", "named tuples allow backward compatibility with code that checks for the version like this"]}, {"question": "What is the difference between old style and new style classes in Python?  When should I use one or the other?", "answers": ["From New-style and classic classes:", "Declaration-wise:", "Important behavior changes between old and new style classes", "Old style classes are still marginally faster for attribute lookup. This is not usually important, but it may be useful in performance-sensitive Python 2.x code:", "Guido has written The Inside Story on New-Style Classes, a really great article about new-style and old-style class in Python."]}, {"question": "Should I put the shebang in my Python scripts? In what form?", "answers": ["The shebang line in any script determines the script's ability to be executed like a standalone executable without typing python beforehand in the terminal or when double clicking it in a file manager (when configured properly). It isn't necessary but generally put there so when someone sees the file opened in an editor, they immediately know what they're looking at. However, which shebang line you use is important.", "It's really just a matter of taste. Adding the shebang means people can invoke the script directly if they want (assuming it's marked as executable); omitting it just means python has to be invoked manually.", "Should I put the shebang in my Python scripts? ", "If you have more than one version of Python and the script needs to run under a specific version, the she-bang can ensure the right one is used when the script is executed directly, for example:", "You should add a shebang if the script is intended to be executable. You should also install the script with an installing software that modifies the shebang to something correct so it will work on the target platform. Examples of this is distutils and Distribute."]}, {"question": "How can I print the error/exception in my except: block?", "answers": ["For Python 2.6 and later and Python 3.x:", "The traceback module provides methods for formatting and printing exceptions and their tracebacks, e.g. this would print exception like the default handler does:", "In Python 2.6 or greater it's a bit cleaner:", "In case you want to pass error strings, here is an example from Errors and Exceptions (Python 2.6)", "(I was going to leave this as a comment on @jldupont's answer, but I don't have enough reputation.)"]}, {"question": "I need to get the location of the home directory of the current logged-on user. Currently, I've been using the following on Linux:", "answers": ["You want to use os.path.expanduser.\nThis will ensure it works on all platforms:", "I found that pathlib module also supports this.", "I know this is an old thread, but I recently needed this for a large scale project (Python 3.8). It had to work on any mainstream OS, so therefore I went with the solution @Max wrote in the comments.", "This doesn't really qualify for the question (it being tagged as cross-platform), but perhaps this could be useful for someone."]}, {"question": "The community reviewed whether to reopen this question last month and left it closed:", "answers": ["If you need to do this, do", "All proposed answers so far seem to miss the fact that a double (floats in python are actually doubles) can also be an integer (if it has nothing after the decimal point).  I use the built-in is_integer() method on doubles to check this.", "Here's a summary of the different methods mentioned here:", "If you really need to check then it's better to use abstract base classes rather than concrete classes. For an integer that would mean:", "See here for more."]}, {"question": "Let\u2019s say I have the following Pandas dataframe:", "answers": ["You can use the isin method:", "You can use the method query:", "Another method;"]}, {"question": "I wonder what is better to do:", "answers": ["in is definitely more pythonic.", "in wins hands-down, not just in elegance (and not being deprecated;-) but also in performance, e.g.:", "According to python docs:", "Use dict.has_key() if (and only if) your code is required to be runnable by Python versions earlier than 2.3 (when key in dict was introduced). ", "There is one example where in actually kills your performance."]}, {"question": "How does one write a unittest that fails only if a function doesn't throw an expected exception?", "answers": ["Use TestCase.assertRaises (or TestCase.failUnlessRaises) from the unittest module, for example:", "Since Python 2.7 you can use context manager to get ahold of the actual Exception object thrown:", "The code in my previous answer can be simplified to:", "How do you test that a Python function throws an exception?", "Your code should follow this pattern (this is a unittest module style test):"]}, {"question": "How do I import other files in Python?", "answers": ["Don't just hastily pick the first import strategy that works for you or else you'll have to rewrite the codebase later on when you find it doesn't meet your needs.  ", "importlib was added to Python 3 to programmatically import a module.", "To import a specific Python file at 'runtime' with a known name:", "First case \nYou want to import file A.py in file B.py, these two files are in the same folder, like this:", "You do not have many complex methods to import a python file from one folder to another. Just create a __init__.py file to declare this folder is a python package and then go to your host file where you want to import just type "]}, {"question": "I am looking for minimum and maximum values for integers in python. For eg., in Java, we have Integer.MIN_VALUE and Integer.MAX_VALUE. Is there something like this in python?", "answers": ["In Python 3, this question doesn't apply. The plain int type is unbounded.", "If you just need a number that's bigger than all others, you can use", "The sys.maxint constant has been removed from Python 3.0 onward, instead use sys.maxsize.", "In Python integers will automatically switch from a fixed-size int representation into a variable width long representation once you pass the value sys.maxint, which is either 231 - 1 or 263 - 1 depending on your platform. Notice the L that gets appended here:", "For Python 3, it is"]}, {"question": "\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\r\n                ", "answers": ["Spreadsheet version"]}, {"question": "What is the purpose of __slots__ in Python \u2014 especially with respect to when I would want to use it, and when not?", "answers": ["The special attribute __slots__ allows you to explicitly state which instance attributes you expect your object instances to have, with the expected results:", "Quoting Jacob Hallen:", "You would want to use __slots__ if you are going to instantiate a lot (hundreds, thousands) of objects of the same class. __slots__ only exists as a memory optimization tool.", "Each python object has a __dict__ atttribute which is a dictionary containing all other attributes. e.g. when you type self.attr python is actually doing self.__dict__['attr']. As you can imagine using a dictionary to store attribute takes some extra space & time for accessing it.", "In addition to the other answers, here is an example of using __slots__:"]}, {"question": "Does anyone know how to do convert from a string to a boolean in Python? I found this link. But it doesn't look like a proper way to do it.  I.e. using built-in functionality, etc.", "answers": ["Really, you just compare the string to whatever you expect to accept as representing true, so you can do this:", "Use:", "Then call it like so:", "The JSON parser is also useful for in general converting strings to reasonable python types.", "Starting with Python 2.6, there is now ast.literal_eval:"]}, {"question": "I happened to find myself having a basic filtering need: I have a list and I have to filter it by an attribute of the items.", "answers": ["It is strange how much beauty varies for different people. I find the list comprehension much clearer than filter+lambda, but use whichever you find easier.", "This is a somewhat religious issue in Python. Even though Guido considered removing map, filter and reduce from Python 3, there was enough of a backlash that in the end only reduce was moved from built-ins to functools.reduce.", "Since any speed difference is bound to be miniscule, whether to use filters or list comprehensions comes down to a matter of taste. In general I'm inclined to use comprehensions (which seems to agree with most other answers here), but there is one case where I prefer filter. ", "Although filter may be the \"faster way\", the \"Pythonic way\" would be not to care about such things unless performance is absolutely critical (in which case you wouldn't be using Python!).", "I thought I'd just add that in python 3, filter() is actually an iterator object, so you'd have to pass your filter method call to list() in order to build the filtered list. So in python 2:"]}, {"question": "I am trying to print an integer in Python 2.6.1 with commas as thousands separators. For example, I want to show the number 1234567 as 1,234,567. How would I go about doing this? I have seen many examples on Google, but I am looking for the simplest practical way.", "answers": ["Per Format Specification Mini-Language,", "I got this to work:", "I'm surprised that no one has mentioned that you can do this with f-strings in Python 3.6+ as easy as this:", "For inefficiency and unreadability it's hard to beat:", "Here is the locale grouping code after removing irrelevant parts and cleaning it up a little:"]}, {"question": "I have a list of dictionaries like this:", "answers": ["Supposing d is your list of dicts, simply:", "The other answers are correct, but not much has been explained in terms of advantages and limitations of these methods. The aim of this post will be to show examples of these methods under different situations, discuss when to use (and when not to use), and suggest alternatives.", "In pandas 16.2, I had to do pd.DataFrame.from_records(d) to get this to work.", "You can also use pd.DataFrame.from_dict(d) as :", "Pyhton3:\nMost of the solutions listed previously work. However, there are instances when row_number of the dataframe is not required and the each row (record) has to be written individually."]}, {"question": "I notice that a pre-increment/decrement operator can be applied on a variable (like ++count). It compiles, but it does not actually change the value of the variable!", "answers": ["++ is not an operator. It is two + operators. The + operator is the identity operator, which does nothing. (Clarification: the + and - unary operators only work on numbers, but I presume that you wouldn't expect a hypothetical ++ operator to work on strings.)", "Python does not have pre and post increment operators.", "While the others answers are correct in so far as they show what a mere + usually does (namely, leave the number as it is, if it is one), they are incomplete in so far as they don't explain what happens.", "Python does not have unary increment/decrement operators (--/++). Instead, to increment a value, use ", "Python does not have these operators, but if you really need them you can write a function having the same functionality."]}, {"question": "Here's my code:", "answers": ["You would want and instead of &&.", "Python uses and and or conditionals.", "I'm getting an error in the IF conditional. What am I doing wrong?", "Two comments:", "You use and and or to perform logical operations like in C, C++. Like literally and is && and or is ||. "]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["Are you talking about lambda expressions? Like", "lambda is just a fancy way of saying function. Other than its name, there is nothing obscure, intimidating or cryptic about it. When you read the following line, replace lambda by function in your mind:", "The two-line summary:", "A lambda is part of a very important abstraction mechanism which deals with higher order functions. To get proper understanding of its value, please watch high quality lessons from Abelson and Sussman, and read the book SICP", "I doubt lambda will go away.\nSee Guido's post about finally giving up trying to remove it. Also see an outline of the conflict."]}, {"question": "I work with Series and DataFrames on the terminal a lot. The default __repr__ for a Series returns a reduced sample, with some head and tail values, but the rest missing.", "answers": ["You can also use the option_context, with one or more options:", "No need to hack settings. There is a simple way:", "Sure, if this comes up a lot, make a function like this one. You can even configure it to load every time you start IPython: https://ipython.org/ipython-doc/1/config/overview.html", "After importing pandas, as an alternative to using the context manager, set such options for displaying entire dataframes:", "Use the tabulate package:"]}, {"question": "I'm helping a veterinary clinic measuring pressure under a dogs paw. I use Python for my data analysis and now I'm stuck trying to divide the paws into (anatomical) subregions.", "answers": ["I detected the peaks using a local maximum filter. Here is the result on your first dataset of 4 paws:\n", "Data file: paw.txt. Source code:", "This is an image registration problem. The general strategy is:", "Using persistent homology to analyze your data set I get the following result (click to enlarge):", "This problem has been studied in some depth by physicists. There is a good implementation in ROOT. Look at the TSpectrum classes (especially TSpectrum2 for your case) and the documentation for them."]}, {"question": "A tweet reads: ", "answers": ["From Ian Bicking's own introduction to pip:", "Many of the answers here are out of date for 2015 (although the initially accepted one from Daniel Roseman is not). Here's the current state of things:", "Another\u2014as of yet unmentioned\u2014reason for favoring pip is because it is the new hotness and will continue to be used in the future.", "Two reasons, there may be more:", "REQUIREMENTS files."]}, {"question": "I have the list [0, 1, 2, 3, 4] I'd like to make it into [1, 2, 3, 4]. How do I go about this? ", "answers": ["You can find a short collection of useful list functions here.", "Slicing:", "More on this here.", "With list slicing, see the Python tutorial about lists for more details:", "you would just do this"]}, {"question": "In Python, how do I get a function name as a string, without calling the function?", "answers": ["Using __name__ is the preferred method as it applies uniformly. Unlike func_name, it works on built-in functions as well:", "To get the current function's or method's name from inside it, consider:", "There are also other fun properties of functions. Type dir(func_name) to list them. func_name.func_code.co_code is the compiled function, stored as a string.", "If you're interested in class methods too, Python 3.3+ has __qualname__ in addition to __name__.", "This function will return the caller's function name."]}, {"question": "Using pip, is it possible to figure out which version of a package is currently installed?", "answers": ["As of pip 1.3, there is a pip show command.", "I just sent a pull request in pip with the enhancement Hugo Tavares said:", "Pip 1.3 now also has a list command:", "and with --outdated as an extra argument, you will get the Current and Latest versions of the packages you are using :", "You can also install yolk and then run yolk -l which also gives some nice output.  Here is what I get for my little virtualenv:"]}, {"question": "I know pip is a package manager for python packages. However, I saw the installation on IPython's website use conda to install IPython.", "answers": ["Quoting from the Conda blog:", "Disclaimer: This answer describes the state of things as it was a decade ago, at that time pip did not support binary packages. Conda was specifically created to better support building and distributing binary packages, in particular data science libraries with C extensions. For reference, pip only gained widespread support for portable binary packages with wheels (pip 1.4 in 2013) and the manylinux1 specification (pip 8.1 in March 2016). See the more recent answer for more history.", "The other answers give a fair description of the details, but I want to highlight some high-level points.", "Not to confuse you further, \nbut you can also use pip within your conda environment, which validates the general vs. python specific managers comments above. ", "Quote from Conda for Data Science article onto Continuum's website:"]}, {"question": "I am trying to understand the advantages of multiprocessing over threading. I know that multiprocessing gets around the Global Interpreter Lock, but what other advantages are there, and can threading not do the same thing?", "answers": ["Here are some pros/cons I came up with.", "The threading module uses threads, the multiprocessing module uses processes. The difference is that threads run in the same memory space, while processes have separate memory. This makes it a bit harder to share objects between processes with multiprocessing. Since threads use the same memory, precautions have to be taken or two threads will write to the same memory at the same time. This is what the global interpreter lock is for.", "Threading's job is to enable applications to be responsive. Suppose you have a database connection and you need to respond to user input. Without threading, if the database connection is busy the application will not be able to respond to the user. By splitting off the database connection into a separate thread you can make the application more responsive. Also because both threads are in the same process, they can access the same data structures - good performance, plus a flexible software design.", "Python documentation quotes", "The key advantage is isolation. A crashing process won't bring down other processes, whereas a crashing thread will probably wreak havoc with other threads."]}, {"question": "How do I create a GUID in Python that is platform independent? I hear there is a method using ActivePython on Windows but it's Windows only because it uses COM. Is there a method using plain Python?", "answers": ["The uuid module provides immutable UUID objects (the UUID class) and the functions uuid1(), uuid3(), uuid4(), uuid5() for generating version 1, 3, 4, and 5 UUIDs as specified in RFC 4122.", "If you're using Python 2.5 or later, the uuid module is already included with the Python standard distribution.", "Copied from : https://docs.python.org/3/library/uuid.html (Since the links posted were not active and they keep updating)", "I use GUIDs as random keys for database type operations.", "If you need to pass UUID for a primary key for your model or unique field then below code returns the UUID object -     "]}, {"question": "I'm iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. ", "answers": ["You can use a list comprehension to create a new list containing only the elements you don't want to remove:", "The answers suggesting list comprehensions are ALMOST correct -- except that they build a completely new list and then give it the same name the old list as, they do NOT modify the old list in place. That's different from what you'd be doing by selective removal, as in @Lennart's suggestion -- it's faster, but if your list is accessed via multiple references the fact that you're just reseating one of the references and NOT altering the list object itself can lead to subtle, disastrous bugs.", "You need to take a copy of the list and iterate over it first, or the iteration will fail with what may be unexpected results.", "You need to go backwards otherwise it's a bit like sawing off the tree-branch that you are sitting on :-)", "Overview of workarounds"]}, {"question": "Given a path such as \"mydir/myfile.txt\", how do I find the file's absolute path relative to the current working directory in Python? E.g. on Windows, I might end up with:", "answers": ["Also works if it is already an absolute path:", "You could use the new Python 3.4 library pathlib. (You can also get it for Python 2.6 or 2.7 using pip install pathlib.) The authors wrote: \"The aim of this library is to provide a simple hierarchy of classes to handle filesystem paths and the common operations users do over them.\"", "Install a third-party path module (found on PyPI), it wraps all the os.path functions and other related functions into methods on an object that can be used wherever strings are used:", "Note that expanduser is necessary (on Unix) in case the given expression for the file (or directory) name and location may contain a leading ~/(the tilde refers to the user's home directory), and expandvars takes care of any other environment variables (like $HOME).", "Update for Python 3.4+ pathlib that actually answers the question:"]}, {"question": "Coming from a C# background the naming convention for variables and method names are usually either camelCase or PascalCase:", "answers": ["See Python PEP 8: Function and Variable Names:", "The Google Python Style Guide has the following convention:", "David Goodger (in \"Code Like a Pythonista\" here)  describes the PEP 8 recommendations as follows:", "As the Style Guide for Python Code admits,", "As mentioned, PEP 8 says to use lower_case_with_underscores for variables, methods and functions."]}, {"question": "I'm building a Python application and don't want to force my clients to install Python and modules.", "answers": ["You can use PyInstaller to package Python programs as standalone executables. It works on Windows, Linux, and Mac.", "You can use py2exe as already answered and use Cython to convert your key .py files in .pyc, C compiled files, like .dll in Windows and .so on Linux.", "You might wish to investigate Nuitka. It takes Python source code and converts it in to C++ API calls. Then it compiles into an executable binary (ELF on Linux). It has been around for a few years now and supports a wide range of Python versions.", "Yes, it is possible to compile Python scripts into standalone executables.", "I would like to compile some useful information about creating standalone files on Windows using Python 2.7."]}, {"question": "Today, I came across the dict method get which, given a key in the dictionary, returns the associated value.", "answers": ["It allows you to provide a default value if the key is missing:", "What is the dict.get() method?", "get takes a second optional value.  If the specified key does not exist in your dictionary, then this value will be returned.", "I will give a practical example in scraping web data using python, a lot of the times you will get keys with no values, in those cases you will get errors if you use dictionary['key'], whereas dictionary.get('key', 'return_otherwise') has no problems.", "A gotcha to be aware of when using .get():"]}, {"question": "How can I write a try/except block that catches all exceptions?", "answers": ["Apart from a bare except: clause (which as others have said you shouldn't use), you can simply catch Exception:", "You can but you probably shouldn't:", "To catch all possible exceptions, catch BaseException. It's on top of the Exception hierarchy:", "You can do this to handle general exceptions", "Very simple example, similar to the one found here:"]}, {"question": "I've always laughed to myself when I've looked back at my VB6 days and thought, \"What modern language doesn't allow incrementing with double plus signs?\":", "answers": ["Python doesn't support ++, but you can do:", "Simply put, the ++ and -- operators don't exist in Python because they wouldn't be operators, they would have to be statements. All namespace modification in Python is a statement, for simplicity and consistency. That's one of the design decisions. And because integers are immutable, the only way to 'change' a variable is by reassigning it.", "You can do:", "Yes. The ++ operator is not available in Python. Guido doesn't like these operators.", "The main reason ++ comes in handy in C-like languages is for keeping track of indices. In Python, you deal with data in an abstract way and seldom increment through indices and such. The closest-in-spirit thing to ++ is the next method of iterators."]}, {"question": "I have a dataframe in pandas which I would like to write to a CSV file.", "answers": ["To delimit by a tab you can use the sep argument of to_csv:", "When you are storing a DataFrame object into a csv file using the to_csv method, you probably wont be needing to store the preceding indices of each row of the DataFrame object.", "To write a pandas DataFrame to a CSV file, you will need DataFrame.to_csv. This function offers many arguments with reasonable defaults that you will more often than not need to override to suit your specific use case. For example, you might want to use a different separator, change the datetime format, or drop the index when writing. to_csv has arguments you can pass to address these requirements.", "Example of export in file with full path on Windows and in case your file has headers:", "Something else you can try if you are having issues encoding to 'utf-8' and want to go cell by cell you could try the following. "]}, {"question": "What is the related_name argument useful for on ManyToManyField and ForeignKey fields? For example, given the following code, what is the effect of related_name='maps'?", "answers": ["The related_name attribute specifies the name of the reverse relation from the User model back to your model.", "To add to existing  answer - related name is a must in case there 2 FKs in the model that point to the same table. For example in case of Bill of material", "The related_name argument is also useful if you have more complex related class names. For example, if you have a foreign key relationship:", "The essentials of your question are as follows.", "The related name parameter is actually an option. If we do not set it, Django\nautomatically creates the other side of the relation for us. In the case of the Map model,\nDjango would have created a map_set attribute, allowing access via m.map_set in your\nexample(m being your class instance). The formula Django uses is the name of the model followed by the\nstring _set. The related name parameter thus simply overrides Django\u2019s default rather\nthan providing new behavior."]}, {"question": "How can I use ORDER BY descending in a SQLAlchemy query like the following?", "answers": ["Just as an FYI, you can also specify those things as column attributes. For instance, I might have done:", "Usage from @jpmc26", "One other thing you might do is:", "This will order by amount in descending order\nor ", "You can try: .order_by(ClientTotal.id.desc())"]}, {"question": "I have a file called tester.py, located on /project.", "answers": ["Take a look at the Packages documentation (Section 6.4).", "In lib\\BoxTime.py, write a function foo() like this:", "You can try inserting it in sys.path:", "I am writing this down because everyone seems to suggest that you have to create a lib directory.", "Try import .lib.BoxTime. For more information read about relative import in PEP 328."]}, {"question": "Python is installed in a local directory.  ", "answers": ["Based on your comments to orip's post, I guess this is what happened:", "Does", "I ran into something very similar when I did this exercise in LPTHW; I could never get Python to recognise that I had files in the directory I was calling from. But I was able to get it to work in the end. What I did, and what I recommend, is to try this:", "On *nix, also make sure that PYTHONPATH is configured correctly, especially that it has this format:", "You are reading this answer says that your __init__.py is in the right place, you have installed all the dependencies and you are still getting the ImportError."]}, {"question": "What the difference is between flush() and commit() in SQLAlchemy?", "answers": ["A Session object is basically an ongoing transaction of changes to a database (update, insert, delete). These operations aren't persisted to the database until they are committed (if your program aborts for some reason in mid-session transaction, any uncommitted changes within are lost).", "This does not strictly answer the original question but some people have mentioned that with session.autoflush = True you don't have to use session.flush()... And this is not always true.", "Why flush if you can commit?", "Use flush when you need to simulate a write, for example to get a primary key ID from an autoincrementing counter.", "The existing answers don't make a lot of sense unless you understand what a database transaction is. (Twas the case for myself until recently.)"]}, {"question": "How do I learn where the source file for a given Python module is installed? Is the method different on Windows than on Linux?", "answers": ["For a pure python module you can find the source by looking at themodule.__file__.\nThe datetime module, however, is written in C, and therefore datetime.__file__ points to a .so file (there is no datetime.__file__ on Windows), and therefore, you can't see the source.", "Running python -v from the command line should tell you what is being imported and from where.  This works for me on Windows and Mac OS X.", "I realize this answer is 4 years late, but the existing answers are misleading people.", "If you're using pip to install your modules, just pip show $module the location is returned.", "The sys.path list contains the list of directories which will be searched for modules at runtime:"]}, {"question": "Is there a performance or code maintenance issue with using assert as part of the standard code instead of using it just for debugging purposes?", "answers": ["Asserts should be used to test conditions that should never happen.  The purpose is to crash early in the case of a corrupt program state.", "\"assert\" statements are removed when the compilation is optimized.  So, yes, there are both performance and functional differences.", "To be able to automatically throw an error when x become less than zero throughout the function. You can use class descriptors. Here is an example:", "Assume you work on 200,000 lines of code with four colleagues Alice, Bernd, Carl, and Daphne.\nThey call your code, you call their code.", "In addition to the other answers, asserts themselves throw exceptions, but only AssertionErrors. From a utilitarian standpoint, assertions aren't suitable for when you need fine grain control over which exceptions you catch."]}, {"question": "In C++, I can iterate over an std::string like this:", "answers": ["As Johannes pointed out, ", "If you need access to the index as you iterate through the string, use enumerate():", "Even easier:", "Just to make a more comprehensive answer, the C way of iterating over a string can apply in Python, if you really wanna force a square peg into a round hole.", "Well you can also do something interesting like this and do your job by using for loop"]}, {"question": "[] = empty list", "answers": ["No, there's no literal syntax for the empty set. You have to write set().", "By all means, please use set() to create an empty set. ", "Just to extend the accepted answer:", "Yes. The same notation that works for non-empty dict/set works for empty ones.", "It depends on if you want the literal for a comparison, or for assignment."]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["If you're brand new to using unittests, the simplest approach to learn is often the best. On that basis along I recommend using py.test rather than the default unittest module.", "The free Python book Dive Into Python has a chapter on unit testing that you might find useful.", "There are, in my opinion, three great Python testing frameworks that are good to check out:", "The docs for unittest would be a good place to start.", "unittest comes with the standard library, but I would recommend you nosetests."]}, {"question": "In Python, I have an ndarray y\nthat is printed as array([0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1])", "answers": ["Non-numpy way:", "What about using numpy.count_nonzero, something like ", "Personally, I'd go for:\n(y == 0).sum() and (y == 1).sum()", "For your case you could also look into numpy.bincount", "If you know that they are just 0 and 1:"]}, {"question": "Sometimes I come across code such as this:", "answers": ["I think this would be best explained by the following picture:", "These are subplot grid parameters encoded as a single integer. For example, \"111\" means \"1x1 grid, first subplot\" and \"234\" means \"2x3 grid, 4th subplot\".", "The answer from Constantin is spot on but for more background this behavior is inherited from Matlab. ", "My solution is", " "]}, {"question": "I'm trying to use NetworkX to read a Shapefile and use the function write_shp() to generate the Shapefiles that will contain the nodes and edges, but when I try to run the code it gives me the following error:", "answers": ["As you are in python3 , use dict.items() instead of dict.iteritems()", "In Python2, we had .items() and .iteritems() in dictionaries. dict.items() returned list of tuples in dictionary [(k1,v1),(k2,v2),...]. It copied all tuples in dictionary and created new list. If dictionary is very big, there is very big memory impact. ", "I had a similar problem (using 3.5) and lost 1/2 a day to it but here is a something that works - I am retired and just learning Python so I can help my grandson (12) with it.", "In Python2, dictionary.iteritems() is more efficient than dictionary.items() so in Python3, the functionality of dictionary.iteritems() has been migrated to dictionary.items() and iteritems() is removed. So you are getting this error. ", "The purpose of .iteritems() was to use less memory space by yielding one result at a time while looping. I am not sure why Python 3 version does not support iteritems()though it's been proved to be efficient than .items()"]}, {"question": "__del__(self) above fails with an AttributeError exception.  I understand Python doesn't guarantee the existence of \"global variables\" (member data in this context?) when __del__() is invoked.  If that is the case and this is the reason for the exception, how do I make sure the object destructs properly?", "answers": ["I'd recommend using Python's with statement for managing resources that need to be cleaned up.  The problem with using an explicit close() statement is that you have to worry about people forgetting to call it at all or forgetting to place it in a finally block to prevent a resource leak when an exception occurs.", "The standard way is to use atexit.register:", "As an appendix to Clint's answer, you can simplify PackageResource using contextlib.contextmanager:", "A better alternative is to use weakref.finalize. See the examples at Finalizer Objects and Comparing finalizers with __del__() methods.", "I don't think that it's possible for instance members to be removed before __del__ is called. My guess would be that the reason for your particular AttributeError is somewhere else (maybe you mistakenly remove self.file elsewhere)."]}, {"question": "How can I print the version number of the current Python installation from my script?", "answers": ["Try", "This prints something like", "Try    ", "expanded version  ", "If you are using jupyter notebook Try:"]}, {"question": "\nWant to improve this question? Update the question so it can be answered with facts and citations by editing this post.\r\n                ", "answers": ["For a file module.py, the unit test should normally be called test_module.py, following Pythonic naming conventions.", "If there has only 1 test files, putting it in a top-level directory is recommended:", "A common practice is to put the tests directory in the same parent directory as your module/package. So if your module was called foo.py your directory layout would look like:", "We had the very same question when writing Pythoscope (https://pypi.org/project/pythoscope/), which generates unit tests for Python programs.  We polled people on the testing in python list before we chose a directory, there were many different opinions.  In the end we chose to put a \"tests\" directory in the same directory as the source code. In that directory we generate a test file for each module in the parent directory.  ", "I also tend to put my unit tests in the file itself, as Jeremy Cantrell above notes, although I tend to not put the test function in the main body, but rather put everything in an"]}, {"question": "What is the most efficient way to map a function over a numpy array? The way I've been doing it in my current project is as follows:", "answers": ["I've tested all suggested methods plus np.array(map(f, x)) with perfplot (a small project of mine).", "How about using numpy.vectorize.", "As noted by @user2357112, a \"direct\" method of applying the function is always the fastest and simplest way to map a function over Numpy arrays:", "There are numexpr, numba and cython around, the goal of this answer is to take these possibilities into consideration.", "Arithmetic operations on arrays are automatically applied elementwise, with efficient C-level loops that avoid all the interpreter overhead that would apply to a Python-level loop or comprehension."]}, {"question": "I activated a virtualenv which has pip installed. I did", "answers": ["pip show <package name> will provide the location for Windows and macOS, and I'm guessing any system. :)", "pip when used with virtualenv will generally install packages in the path <virtualenv_name>/lib/<python_ver>/site-packages.", "pip list -v can be used to list packages' install locations, introduced in https://pip.pypa.io/en/stable/news/#b1-2018-03-31", "Easiest way is probably", "By default, on Linux, Pip installs packages to /usr/local/lib/python2.7/dist-packages."]}, {"question": "I'm trying to get the name of the Python script that is currently running.", "answers": ["You can use __file__ to get the name of the current file. When used in the main module, this is the name of the script that was originally invoked.", "This will print foo.py for python foo.py, dir/foo.py for python dir/foo.py, etc. It's the first argument to python. (Note that after py2exe it would be foo.exe.)", "For completeness' sake, I thought it would be worthwhile summarizing the various possible outcomes and supplying references for the exact behaviour of each.", "Note that __file__ will give the file where this code resides, which can be imported and different from the main file being interpreted. To get the main file, the special __main__ module can be used:", "The Above answers are good . But I found this method more efficient using above results.\nThis results in actual script file name not a path."]}, {"question": "What is the proper way to use **kwargs in Python when it comes to default values?", "answers": ["You can pass a default value to get() for keys that are not in the dictionary:", "While most answers are saying that, e.g.,", "I suggest something like this", "You'd do", "Using **kwargs and default values is easy.  Sometimes, however, you shouldn't be using **kwargs in the first place."]}, {"question": "Suppose I have a Python function as defined below:", "answers": ["If the function is from a source file available on the filesystem, then inspect.getsource(foo) might be of help:", "The inspect module has methods for retrieving source code from python objects. Seemingly it only works if the source is located in a file though. If you had that I guess you wouldn't need to get the source from the object.", "Just use foo?? or ??foo.", "dis is your friend if the source code is not available:", "While I'd generally agree that inspect is a good answer, I'd disagree that you can't get the source code of objects defined in the interpreter.  If you use dill.source.getsource from dill, you can get the source of functions and lambdas, even if they are defined interactively.\nIt also can get the code for from bound or unbound class methods and functions defined in curries... however, you might not be able to compile that code without the enclosing object's code."]}, {"question": "I have a Python pandas DataFrame rpt:", "answers": ["Use the isin method: ", "isin() is ideal if you have a list of exact matches, but if you have a list of partial matches or substrings to look for, you can filter using the str.contains method and regular expressions.", "you can also use ranges by using:", "You can also directly query your DataFrame for this information.", "Given a dataframe like this:"]}, {"question": "Here's my code:", "answers": ["As stated in the urllib2 documentation:", "For a script working with Python 2 (tested versions 2.7.3 and 2.6.8) and Python 3 (3.2.3 and 3.3.2+) try:", "The above didn't work for me in 3.3. Try this instead (YMMV, etc)", "Some tab completions to show the contents of the packages in Python 2 vs Python 3.", "Python 3:"]}, {"question": "I'm trying to use pandas to manipulate a .csv file but I get this error:", "answers": ["you could also try;", "It might be an issue with", "The parser is getting confused by the header of the file.  It reads the first row and infers the number of columns from that row.  But the first two rows aren't representative of the actual data in the file.", "This is definitely an issue of delimiter, as most of the csv CSV are got create using sep='/t' so try to read_csv using the tab character (\\t) using separator /t. so, try to open using following code line.", "Your CSV file might have variable number of columns and read_csv inferred the number of columns from the first few rows. Two ways to solve it in this case:"]}, {"question": "I've seen a lot of posts about stack trace and exceptions in Python. But haven't found what I need.", "answers": ["See the traceback module, specifically the format_exc() function. Here.", "Let's create a decently complicated stacktrace, in order to demonstrate that we get the full stacktrace:", "With Python 3, the following code will format an Exception object exactly as would be obtained using traceback.format_exc():", "You use sys.exc_info() to collect the information and the functions in the traceback module to format it.\nHere are some examples for formatting it.", "For Python 3.5+:"]}, {"question": "Is there a mechanism to comment out large blocks of Python code?", "answers": ["Python does not have such a mechanism. Prepend a # to each line to block comment. For more information see PEP 8. Most Python IDEs support a mechanism to do the block-commenting-with-hash-signs automatically for you. For example, in IDLE on my machine, it's Alt+3 and Alt+4.", "The only cure I know for this is a good editor. Sorry. ", "Hide the triple quotes in a context that won't be mistaken for a docstring, eg:", "The only way you can do this without triple quotes is to add an:", "In JetBrains PyCharm on Mac use Command + / to comment/uncomment selected block of code. On Windows, use CTRL + /."]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["Here's an aggregate of many of the answers below that I use regularly (no imports required).", "Writing '\\r' will move the cursor back to the beginning of the line.", "tqdm: add a progress meter to your loops in a second:", "Write a \\r to the console. That is a \"carriage return\" which causes all text after it to be echoed at the beginning of the line. Something like:", "It is less than 10 lines of code. "]}, {"question": "I am creating a program that reads a file and if the first line of the file is not blank, it reads the next four lines.  Calculations are performed on those lines and then the next line is read.  If that line is not empty it continues.  However, I am getting this error:", "answers": ["Just for the record:", "The following are totally acceptable in python:", "Pythonic way of iterating over a file and converting to int:", "I found a work around. Python will convert the number to a float. Simply calling float first then converting that to an int will work:\noutput = int(float(input))", "The reason is that you are getting an empty string or a string as an argument into int. Check if it is empty or it contains alpha characters. If it contains characters, then simply ignore that part."]}, {"question": "I know the obvious answer is to use virtualenv and virtualenvwrapper, but for various reasons I can't/don't want to do that.", "answers": ["The --target switch is the thing you're looking for:", "Use:", "Instead of the --target or --install-options options, I have found that setting the PYTHONUSERBASE environment variable works well (from discussion on a bug regarding this very thing):", "Installing a Python package often only includes some pure Python files. If the package includes data, scripts and or executables, these are installed in different directories from the pure Python files.", "To pip install a library exactly where I wanted it, I navigated to the location I wanted the directory with the terminal then used"]}, {"question": "How do you convert a Unicode string (containing extra characters like \u00a3 $, etc.) into a Python string?", "answers": ["See unicodedata.normalize", "You can use encode to ASCII if you don't need to translate the non-ASCII characters:", "If the string only contains ascii characters.", "If you have a Unicode string, and you want to write this to a file, or other serialised form, you must first encode it into a particular representation that can be stored.  There are several common Unicode encodings, such as UTF-16 (uses two bytes for most Unicode characters) or UTF-8 (1-4 bytes / codepoint depending on the character), etc. To convert that string into a particular encoding, you can use:", "Here is an example:"]}, {"question": "What is the proper indentation for Python multiline strings within a function?", "answers": ["You probably want to line up with the \"\"\"", "The textwrap.dedent function allows one to start with correct indentation in the source, and then strip it from the text before use.", "Use inspect.cleandoc like so:", "One option which seems to missing from the other answers (only mentioned deep down in a comment by naxa) is the following:", "Some more options.  In Ipython with pylab enabled, dedent is already in the namespace.  I checked and it is from matplotlib.  Or it can be imported with:"]}, {"question": "When the user accesses this URL running on my flask app, I want the web service to be able to handle the parameters specified after the question mark:", "answers": ["Use request.args to get parsed contents of query string:", "The URL parameters are available in request.args, which is an ImmutableMultiDict that has a get method, with optional parameters for default value (default) and type (type) - which is a callable that converts the input value to the desired format. (See the documentation of the method for more details.)", "You can also use brackets <> on the URL of the view definition and this input will go into your view function arguments", "If you have a single argument passed in the URL you can do it as follows", "url: "]}, {"question": "I've tried to find a comprehensive guide on whether it is best to use import module or from module import. I've just started with Python and I'm trying to start off with best practices in mind.", "answers": ["The difference between import module and from module import foo is mainly subjective.  Pick the one you like best and be consistent in your use of it.  Here are some points to help you decide.", "There's another detail here, not mentioned, related to writing to a module. Granted this may not be very common, but I've needed it from time to time.", "Even though many people already explained about import vs import from, I want to try to explain a bit more about what happens under the hood, and where all the places it changes are.", "Both ways are supported for a reason: there are times when one is more appropriate than the other.", "I personally always use "]}, {"question": "I'm getting a datetime string in a format like \"2009-05-28T16:15:00\" (this is ISO 8601, I believe). One hackish option seems to be to parse the string using time.strptime and passing the first six elements of the tuple into the datetime constructor, like:", "answers": ["I prefer using the dateutil library for timezone handling and generally solid date parsing. If you were to get an ISO 8601 string like: 2010-05-08T23:41:54.000Z you'd have a fun time parsing that with strptime, especially if you didn't know up front whether or not the timezone was included. pyiso8601 has a couple of issues (check their tracker) that I ran into during my usage and it hasn't been updated in a few years. dateutil, by contrast, has been active and worked for me:", "Since Python 3.7 and no external libraries, you can use the strptime function from the datetime module:", "Because ISO 8601 allows many variations of optional colons and dashes being present, basically CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm]. If you want to use strptime, you need to strip out those variations first.", "Arrow looks promising for this:", "You should keep an eye on the timezone information, as you might get into trouble when comparing non-tz-aware datetimes with tz-aware ones."]}, {"question": "How do I find the full path of the currently running Python interpreter from within the currently executing Python script?", "answers": ["sys.executable contains full path of the currently running Python interpreter.", "Just noting a different way of questionable usefulness, using os.environ:", "There are a few alternate ways to figure out the currently used python in Linux is:"]}, {"question": "What is the most basic definition of \"iterable\", \"iterator\" and \"iteration\" in Python?", "answers": ["Iteration is a general term for taking each item of something, one after another. Any time you use a loop, explicit or implicit, to go over a group of items, that is iteration.", "Here's the explanation I use in teaching Python classes:", "The above answers are great, but as most of what I've seen, don't stress the distinction enough for people like me.", "An iterable is a object which has a __iter__() method. It can possibly iterated over several times, such as list()s and tuple()s.", "Here's my cheat sheet:"]}, {"question": "Which types of objects fall into the domain of \"subscriptable\"?", "answers": ["It basically means that the object implements the __getitem__() method. In other words, it describes objects that are \"containers\", meaning they contain other objects. This includes strings, lists, tuples, and dictionaries.", "Off the top of my head, the following are the only built-ins that are subscriptable:", "A scriptable object is an object that records the operations done to it and it can store them as a \"script\" which can be replayed.", "The meaning of subscript in computing is:\n\"a symbol (notionally written as a subscript but in practice usually not) used in a program, alone or with others, to specify one of the elements of an array.\"", "I had this same issue. I was doing"]}, {"question": "I'm trying to convert a server side Ajax response script into a Django HttpResponse, but apparently it's not working.", "answers": ["I usually use a dictionary, not a list to return JSON content. ", "New in django 1.7", "I use this, it works fine.", "Since Django 1.7 you have a standard JsonResponse that's exactly what you need:", "For those who use Django 1.7+"]}, {"question": "From time to time in Python, I see the block:", "answers": ["\"I do not know if it is out of ignorance, but I do not like that\n  kind of programming, as it is using exceptions to perform flow control.\"", "A try block allows you to handle an expected error. The except block should only catch exceptions you are prepared to handle. If you handle an unexpected error, your code may do the wrong thing and hide bugs.", "Python doesn't subscribe to the idea that exceptions should only be used for exceptional cases, in fact the idiom is 'ask for forgiveness, not permission'. This means that using exceptions as a routine part of your flow control is perfectly acceptable, and in fact, encouraged.", "See the following example which illustrate everything about try-except-else-finally:", "Is it a good practice to use try-except-else in python?"]}, {"question": "I've been looking at dynamic evaluation of Python code, and come across the eval() and compile() functions, and the exec statement.", "answers": ["Basically, eval is used to evaluate a single dynamically generated Python expression, and exec is used to execute dynamically generated Python code only for its side effects.", "exec is not an expression: a statement in Python 2.x, and a function in Python 3.x. It compiles and immediately evaluates a statement or set of statement contained in a string. Example:", "exec is for statement and does not return anything.\neval is for expression and returns value of expression."]}, {"question": "I wrote a Python program that acts on a large input file to create a few million objects representing triangles.  The algorithm is:", "answers": ["According to Python Official Documentation, you can explicitly invoke the Garbage Collector to release unreferenced memory with gc.collect(). Example:", "Unfortunately (depending on your version and release of Python) some types of objects use \"free lists\" which are a neat local optimization but may cause memory fragmentation, specifically by making more and more memory \"earmarked\" for only objects of a certain type and thereby unavailable to the \"general fund\".", "The del statement might be of use, but IIRC it isn't guaranteed to free the memory. The docs are here ... and a why it isn't released is here.", "Python is garbage-collected, so if you reduce the size of your list, it will reclaim memory.  You can also use the \"del\" statement to get rid of a variable completely:", "(del can be your friend, as it marks objects as being deletable when there no other references to them. Now, often the CPython interpreter keeps this memory for later use, so your operating system might not see the \"freed\" memory.)"]}, {"question": "I am curious as to why df[2] is not supported, while df.ix[2] and df[2:3] both work. ", "answers": ["echoing @HYRY, see the new docs in 0.11", "When the indexing operator is passed a string or integer, it attempts to find a column with that particular name and return it as a Series.", "You can think DataFrame as a dict of Series. df[key] try to select the column index by key and returns a Series object.", "To index-based access to the pandas table, one can also consider numpy.as_array option to convert the table to Numpy array as", "You can take a look at the source code ."]}, {"question": "Is there a way to get all attributes/methods/fields/etc. of an object in Python?", "answers": ["Use the built-in function dir().", "I use __dict__ and dir(<instance>)", "What you probably want is dir().", "You can use dir(your_object) to get the attributes and getattr(your_object, your_object_attr) to get the values"]}, {"question": "I've been testing out Selenium with Chromedriver and I noticed that some pages can detect that you're using Selenium even though there's no automation at all. Even when I'm just browsing manually just using Chrome through Selenium and Xephyr I often get a page saying that suspicious activity was detected. I've checked my user agent, and my browser fingerprint, and they are all exactly identical to the normal Chrome browser.", "answers": ["Basically, the way the Selenium detection works, is that they test for predefined JavaScript variables which appear when running with Selenium. The bot detection scripts usually look anything containing word \"selenium\" / \"webdriver\" in any of the variables (on window object), and also document variables called $cdc_ and $wdc_. Of course, all of this depends on which browser you are on. All the different browsers expose different things.", "You can use vim or perl to replace the cdc_ string in chromedriver. See answer by @Erti-Chris Eelmaa to learn more about that string and how it's a detection point.", "As we've already figured out in the question and the posted answers, there is an anti Web-scraping and a Bot detection service called \"Distil Networks\" in play here. And, according to the company CEO's interview:", "A lot have been analyzed and discussed about a website being detected being driven by Selenium controlled ChromeDriver. Here are my two cents:", "Example of how it's implemented on wellsfargo.com: "]}, {"question": "I want to apply my custom function (it uses an if-else ladder) to these six columns (ERI_Hispanic, ERI_AmerInd_AKNatv, ERI_Asian, ERI_Black_Afr.Amer, ERI_HI_PacIsl, ERI_White) in each row of my dataframe.", "answers": ["OK, two steps to this - first is to write a function that does the translation you want - I've put an example together based on your pseudo-code:", "Since this is the first Google result for 'pandas new column from others', here's a simple example:", "The answers above are perfectly valid, but a vectorized solution exists, in the form of numpy.select.  This allows you to define conditions, then define outputs for those conditions, much more efficiently than using apply:", ".apply() takes in a function as the first parameter; pass in the label_race function as so:", "try this,"]}, {"question": "I'm deploying a Django app to a dev server and am hitting this error when I run pip install -r requirements.txt:", "answers": ["July 2018 Update ", "fixed it for me in Debian. Seems like uninstalling some .deb packages (twisted set in my case) has broken the path python uses to find packages ", "I have seen this error while trying to install rhodecode to a virtualenv on ubuntu 13.10. For me the solution was to run ", "It also happened to me. I think the problem will happen if the requirements.txt contains a \"distribute\" entry while the virtualenv uses setuptools. Pip will try to patch setuptools to make room for distribute, but unfortunately it will fail half way.", "In CentOS 6 installing the package python-setuptools fixed it."]}, {"question": "The function foo below returns a string 'foo'. How can I get the value 'foo' which is returned from the thread's target?", "answers": ["One way I've seen is to pass a mutable object, such as a list or a dictionary, to the thread's constructor, along with a an index or other identifier of some sort. The thread can then store its results in its dedicated slot in that object.  For example:", "FWIW, the multiprocessing module has a nice interface for this using the Pool class.  And if you want to stick with threads rather than processes, you can just use the multiprocessing.pool.ThreadPool class as a drop-in replacement.", "In Python 3.2+, stdlib concurrent.futures module provides a higher level API to threading, including passing return values or exceptions from a worker thread back to the main thread:", "Jake's answer is good, but if you don't want to use a threadpool (you don't know how many threads you'll need, but create them as needed) then a good way to transmit information between threads is the built-in Queue.Queue class, as it offers thread safety.", "Another solution that doesn't require changing your existing code:"]}, {"question": "How can I get a list of the values in a dict in Python?", "answers": ["dict.values returns a view of the dictionary's values, so you have to wrap it in list:", "You can use * operator to unpack dict_values:", "There should be one \u2012 and preferably only one \u2012 obvious way to do it.", "Follow the below example --", "Purely for visual purposes. Does not produce a useful product... Only useful if you want a long dictionary to print in a paragraph type form."]}, {"question": "I've seen a lot of questions that ask about pivot tables.  Even if they don't know that they are asking about pivot tables, they usually are.  It is virtually impossible to write a canonical question and answer that encompasses all aspects of pivoting...", "answers": ["We start by answering the first question:", "To extend @piRSquared's answer another version of Question 10", "To better understand how pivot works you can look at the example from Pandas documentation:"]}, {"question": "I have issue after installing the matplotlib package unable to import matplotlib.pyplot as plt. Any suggestion will be greatly appreciate.  ", "answers": ["Problem Cause"]}, {"question": "Is it possible to declare more than one variable using a with statement in Python?", "answers": ["It is possible in Python 3 since v3.1 and  Python 2.7. The new with syntax supports multiple context managers:", "Note that if you split the variables into lines, prior to Python 3.10 you must use backslashes to wrap the newlines.", "contextlib.nested supports this:", "Since Python 3.3, you can use the class ExitStack from the contextlib module.", "I think you want to do this instead:"]}, {"question": "I have a pandas DataFrame and I want to delete rows from it where the length of the string in a particular column is greater than 2.", "answers": ["To directly answer this question's original title \"How to delete rows from a pandas DataFrame based on a conditional expression\" (which I understand is not necessarily the OP's problem but could help other users coming across this question) one way to do this is to use the drop method:", "When you do len(df['column name']) you are just getting one number, namely the number of rows in the DataFrame (i.e., the length of the column itself).  If you want to apply len to each element in the column, use df['column name'].map(len).  So try", "You can assign the DataFrame to a filtered version of itself:", "I will expand on @User's generic solution to provide a drop free alternative. This is for folks directed here based on the question's title (not OP 's problem)  ", "In pandas you can do str.len with your boundary and using the Boolean result to filter it . "]}, {"question": "While reading up the documentation for dict.copy(), it says that it makes a shallow copy of the dictionary. Same goes for the book I am following (Beazley's Python Reference), which says: ", "answers": ["By \"shallow copying\" it means the content of the dictionary is not copied by value, but just creating a new reference.", "Take this example:", "It's not a matter of deep copy or shallow copy, none of what you're doing is deep copy.", "Adding to kennytm's answer. When you do a shallow copy parent.copy() a new dictionary is created with same keys,but the values are not copied they are referenced.If you add a new value to parent_copy it won't effect parent because parent_copy is a new dictionary not reference.", "\"new\" and \"original\" are different dicts, that's why you can update just one of them.. The items are shallow-copied, not the dict itself."]}, {"question": "In Python, when should you use lists and when tuples?", "answers": ["Tuples are fixed size in nature whereas lists are dynamic.\nIn other words, a tuple is immutable whereas a list is mutable.", "There's a strong culture of tuples being for heterogeneous collections, similar to what you'd use structs for in C, and lists being for homogeneous collections, similar to what you'd use arrays for.  But I've never quite squared this with the mutability issue mentioned in the other answers.  Mutability has teeth to it (you actually can't change a tuple), while homogeneity is not enforced, and so seems to be a much less interesting distinction.", "I believe (and I am hardly well-versed in Python) that the main difference is that a tuple is immutable (it can't be changed in place after assignment) and a list is mutable (you can append, change, subtract, etc).", "Must it be mutable?  Use a list.\nMust it not be mutable?  Use a tuple.", "The first thing you need to decide is whether the data structure needs to be mutable or not. As has been mentioned, lists are mutable, tuples are not. This also means that tuples can be used for dictionary keys, wheres lists cannot."]}, {"question": "I need a way to tell what mode the shell is in from within the shell.", "answers": ["One way is to look at sys.maxsize as documented here:", "When starting the Python interpreter in the terminal/command line you may also see a line like: ", "Basically a variant on Matthew Marshall's answer (with struct from the std.library):", "Try using ctypes to get the size of a void pointer:", "Open python console:"]}, {"question": "I have a list of strings like this:", "answers": ["Shortest Code", "Zip the two lists together, sort it, then take the parts you want:", "Also, if you don't mind using numpy arrays (or in fact already are dealing with numpy arrays...), here is another nice solution:", "The most obvious solution to me is to use the key keyword arg.", "more_itertools has a tool for sorting iterables in parallel:"]}, {"question": "I am trying to understand when to use __getattr__ or __getattribute__.  The documentation mentions __getattribute__ applies to new-style classes. What are new-style classes?  ", "answers": ["A key difference between __getattr__ and __getattribute__ is that __getattr__ is only invoked if the attribute wasn't found the usual ways.  It's good for implementing a fallback for missing attributes, and is probably the one of two you want.", "Lets see some simple examples of both __getattr__ and __getattribute__ magic methods.", "This is just an example based on Ned Batchelder's explanation. ", "New-style classes inherit from object, or from another new style class:", "New-style classes are ones that subclass \"object\" (directly or indirectly).  They have a __new__ class method in addition to __init__ and have somewhat more rational low-level behavior."]}, {"question": "I want to change the key of an entry in a Python dictionary.", "answers": ["Easily done in 2 steps:", "if you want to change all the keys:", "pop'n'fresh", "In python 2.7 and higher, you can use dictionary comprehension:\nThis is an example I encountered while reading a CSV using a DictReader. The user had suffixed all the column names with ':'", "Since keys are what dictionaries use to lookup values, you can't really change them. The closest thing you can do is to save the value associated with the old key, delete it, then add a new entry with the replacement key and the saved value. Several of the other answers illustrate different ways this can be accomplished."]}, {"question": "I would like to know how to check whether a string starts with \"hello\" in Python.", "answers": ["More info about startswith.", "RanRag has already answered it for your specific question.", "In case you want to match multiple words to your magic word, you can pass the words to match as a tuple:", "Can also be done this way..", "I did a little experiment to see which of these methods"]}, {"question": "Whenever I am trying to install any package using pip, I am getting this import error:", "answers": ["You must have inadvertently upgraded your system pip (probably through something like sudo pip install pip --upgrade)", "We can clear the error by modifying the pip file.", "Thanks to Anthony's explanation above, you can retain your original system pip (in /usr/bin/ and dist-packages/) and remove the manually-installed pip (in ~/.local/) to resolve the conflict:", "resolved in one step only.", "Use python -m pip install instead of pip install"]}, {"question": "What exactly are the Python scoping rules?", "answers": ["Actually, a concise rule for Python Scope resolution, from Learning Python, 3rd. Ed.. (These rules are specific to variable names, not attributes. If you reference it without a period, these rules apply.)", "Essentially, the only thing in Python that introduces a new scope is a function definition.  Classes are a bit of a special case in that anything defined directly in the body is placed in the class's namespace, but they are not directly accessible from within the methods (or nested classes) they contain.", "There was no thorough answer concerning Python3 time, so I made an answer here. Most of what is described here is detailed in the 4.2.2 Resolution of names of the Python 3 documentation.", "A slightly more complete example of scope:", "The scoping rules for Python 2.x have been outlined already in other answers. The only thing I would add is that in Python 3.0, there is also the concept of a non-local scope (indicated by the 'nonlocal' keyword). This allows you to access outer scopes directly, and opens up the ability to do some neat tricks, including lexical closures (without ugly hacks involving mutable objects)."]}, {"question": "I have a try...except block in my code and When an exception is throw. I really just want to continue with the code because in that case, everything is still able to run just fine. The problem is if you leave the except: block empty or with a #do nothing, it gives you a syntax error. I can't use continue because its not in a loop. Is there a keyword i can use that tells the code to just keep going?", "answers": ["Python docs for the pass statement", "The standard \"nop\" in Python is the pass statement:", "There's a new way to do this coming in Python 3.4:", "Try this:"]}, {"question": "I have a list of tuples that looks something like this:", "answers": ["Try using the key keyword with sorted().", "IMO using itemgetter is more readable in this case than the solution by @cheeken. It is\nalso faster since almost all of the computation will be done on the c side (no pun intended) rather than through the use of lambda.  ", "Adding to Cheeken's answer,\nThis is how you sort a list of tuples by the 2nd item in descending order.", "As a python neophyte, I just wanted to mention that if the data did actually look like this: ", "For an in-place sort, use"]}, {"question": "How would I create a list with values between two values I put in? \nFor example, the following list is generated for values from 11 to 16:", "answers": ["Use range. In Python 2.x it returns a list so all you need is:", "You seem to be looking for range():", "Try:", "assuming you want to have a range between x to y", "If you are looking for range like function which works for float type, then here is a very good article."]}, {"question": "I have a dictionary which looks like this: di = {1: \"A\", 2: \"B\"}", "answers": ["You can use .replace.  For example:", "If your dictionary has more than a couple of keys, using map can be much faster than replace.  There are two versions of this approach, depending on whether your dictionary exhaustively maps all possible values (and also whether you want non-matches to keep their values or be converted to NaNs):", "There is a bit of ambiguity in your question. There are at least three two interpretations:", "DSM has the accepted answer, but the coding doesn't seem to work for everyone.  Here is one that works with the current version of pandas (0.23.4 as of 8/2018):", "Given map is faster than replace (@JohnE's solution) you need to be careful with Non-Exhaustive mappings where you intend to map specific values to NaN. The proper method in this case requires that you mask the Series when you .fillna, else you undo the mapping to NaN."]}, {"question": "I'm using Python's logging module to log some debug strings to a file which works pretty well. Now in addition, I'd like to use this module to also print the strings out to stdout. How do I do this? In order to log my strings to a file I use following code:", "answers": ["Just get a handle to the root logger and add the StreamHandler. The StreamHandler writes to stderr. Not sure if you really need stdout over stderr, but this is what I use when I setup the Python logger and I also add the FileHandler as well. Then all my logs go to both places (which is what it sounds like you want).", "logging.basicConfig() can take a keyword argument handlers since Python 3.3, which simplifies logging setup a lot, especially when setting up multiple handlers with the same formatter:", "Adding a StreamHandler without arguments goes to stderr instead of stdout. If some other process has a dependency on the stdout dump (i.e. when writing an NRPE plugin), then make sure to specify stdout explicitly or you might run into some unexpected troubles.", "Here is a complete, nicely wrapped solution based on Waterboy's answer and various other sources. It supports logging to both console and log file, allows for different log level settings, provides colorized output and is easily configurable (also available as Gist):", "Either run basicConfig with stream=sys.stdout as the argument prior to setting up any other handlers or logging any messages, or manually add a StreamHandler that pushes messages to stdout to the root logger (or any other logger you want, for that matter)."]}, {"question": "Is there a way to expand a Python tuple into a function - as actual parameters?", "answers": ["myfun(*some_tuple) does exactly what you request. The * operator simply unpacks the tuple (or any iterable) and passes them as the positional arguments to the function. Read more about unpacking arguments.", "Note that you can also expand part of argument list:", "Take a look at the Python tutorial section 4.7.3 and 4.7.4.\nIt talks about passing tuples as arguments.", "This is the functional programming method. It lifts the tuple expansion feature out of syntax sugar:", "Similar to @Dominykas's answer, this is a decorator that converts multiargument-accepting functions into tuple-accepting functions:"]}, {"question": "How to fix it?", "answers": ["Without seeing the source it's difficult to know the root cause, so I'll have to speak generally.", "Finally I got it:", "This is the classic \"unicode issue\".   I believe that explaining this is beyond the scope of a StackOverflow answer to completely explain what is happening.  ", "In some cases, when you check your default encoding (print sys.getdefaultencoding()), it returns that you are using ASCII. If you change to UTF-8, it doesn't work, depending on the content of your variable.\nI found another way:    ", "I was searching to solve the following error message:"]}, {"question": "I have a parameter file of the form:", "answers": ["str.replace() v2|v3 does not recognize regular expressions. ", "You are looking for the re.sub function.", "As a summary ", "re.sub is definitely what you are looking for.  And so you know, you don't need the anchors and the wildcards."]}, {"question": "This \"underscoring\" seems to occur a lot, and I was wondering if this was a requirement in the Python language, or merely a matter of convention?", "answers": ["From the Python PEP 8 -- Style Guide for Python Code:", "The other respondents are correct in describing the double leading and trailing underscores as a naming convention for \"special\" or \"magic\" methods.", "Names surrounded by double underscores are \"special\" to Python. They're listed in the Python Language Reference, section 3, \"Data model\".", "Actually I use _ method names when I need to differ between parent and child class names. I've read some codes that used this way of creating parent-child classes. As an example I can provide this code: ", "Added an example to understand the use of __ in python. Here is the list of All __"]}, {"question": "I need to print some stuff only when a boolean variable is set to True. So, after looking at this, I tried with a simple example:", "answers": ["Python does not have a trailing if statement.", "Inline if-else EXPRESSION must always contain else clause, e.g:", "The 'else' statement is mandatory. You can do stuff like this :", "If you don't want to from __future__ import print_function you can do the following:", "Since 2.5 you can use equivalent of C\u2019s \u201d?:\u201d ternary conditional operator and the syntax is:"]}, {"question": "I want to plot a graph with one logarithmic axis using matplotlib. ", "answers": ["You can use the Axes.set_yscale method. That allows you to change the scale after the Axes object is created. That would also allow you to build a control to let the user pick the scale if you needed to.", "First of all, it's not very tidy to mix pylab and pyplot code. What's more, pyplot style is preferred over using pylab.", "You simply need to use semilogy instead of plot:", "if you want to change the base of logarithm, just add:", "I know this is slightly off-topic, since some comments mentioned the ax.set_yscale('log') to be \"nicest\" solution I thought a rebuttal could be due. I would not recommend using ax.set_yscale('log') for histograms and bar plots. In my version (0.99.1.1) i run into some rendering problems - not sure how general this issue is. However both bar and hist has optional arguments to set the y-scale to log, which work fine."]}, {"question": "When writing custom classes it is often important to allow equivalence by means of the == and != operators. In Python, this is made possible by implementing the __eq__ and __ne__ special methods, respectively. The easiest way I've found to do this is the following method:", "answers": ["Consider this simple problem:", "You need to be careful with inheritance:", "The way you describe is the way I've always done it. Since it's totally generic, you can always break that functionality out into a mixin class and inherit it in classes where you want that functionality.", "Not a direct answer but seemed relevant enough to be tacked on as it saves a bit of verbose tedium on occasion. Cut straight from the docs...", "You don't have to override both __eq__ and __ne__ you can override only __cmp__ but this will make an implication on the result of ==, !==, < , > and so on."]}, {"question": "Let's say I have two lists, l1 and l2.  I want to perform l1 - l2, which returns all elements of l1 not in l2.", "answers": ["Python has a language feature called List Comprehensions that is perfectly suited to making this sort of thing extremely easy. The following statement does exactly what you want and stores the result in l3:", "One way is to use sets:", "Comparing the performance of all the answers mentioned here on Python 3.9.1 and Python 2.7.16.", "Expanding on Donut's answer and the other answers here, you can get even better results by using a generator comprehension instead of a list comprehension, and by using a set data structure (since the in operator is O(n) on a list but O(1) on a set).", "Use the Python set type.   That would be the most Pythonic.  :)"]}, {"question": "I have a set like this:", "answers": ["e.g, keep.update(xrange(11)) for your specific example.  Or, if you have to produce the values in a loop for some other reason,", "Define set", "You can also use the | operator to concatenate two sets (union in set theory):", "Use update like this:", "This question is the first one that shows up on Google when one looks up \"Python how to add elements to set\", so it's worth noting explicitly that, if you want to add a whole string to a set, it should be added with .add(), not .update()."]}, {"question": "Is it possible to read binary MATLAB .mat files in Python?", "answers": ["An import is required, import scipy.io...", "Neither scipy.io.savemat, nor scipy.io.loadmat work for MATLAB arrays version 7.3. But the good part is that MATLAB version 7.3 files are hdf5 datasets. So they can be read using a number of tools, including NumPy.", "First save the .mat file as:", "There is a nice package called mat4py which can easily be installed using", "Reading the file"]}, {"question": "Why are there no ++ and -- operators in Python?", "answers": ["It's not because it doesn't make sense; it makes perfect sense to define \"x++\" as \"x += 1, evaluating to the previous binding of x\".", "This original answer I wrote is a myth from the folklore of computing: debunked by Dennis Ritchie as \"historically impossible\" as noted in the letters to the editors of Communications of the ACM July 2012 doi:10.1145/2209249.2209251", "I always assumed it had to do with this line of the zen of python:", "Of course, we could say \"Guido just decided that way\", but I think the question is really about the reasons for that decision. I think there are several reasons:", "Because, in Python, integers are immutable (int's += actually returns a different object)."]}]