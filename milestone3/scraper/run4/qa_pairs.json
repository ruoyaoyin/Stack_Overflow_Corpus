[{"question": "I'm using Python's logging module to log some debug strings to a file which works pretty well. Now in addition, I'd like to use this module to also print the strings out to stdout. How do I do this? In order to log my strings to a file I use following code:", "answers": ["Just get a handle to the root logger and add the StreamHandler. The StreamHandler writes to stderr. Not sure if you really need stdout over stderr, but this is what I use when I setup the Python logger and I also add the FileHandler as well. Then all my logs go to both places (which is what it sounds like you want).", "logging.basicConfig() can take a keyword argument handlers since Python 3.3, which simplifies logging setup a lot, especially when setting up multiple handlers with the same formatter:", "Adding a StreamHandler without arguments goes to stderr instead of stdout. If some other process has a dependency on the stdout dump (i.e. when writing an NRPE plugin), then make sure to specify stdout explicitly or you might run into some unexpected troubles.", "Here is a complete, nicely wrapped solution based on Waterboy's answer and various other sources. It supports logging to both console and log file, allows for different log level settings, provides colorized output and is easily configurable (also available as Gist):", "Either run basicConfig with stream=sys.stdout as the argument prior to setting up any other handlers or logging any messages, or manually add a StreamHandler that pushes messages to stdout to the root logger (or any other logger you want, for that matter)."]}, {"question": "Is there a way to expand a Python tuple into a function - as actual parameters?", "answers": ["myfun(*some_tuple) does exactly what you request. The * operator simply unpacks the tuple (or any iterable) and passes them as the positional arguments to the function. Read more about unpacking arguments.", "Note that you can also expand part of argument list:", "Take a look at the Python tutorial section 4.7.3 and 4.7.4.\nIt talks about passing tuples as arguments.", "This is the functional programming method. It lifts the tuple expansion feature out of syntax sugar:", "Similar to @Dominykas's answer, this is a decorator that converts multiargument-accepting functions into tuple-accepting functions:"]}, {"question": "How to fix it?", "answers": ["Without seeing the source it's difficult to know the root cause, so I'll have to speak generally.", "Finally I got it:", "This is the classic \"unicode issue\".   I believe that explaining this is beyond the scope of a StackOverflow answer to completely explain what is happening.  ", "In some cases, when you check your default encoding (print sys.getdefaultencoding()), it returns that you are using ASCII. If you change to UTF-8, it doesn't work, depending on the content of your variable.\nI found another way:    ", "I was searching to solve the following error message:"]}, {"question": "I have a parameter file of the form:", "answers": ["str.replace() v2|v3 does not recognize regular expressions. ", "You are looking for the re.sub function.", "As a summary ", "re.sub is definitely what you are looking for.  And so you know, you don't need the anchors and the wildcards."]}, {"question": "This \"underscoring\" seems to occur a lot, and I was wondering if this was a requirement in the Python language, or merely a matter of convention?", "answers": ["From the Python PEP 8 -- Style Guide for Python Code:", "The other respondents are correct in describing the double leading and trailing underscores as a naming convention for \"special\" or \"magic\" methods.", "Names surrounded by double underscores are \"special\" to Python. They're listed in the Python Language Reference, section 3, \"Data model\".", "Actually I use _ method names when I need to differ between parent and child class names. I've read some codes that used this way of creating parent-child classes. As an example I can provide this code: ", "Added an example to understand the use of __ in python. Here is the list of All __"]}, {"question": "I need to print some stuff only when a boolean variable is set to True. So, after looking at this, I tried with a simple example:", "answers": ["Python does not have a trailing if statement.", "Inline if-else EXPRESSION must always contain else clause, e.g:", "The 'else' statement is mandatory. You can do stuff like this :", "If you don't want to from __future__ import print_function you can do the following:", "Since 2.5 you can use equivalent of C\u2019s \u201d?:\u201d ternary conditional operator and the syntax is:"]}, {"question": "I want to plot a graph with one logarithmic axis using matplotlib. ", "answers": ["You can use the Axes.set_yscale method. That allows you to change the scale after the Axes object is created. That would also allow you to build a control to let the user pick the scale if you needed to.", "First of all, it's not very tidy to mix pylab and pyplot code. What's more, pyplot style is preferred over using pylab.", "You simply need to use semilogy instead of plot:", "if you want to change the base of logarithm, just add:", "I know this is slightly off-topic, since some comments mentioned the ax.set_yscale('log') to be \"nicest\" solution I thought a rebuttal could be due. I would not recommend using ax.set_yscale('log') for histograms and bar plots. In my version (0.99.1.1) i run into some rendering problems - not sure how general this issue is. However both bar and hist has optional arguments to set the y-scale to log, which work fine."]}, {"question": "When writing custom classes it is often important to allow equivalence by means of the == and != operators. In Python, this is made possible by implementing the __eq__ and __ne__ special methods, respectively. The easiest way I've found to do this is the following method:", "answers": ["Consider this simple problem:", "You need to be careful with inheritance:", "The way you describe is the way I've always done it. Since it's totally generic, you can always break that functionality out into a mixin class and inherit it in classes where you want that functionality.", "Not a direct answer but seemed relevant enough to be tacked on as it saves a bit of verbose tedium on occasion. Cut straight from the docs...", "You don't have to override both __eq__ and __ne__ you can override only __cmp__ but this will make an implication on the result of ==, !==, < , > and so on."]}, {"question": "Let's say I have two lists, l1 and l2.  I want to perform l1 - l2, which returns all elements of l1 not in l2.", "answers": ["Python has a language feature called List Comprehensions that is perfectly suited to making this sort of thing extremely easy. The following statement does exactly what you want and stores the result in l3:", "One way is to use sets:", "Comparing the performance of all the answers mentioned here on Python 3.9.1 and Python 2.7.16.", "Expanding on Donut's answer and the other answers here, you can get even better results by using a generator comprehension instead of a list comprehension, and by using a set data structure (since the in operator is O(n) on a list but O(1) on a set).", "Use the Python set type.   That would be the most Pythonic.  :)"]}, {"question": "I have a set like this:", "answers": ["e.g, keep.update(xrange(11)) for your specific example.  Or, if you have to produce the values in a loop for some other reason,", "Define set", "You can also use the | operator to concatenate two sets (union in set theory):", "Use update like this:", "This question is the first one that shows up on Google when one looks up \"Python how to add elements to set\", so it's worth noting explicitly that, if you want to add a whole string to a set, it should be added with .add(), not .update()."]}, {"question": "Is it possible to read binary MATLAB .mat files in Python?", "answers": ["An import is required, import scipy.io...", "Neither scipy.io.savemat, nor scipy.io.loadmat work for MATLAB arrays version 7.3. But the good part is that MATLAB version 7.3 files are hdf5 datasets. So they can be read using a number of tools, including NumPy.", "First save the .mat file as:", "There is a nice package called mat4py which can easily be installed using", "Reading the file"]}, {"question": "Why are there no ++ and -- operators in Python?", "answers": ["It's not because it doesn't make sense; it makes perfect sense to define \"x++\" as \"x += 1, evaluating to the previous binding of x\".", "This original answer I wrote is a myth from the folklore of computing: debunked by Dennis Ritchie as \"historically impossible\" as noted in the letters to the editors of Communications of the ACM July 2012 doi:10.1145/2209249.2209251", "I always assumed it had to do with this line of the zen of python:", "Of course, we could say \"Guido just decided that way\", but I think the question is really about the reasons for that decision. I think there are several reasons:", "Because, in Python, integers are immutable (int's += actually returns a different object)."]}, {"question": "How to make pytest print traceback, so I would see where in the whatever function an exception was raised?", "answers": ["pytest.raises(Exception) is what you need.", "Do you mean something like this:", "There are two ways to handle these kind of cases in pytest:", "pytest constantly evolves and with one of the nice changes in the recent past it is now possible to simultaneously test for", "you can try"]}, {"question": "Consider three functions:", "answers": ["On the actual behavior, there is no difference. They all return None and that's it. However, there is a time and  place for all of these.\nThe following instructions are basically how the different methods should be used (or at least how I was taught they should be used), but they are not absolute rules so you can mix them up if you feel necessary to.", "Yes, they are all the same. ", "They each return the same singleton None -- There is no functional difference. ", "As other have answered, the result is exactly the same, None is returned in all cases.", "In terms of functionality these are all the same, the difference between them is in code readability and style (which is important to consider)"]}, {"question": "It seems there are already quite some questions here about relative import in python 3, but after going through many of them I still didn't find the answer for my issue. \nso here is the question. ", "answers": ["EDIT: There are better/more coherent answers to this question in other questions: ", "Try this.\nWorked for me.", "Assumption:\nIf you are in the package directory, A and test_A are separate packages. ", "None of these solutions worked for me in 3.6, with a folder structure like:", "This is very tricky in Python."]}, {"question": "How do I tell the time difference in minutes between two datetime objects?", "answers": ["Subtracting the later time from the first time difference = later_time - first_time creates a datetime object that only holds the difference.\nIn the example above it is 0 minutes, 8 seconds and 562000 microseconds.", "Using datetime example", "New at Python 2.7 is the timedelta instance method .total_seconds(). From the Python docs, this is equivalent to (td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6.", "Just subtract one from the other. You get a timedelta object with the difference.", "If a, b are datetime objects then to find the time difference between them in Python 3:"]}, {"question": "If I do this:", "answers": ["Operator precedence 2.x, 3.x. The precedence of not is lower than that of in. So it is equivalent to:", "not x in y is evaluated as x not in y", "Operator precedence. in binds more tightly than not, so your expression is equivalent to not((True) in [False, True]).", "It's all about operator precedence (in is stronger than not). But it can be easily corrected by adding parentheses at the right place:", "It is evaluating as not True in [False, True], which returns False because True is in [False, True] "]}, {"question": "I use python to create my project settings setup, but I need help getting the command line arguments.", "answers": ["Python tutorial explains it:", "(not including the name of the Python file)", "I highly recommend argparse which comes with Python 2.7 and later.", "Python code:", "You can use sys.argv to get the arguments as a list."]}, {"question": "How to check whether a pandas DataFrame is empty? In my case I want to print some message in terminal if the DataFrame is empty. ", "answers": ["You can use the attribute df.empty to check whether it's empty or not:", "I use the len function. It's much faster than empty. len(df.index) is even faster.", "To see if a dataframe is empty, I argue that one should test for the length of a dataframe's columns index:", "I prefer going the long route. These are the checks I follow to avoid using a try-except clause - ", "and the function:"]}, {"question": "I saw this in someone's code:", "answers": ["In Python 3, they made the / operator do a floating-point division, and added the // operator to do integer division (i.e., quotient without remainder); whereas in Python 2, the / operator was simply integer division, unless one of the operands was already a floating point number.", "// is unconditionally \"flooring division\", e.g:", "To complement these other answers, the // operator also offers significant (3x) performance benefits over /, presuming you want integer division.", "To complement Alex's response, I would add that starting from Python 2.2.0a2, from __future__ import division is a convenient alternative to using lots of float(\u2026)/\u2026.  All divisions  perform float divisions, except those with //.  This works with all versions from 2.2.0a2 on.", "// can be considered an alias to math.floor() for divisions with return value of type float. It operates as no-op for divisions with return value of type int."]}, {"question": "PEP 8 states:", "answers": ["Module importing is quite fast, but not instant. This means that:", "Putting the import statement inside of a function can prevent circular dependencies.\nFor example, if you have 2 modules, X.py and Y.py, and they both need to import each other, this will cause a circular dependency when you import one of the modules causing an infinite loop. If you move the import statement in one of the modules then it won't try to import the other module till the function is called, and that module will already be imported, so no infinite loop. Read here for more - effbot.org/zone/import-confusion.htm", "I have adopted the practice of putting all imports in the functions that use them, rather than at the top of the module.", "Most of the time this would be useful for clarity and sensible to do but it's not always the case.  Below are a couple of examples of circumstances where module imports might live elsewhere.", "The first variant is indeed more efficient than the second when the function is called either zero or one times.  With the second and subsequent invocations, however, the \"import every call\" approach is actually less efficient.  See this link for a lazy-loading technique that combines the best of both approaches by doing a \"lazy import\"."]}, {"question": "How do I accomplish variable variables in Python?", "answers": ["You can use dictionaries to accomplish this. Dictionaries are stores of keys and values. ", "Use the built-in getattr function to get an attribute on an object by name.  Modify the name as needed.", "It's not a good idea. If you are accessing a global variable you can use globals().", "New coders sometimes write code like this:", "Whenever you want to use variable variables, it's probably better to use a dictionary. So instead of writing"]}, {"question": "I came across the Python with statement for the first time today.  I've been using Python lightly for several months and didn't even know of its existence!  Given its somewhat obscure status, I thought it would be worth asking:", "answers": ["I believe this has already been answered by other users before me, so I only add it for the sake of completeness: the with statement simplifies exception handling by encapsulating common preparation and cleanup tasks in so-called context managers. More details can be found in PEP 343. For instance, the open statement is a context manager in itself, which lets you open a file, keep it open as long as the execution is in the context of the with statement where you used it, and close it as soon as you leave the context, no matter whether you have left it because of an exception or during regular control flow. The with statement can thus be used in ways similar to the RAII pattern in C++: some resource is acquired by the with statement and released when you leave the with context.", "I would suggest two interesting lectures:", "The Python with statement is built-in language support of the Resource Acquisition Is Initialization idiom commonly used in C++. It is intended to allow safe acquisition and release of operating system resources.", "An example of an antipattern might be to use the with inside a loop when it would be more efficient to have the with outside the loop", "Again for completeness I'll add my most useful use-case for with statements."]}, {"question": "I have the following string: \"aaaabbbb\"", "answers": ["Like this:", "See : http://codepad.org/S3zjnKoD"]}, {"question": "What will happen if two modules import each other?", "answers": ["If you do import foo (inside bar.py) and import bar (inside foo.py), it will work fine. By the time anything actually runs, both modules will be fully loaded and will have references to each other.", "There was a really good discussion on this over at comp.lang.python last year. It answers your question pretty thoroughly.", "Cyclic imports terminate, but you need to be careful not to use the cyclically-imported modules during module initialization.", "As other answers describe this pattern is acceptable in python:", "Module a.py :"]}, {"question": "In Python, there are two similarly-named functions, exit() and sys.exit(). What's the difference and when should I use one over the other?", "answers": ["exit is a helper for the interactive shell - sys.exit is intended for use in programs.", "If I use exit() in a code and run it in the shell, it shows a message asking whether I want to kill the program or not. It's really disturbing.\nSee here", "Usually, the code runs through the lines until the end and the program exists automatically.\nOccasionally, we would like to ask the program to close before the full cycle run.\nAn example case is when you implement authentication and a user fails to authenticate, in some cases you would like to exit the program."]}, {"question": "When should you use generator expressions and when should you use list comprehensions in Python?", "answers": ["John's answer is good (that list comprehensions are better when you want to iterate over something multiple times).  However, it's also worth noting that you should use a list if you want to use any of the list methods.  For example, the following code won't work:", "Iterating over the generator expression or the list comprehension will do the same thing. However, the list comprehension will create the entire list in memory first while the generator expression will create the items on the fly, so you are able to use it for very large (and also infinite!) sequences.", "Use list comprehensions when the result needs to be iterated over multiple times, or where speed is paramount. Use generator expressions where the range is large or infinite.", "The important point is that the list comprehension creates a new list. The generator creates a an iterable object that will \"filter\" the source material on-the-fly as you consume the bits.", "The benefit of a generator expression is that it uses less memory since it doesn't build the whole list at once.  Generator expressions are best used when the list is an intermediary, such as summing the results, or creating a dict out of the results."]}, {"question": "I saw this in someone's code. What does it mean?", "answers": ["Using these magic methods (__enter__, __exit__) allows you to implement objects which can be used easily with the with statement. ", "If you know what context managers are then you need nothing more to understand __enter__ and __exit__ magic methods. Lets see a very simple example.", "I found it strangely difficult to locate the python docs for __enter__ and __exit__ methods by Googling, so to help others here is the link:", "In addition to the above answers to exemplify invocation order, a simple run example\n", "This is called context manager and I just want to add that similar approaches exist for other programming languages. Comparing them could be helpful in understanding the context manager in python.\nBasically, a context manager is used when we are dealing with some resources (file, network, database) that need to be initialized and at some point, tear downed (disposed). In Java 7 and above we have automatic resource management that takes the form of:"]}, {"question": "I'm running into a weird error when trying to install Django on my computer.", "answers": ["You need to add the path of your pip installation to your PATH system variable. By default, pip is installed to C:\\Python34\\Scripts\\pip (pip now comes bundled with new versions of python), so the path \"C:\\Python34\\Scripts\" needs to be added to your PATH variable.", "For Windows, when you install a package, you type:", "As of now, version 3.7.3 I had a little bit of an issue with getting the right system variable.", "For me the command:", "Alternate way."]}, {"question": "I'm trying to plot a figure without tickmarks or numbers on either of the axes (I use axes in the traditional sense, not the matplotlib nomenclature!). An issue I have come across is where matplotlib adjusts the x(y)ticklabels by subtracting a value N, then adds N at the end of the axis.", "answers": ["Instead of hiding each element, you can hide the whole axis:", "If you want to hide just the axis text keeping the grid lines:", "If you are like me and don't always retrieve the axes, ax, when plotting the figure, then a simple solution would be to do ", "I've colour coded this figure to ease the process.", "I was not actually able to render an image without borders or axis data based on any of the code snippets here (even the one accepted at the answer). After digging through some API documentation, I landed on this code to render my image"]}, {"question": "I have this code:", "answers": ["With the -c (command) argument (assuming your file is named foo.py):", "Just put hello() somewhere below the function and it will execute when you do python your_file.py", "python -c 'from myfile import hello; hello()' where myfile must be replaced with the basename of your Python script. (E.g., myfile.py becomes myfile).", "add this snippet to the bottom of your script", "I wrote a quick little Python script that is callable from a bash command line. It takes the name of the module, class and method you want to call and the parameters you want to pass. I call it PyRun and left off the .py extension and made it executable with chmod +x PyRun so that I can just call it quickly as follow:"]}, {"question": "I would like to make a deep copy of a dict in python. Unfortunately the .deepcopy() method doesn't exist for the dict. How do I do that?", "answers": ["How about:", "dict.copy() is a shallow copy function for dictionary \n\nid is built-in function that gives you the address of variable", "Python 3.x"]}, {"question": "If I have a function like this:", "answers": ["Your second way is correct. ", "If you're using typing (introduced in Python 3.5) you can use typing.Optional, where Optional[X] is equivalent to Union[X, None]. It is used to signal that the explicit value of None is allowed . From typing.Optional:", "I recently saw this one-liner:"]}, {"question": "Is there a way to check if a column exists in a Pandas DataFrame?", "answers": ["This will work:", "To check if one or more columns all exist, you can use set.issubset, as in:", "Just to suggest another way without using if statements, you can use the get() method for DataFrames. For performing the sum based on the question:", "You can use the set's method issuperset:"]}, {"question": "I want to remove a certain environment created with conda. How can I achieve that? Let's say I have an active testenv environment. I tried, by following documentation, with:", "answers": ["You probably didn't fully deactivate the Conda environment - remember, the command you need to use with Conda is conda deactivate (for older versions, use source deactivate). So it may be wise to start a new shell and activate the environment in that before you try. Then deactivate it.", "After making sure your environment is not active, type:", "Official documentation way worked for me:", "In my windows 10 Enterprise edition os this code works fine:\n(suppose for environment namely testenv)", "if you are in base:"]}, {"question": "What do these python file extensions mean?", "answers": ["Also for some further discussion on .pyc vs .pyo, take a look at: http://www.network-theory.co.uk/docs/pytut/CompiledPythonfiles.html (I've copied the important part below)", "A larger list of additional Python file-extensions (mostly rare and unofficial) can be found at http://dcjtech.info/topic/python-file-extensions/"]}, {"question": "I would like to increase the width of the ipython notebook in my browser. I have a high-resolution screen, and I would like to expand the cell width/size to make use of this extra space.", "answers": ["If you don't want to change your default settings, and you only want to change the width of the current notebook you're working on, you can enter the following into a cell:", "That div.cell solution didn't actually work on my IPython, however luckily someone suggested a working solution for new IPythons:", "To get this to work with jupyter (version 4.0.6) I created ~/.jupyter/custom/custom.css containing:", "It's time to use jupyterlab", "What I do usually after new installation is to modify the main css file where all visual styles are stored. I use Miniconda but location is similar with others C:\\Miniconda3\\Lib\\site-packages\\notebook\\static\\style\\style.min.css"]}, {"question": "How can I check if a Python object is a string (either regular or Unicode)?", "answers": ["Use isinstance(obj, basestring) for an object-to-test obj.", "In Python 3.x basestring is not available anymore, as str is the sole string type (with the semantics of Python 2.x's unicode).", "To check if an object o is a string type of a subclass of a string type:", "If you want to check with no regard for Python version (2.x vs 3.x), use six (PyPI) and its string_types attribute:", "I found this ans more pythonic:"]}, {"question": "I have two existing dictionaries, and I wish to 'append' one of them to the other. By that I mean that the key,values of the other dictionary should be made into the first dictionary. For example:", "answers": ["You can do", "There are two ways to add one dictionary to another.", "dict.update() looks like it will do what you want...", "Assuming that you do not want to change orig, you can either do a copy and update like the other answers, or you can create a new dictionary in one step by passing all items from both  dictionaries into the dict constructor:", "A three-liner to combine or merge two dictionaries:"]}, {"question": "When debugging in PHP, I frequently find it useful to simply stick a var_dump() in my code to show me what a variable is, what its value is, and the same for anything that it contains.", "answers": ["I think the best equivalent to PHP's var_dump($foo, $bar) is combine print with vars:", "To display a value nicely, you can use the pprint module. The easiest way to dump all variables with it is to do", "The closest thing to PHP's var_dump() is pprint() with the getmembers() function in the built-in inspect module:", "PHP's var_export() usually shows a serialized version of the object that can be exec()'d to re-create the object.    The closest thing to that in Python is repr()", "I wrote a very light-weight alternative to PHP's var_dump for using in Python and made it open source later."]}, {"question": "Given a datetime.time value in Python, is there a standard way to add an integer number of seconds to it, so that 11:34:59 + 3 = 11:35:02, for example?", "answers": ["You can use full datetime variables with timedelta, and by providing a dummy date then using time to just get the time value.", "As others here have stated, you can just use full datetime objects throughout:", "One little thing, might add clarity to override the default value for seconds", "Thanks to @Pax Diablo, @bvmou and @Arachnid for the suggestion of using full datetimes throughout.  If I have to accept datetime.time objects from an external source, then this seems to be an alternative add_secs_to_time() function:", "You cannot simply add number to datetime because it's unclear what unit is used: seconds, hours, weeks..."]}, {"question": "I'm a little bit confused with JSON in Python.\nTo me, it seems like a dictionary, and for that reason\nI'm trying to do that:", "answers": ["json.loads()", "When I started using json, I was confused and unable to figure it out for some time, but finally I got what I wanted\nHere is the simple solution    ", "If you trust the data source, you can use eval to convert your string into a dictionary:", "use simplejson or cjson for speedups"]}, {"question": "In all other languages I've worked with the super constructor is invoked implicitly. How does one invoke it in Python? I would expect super(self) but this doesn't work.", "answers": ["In line with the other answers, there are multiple ways to call super class methods (including the constructor), however in Python-3.x the process has been simplified:", "super() returns a parent-like object in new-style classes:", "With Python 2.x old-style classes it would be this:", "One way is to call A's constructor and pass self as an argument, like so:", "Short Answer"]}, {"question": "Are there situations in which sys.stdout.write() is preferable to print? ", "answers": ["print is just a thin wrapper that formats the inputs (modifiable, but by default with a space between args and newline at the end) and calls the write function of a given object. By default this object is sys.stdout, but you can pass a file using the \"chevron\" form. For example:", "print first converts the object to a string (if it is not already a string). It will also put a space before the object if it is not the start of a line and a newline character at the end.", "Here's some sample code based on the book Learning Python by Mark Lutz that addresses your question:", "My question is whether or not there\n  are situations in which\n  sys.stdout.write() is preferable to\n  print", "There's at least one situation in which you want sys.stdout instead of print."]}, {"question": "I'm trying to download and save an image from the web using python's requests module.", "answers": ["You can either use the response.raw file object, or iterate over the response.", "Get a file-like object from the request and copy it to a file. This will also avoid reading the whole thing into memory at once.", "How about this, a quick solution.", "I have the same need for downloading images using requests. I first tried the answer of Martijn Pieters, and it works well. But when I did a profile on this simple function, I found that it uses so many function calls compared to urllib and urllib2.", "This might be easier than using requests. This is the only time I'll ever suggest not using requests to do HTTP stuff."]}, {"question": "I am trying to install a Python package from a private GitHub repository. For a public repository, I can issue the following command which works fine:", "answers": ["You can use the git+ssh URI scheme, but you must set a username. Notice the git@ part in the URI:", "As an additional technique, if you have the private repository cloned locally, you can do:", "You can do it directly with the HTTPS URL like this:", "It also works with Bitbucket:", "I found it much easier to use tokens than SSH keys. I couldn't find much good documentation on this, so I came across this solution mainly through trial and error. Further, installing from pip and setuptools have some subtle differences; but this way should work for both."]}, {"question": "Why or why not?", "answers": ["For performance, especially when you're iterating over a large range, xrange() is usually better.  However, there are still a few cases why you might prefer range():", "No, they both have their uses:", "You should favour range() over xrange() only when you need an actual list. For instance, when you want to modify the list returned by range(), or when you wish to slice it. For iteration or even just normal indexing, xrange() will work fine (and usually much more efficiently). There is a point where range() is a bit faster than xrange() for very small lists, but depending on your hardware and various other details, the break-even can be at a result of length 1 or 2; not something to worry about. Prefer xrange().", "One other difference is that Python 2 implementation of xrange() can't support numbers bigger than C ints, so if you want to have a range using Python's built in large number support, you have to use range().", "xrange() is more efficient because instead of generating a list of objects, it just generates one object at a time. Instead of 100 integers, and all of their overhead, and the list to put them in, you just have one integer at a time. Faster generation, better memory use, more efficient code."]}, {"question": "In Python remove() will remove the first occurrence of value in a list.", "answers": ["Functional approach:", "You can use a list comprehension:", "You can use slice assignment if the original list must be modified, while still using an efficient list comprehension (or generator expression).", "Repeating the solution of the first post in a more abstract way:", "See the simple solution"]}, {"question": "Here's the Python code to run an arbitrary command returning its stdout data, or raise an exception on non-zero exit codes:", "answers": ["I don't know much about the low level details; but, given that in\npython 2.6 the API offers the ability to wait for threads and\nterminate processes, what about running the process in a separate\nthread?", "In Python 3.3+:", "jcollado's answer can be simplified using the threading.Timer class:", "If you're on Unix,", "Here is Alex Martelli's solution as a module with proper process killing. The other approaches do not work because they do not use proc.communicate(). So if you have a process that produces lots of output, it will fill its output buffer and then block until you read something from it."]}, {"question": "For example, I have a string like this(return value of subprocess.check_output):", "answers": ["Decode it.", "If the answer from falsetru didn't work you could also try:", "Please, see oficial encode() and decode() documentation from codecs library. utf-8 is the default encoding for the functions, but there are severals standard encodings in Python 3, like latin_1 or utf_32."]}, {"question": "\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\r\n                ", "answers": ["I use decorators mainly for timing purposes", "I've used them for synchronization.", "I use decorators for type checking parameters which are passed to my Python methods via some RMI. So instead of repeating the same parameter counting, exception-raising mumbo-jumbo again and again. ", "Decorators are used for anything that you want to transparently \"wrap\" with additional functionality.", "For nosetests, you can write a decorator that supplies a unit test function or method with several sets of parameters:"]}, {"question": "I'm trying to port a shell script to the much more readable python version. The original shell script starts several processes (utilities, monitors, etc.) in the background with \"&\". How can I achieve the same effect in python? I'd like these processes not to die when the python scripts complete. I am sure it's related to the concept of a daemon somehow, but I couldn't find how to do this easily.", "answers": ["While jkp's solution works, the newer way of doing things (and the way the documentation recommends) is to use the subprocess module. For simple commands its equivalent, but it offers more options if you want to do something complicated.", "Note: This answer is less current than it was when posted in 2009. Using the subprocess module shown in other answers is now recommended in the docs", "You probably want the answer to \"How to call an external command in Python\".", "I found this here:", "Use subprocess.Popen() with the close_fds=True parameter, which will allow the spawned subprocess to be detached from the Python process itself and continue running even after Python exits."]}, {"question": "What's the \"Bad magic number\" ImportError in python, and how do I fix it?", "answers": ["The magic number comes from UNIX-type systems where the first few bytes of a file held a marker indicating the file type.", "Deleting all .pyc files will fix \"Bad Magic Number\" error.", "Loading a python3 generated *.pyc file with python2 also causes this error.", "Take the pyc file to a windows machine. Use any Hex editor to open this pyc file. I used freeware 'HexEdit'. Now read hex value of first two bytes. In my case, these were 03 f3.", "\"Bad magic number\" error also happens if you have manually named your file with an extension .pyc "]}, {"question": "I'm thinking about putting the virtualenv for a Django web app I am making inside my git repository for the app. It seems like an easy way to keep deploy's simple and easy. Is there any reason why I shouldn't do this?", "answers": ["I use pip freeze to get the packages I need into a requirements.txt file and add that to my repository.  I tried to think of a way of why you would want to store the entire virtualenv, but I could not.", "Storing the virtualenv directory inside git will, as you noted, allow you to deploy the whole app by just doing a git clone (plus installing and configuring Apache/mod_wsgi).  One potentially significant issue with this approach is that on Linux the full path gets hard-coded in the venv's activate, django-admin.py, easy_install, and pip scripts.  This means your virtualenv won't entirely work if you want to use a different path, perhaps to run multiple virtual hosts on the same server.  I think the website may actually work with the paths wrong in those files, but you would have problems the next time you tried to run pip.", "I used to do the same until I started using libraries that are compiled differently depending on the environment such as PyCrypto. My PyCrypto mac wouldn't work on Cygwin wouldn't work on Ubuntu.", "I think one of the main problems which occur is that the virtualenv might not be usable by other people. Reason is that it always uses absolute paths. So if you virtualenv was for example in /home/lyle/myenv/ it will assume the same for all other people using this repository (it must be exactly the same absolute path). You can't presume people using the same directory structure as you.", "It's not a good idea to include any environment-dependent component or setting in your repos as one of the key aspects of using a repo, is perhaps, sharing it with other developers.  Here is how I would setup my development environment on a Windows PC (say, Win10). "]}, {"question": "Why is cls sometimes used instead of self as an argument in Python classes?", "answers": ["The distinction between \"self\" and \"cls\" is defined in PEP 8 . As Adrien said, this is not mandatory. It's a coding style. PEP 8 says:", "cls implies that method belongs to the class while self implies that the  method is related to instance of the class,therefore member with cls is accessed by class name where as the one with self is accessed by instance of the class...it is the same concept as static member and non-static members in java if you are from java background.", "It's used in case of a class method. Check this reference for further details.", "This is very good question but not as wanting as question.\nThere is difference between 'self' and 'cls' used method though analogically they are at same place ", "Instead of accepting a self parameter, class methods take a cls parameter that points to the class\u2014and not the object instance\u2014when\n  the method is called.\n  Since the class method only has access to this cls argument, it can\u2019t\n  modify object instance state. That would require access to self . However, class methods can still modify class state that applies across all\n  instances of the class."]}, {"question": "I'm using the python requests module to send a RESTful GET to a server, for which I get a response in JSON. The JSON response is basically just a list of lists.", "answers": ["Since you're using requests, you should use the response's json method.", "You can use json.loads:", "You can use the json response as dictionary directly:"]}, {"question": "I need to join a list of items.  Many  of the items in the list are integer values returned  from a function;  i.e.,", "answers": ["Calling str(...) is the Pythonic way to convert something to a string.", "There's nothing wrong with passing integers to str. One reason you might not do this is that myList is really supposed to be a list of integers e.g. it would be reasonable to sum the values in the list. In that case, do not pass your ints to str before appending them to myList. If you end up not converting to strings before appending, you can construct one big string by doing something like", "The map function in python can be used. It takes two arguments. The first argument is the function which has to be used for each element of the list. The second argument is the iterable.", "above method is the easiest and most general way to convert list into string. another short method is-", "There are three ways of doing this."]}, {"question": "I'm building a simple helper script for work that will copy a couple of template files in our code base to the current directory. I don't, however, have the absolute path to the directory where the templates are stored. I do have a relative path from the script but when I call the script it treats that as a path relative to the current working directory. Is there a way to specify that this relative url is from the location of the script instead?", "answers": ["In the file that has the script, you want to do something like this:", "you need os.path.realpath (sample below adds the parent directory to your path)", "As mentioned in the accepted answer ", "It's 2018 now, and Python have already evolve to the __future__ long time ago. So how about using the amazing pathlib coming with Python 3.4 to accomplish the task instead of struggling with os, os.path, glob, shutil, etc.", "Consider my code:"]}, {"question": "I have not seen clear examples with use-cases for Pool.apply, Pool.apply_async and Pool.map. I am mainly using Pool.map; what are the advantages of others?", "answers": ["Back in the old days of Python, to call a function with arbitrary arguments, you would use apply:", "Here is an overview in a table format in order to show the differences between Pool.apply, Pool.apply_async, Pool.map and Pool.map_async. When choosing one, you have to take multi-args, concurrency, blocking, and ordering into account:", "Regarding apply vs map:"]}, {"question": "The above outputs on my Terminal. I am on Mac OS 10.7.x. I have Python 2.7.1, and followed this tutorial to get Beautiful Soup and lxml, which both installed successfully and work with a separate test file located here. In the Python script that causes this error, I have included this line:\n    from pageCrawler import comparePages\nAnd in the pageCrawler file I have included the following two lines:\n    from bs4 import BeautifulSoup\nfrom urllib2 import urlopen", "answers": ["I have a suspicion that this is related to the parser that BS will use to read the HTML.  They document is here, but if you're like me (on OSX) you might be stuck with something that requires a bit of work:", "I'd prefer the built in python html parser, no install no dependencies", "For basic out of the box python with bs4 installed then you can process your xml with", "Run these three commands to make sure that you have all the relevant packages installed:", "Actually 3 of the options mentioned by other work."]}, {"question": "I am using", "answers": ["From the documentation:", "Use requests.packages.urllib3.disable_warnings() and verify=False on requests methods.", "To add to Blender's answer, you can disable SSL certificate validation for all requests using Session.verify = False", "Also can be done from the environment variable:", "If you want to send exactly post request with verify=False option, fastest way is to use this code:"]}, {"question": "I know that I can use something like string[3:4] to get a substring in Python, but what does the 3 mean in somesequence[::3]?", "answers": ["it means 'nothing for the first argument, nothing for the second, and jump by three'. It gets every third item of the sequence sliced.\nExtended slices is what you want. New in Python 2.3", "Python sequence slice addresses can be written as a[start:end:step] and any of start, stop or end can be dropped.  a[::3] is every third element of the sequence.", "seq[::n] is a sequence of each n-th item in the entire sequence.", "s[i:j:k] is, according to the documentation, \"slice of s from i to j with step k\".  When i and j are absent, the whole sequence is assumed and thus s[::k] means \"every k-th item\".", "This visual example will show you how to a neatly select elements in a NumPy Matrix (2 dimensional array) in a pretty entertaining way (I promise). Step 2 below illustrate the usage of that \"double colons\" :: in question."]}, {"question": "Is there any other way to delete an item in a dictionary only if the given key exists, other than:", "answers": ["You can use  dict.pop:", "There is also:", "Let's call keys the list/iterator of keys that you are given to remove. I'd do this:"]}, {"question": "How do I get the index column name in python pandas?  Here's an example dataframe:", "answers": ["You can just get/set the index via its name property", "You can use rename_axis, for removing set to None:", "df.index.name should do the trick.", "Use df.index.rename('foo', inplace=True) to set the index name. ", "If you do not want to create a new row but simply put it in the empty cell then use:"]}, {"question": "What's the cleanest way to test if a dictionary contains a key?", "answers": ["and a quick search reveals some nice information about it: http://docs.python.org/3/tutorial/datastructures.html#dictionaries"]}, {"question": "I have a scatter plot graph with a bunch of random x, y coordinates. Currently the Y-Axis starts at 0 and goes up to the max value. I would like the Y-Axis to start at the max value and go up to 0.", "answers": ["There is a new API that makes this even simpler.", "DisplacedAussie's answer is correct, but usually a shorter method is just to reverse the single axis in question:", "You could also use function exposed by the axes object of the scatter  plot", "Use matplotlib.pyplot.axis()", "If you're in ipython in pylab mode, then"]}, {"question": "I have a small python project that has the following structure - ", "answers": ["Best practice is, in each module, to have a logger defined like this:", "Actually every logger is a child of the parent's package logger (i.e. package.subpackage.module inherits configuration from package.subpackage), so all you need to do is just to configure the root logger. This can be achieved by logging.config.fileConfig (your own config for loggers) or logging.basicConfig (sets the root logger). Setup logging in your entry module (__main__.py or whatever you want to run, for example main_script.py. __init__.py works as well)", "A simple way of using one instance of logging library in multiple modules for me was following solution:", "I always do it as below.", "Throwing in another solution. "]}, {"question": "Does * have a special meaning in Python as it does in C? I saw a function like this in the Python Cookbook:", "answers": ["See Function Definitions in the Language Reference.", "I only have one thing to add that wasn't clear from the other answers (for completeness's sake).", "All of the above answers were perfectly clear and complete, but just for the record I'd like to confirm that the meaning of * and ** in python has absolutely no similarity with the meaning of similar-looking operators in C. ", "A single star means that the variable 'a' will be a tuple of extra parameters that were supplied to the function.  The double star means the variable 'kw' will be a variable-size dictionary of extra parameters that were supplied with keywords.", "I find * useful when writing a function that takes another callback function as a parameter:"]}, {"question": "filter, map, and reduce work perfectly in Python 2. Here is an example:", "answers": ["You can read about the changes in What's New In Python 3.0. You should read it thoroughly when you move from 2.x to 3.x since a lot has been changed.", "The functionality of map and filter was intentionally changed to return iterators, and reduce was removed from being a built-in and placed in functools.reduce.", "As an addendum to the other answers, this sounds like a fine use-case for a context manager that will re-map the names of these functions to ones which return a list and introduce reduce in the global namespace.", "Since the reduce method has been removed from the built in function from Python3, don't forget to import the functools in your code. Please look at the code snippet below.", "One of the advantages of map, filter and reduce is how legible they become when you \"chain\" them together to do something complex. However, the built-in syntax isn't legible and is all \"backwards\". So, I suggest using the PyFunctional package (https://pypi.org/project/PyFunctional/). \nHere's a comparison of the two:"]}, {"question": "How do I get user's IP in django?", "answers": ["Make sure you have reverse proxy (if any) configured correctly (e.g. mod_rpaf installed for Apache).", "You can use django-ipware which supports Python 2 & 3 and handles IPv4 & IPv6.", "Alexander's answer is great, but lacks the handling of proxies that sometimes return multiple IP's in the HTTP_X_FORWARDED_FOR header.", "No More confusion In the recent versions of Django it is mentioned clearly that\nthe Ip address of the client is available at ", "I would like to suggest an improvement to yanchenko's answer."]}, {"question": "I want to append a newline to my string every time I call file.write(). What's the easiest way to do this in Python?", "answers": ["Use \"\\n\":", "You can do this in two ways:", "You can use: ", "If you use it extensively (a lot of written lines), you can subclass 'file':", "you could do:"]}, {"question": "I have two simple one-dimensional arrays in NumPy. I should be able to concatenate them using numpy.concatenate. But I get this error for the code below:", "answers": ["The line should be:", "There are several possibilities for concatenating 1D arrays, e.g.,", "The first parameter to concatenate should itself be a sequence of arrays to concatenate: ", "An alternative ist to use the short form of \"concatenate\" which is either \"r_[...]\" or \"c_[...]\" as shown in the example code beneath (see http://wiki.scipy.org/NumPy_for_Matlab_Users for additional information):", "Here are more approaches for doing this by using numpy.ravel(), numpy.array(), utilizing the fact that 1D arrays can be unpacked into plain elements:"]}, {"question": "I'm currently working on a computation in python shell. What I want to have is Matlab style listout where you can see all the variables that have been defined up to a point (so I know which names I've used, their values and such).", "answers": ["A few things you could use:", "If possible, you may want to use IPython.", "To get the names:", "As RedBlueThing and analog said:", "print locals()"]}, {"question": "I am trying to get my program to print out \"banana\" from the dictionary. What would be the simplest way to do this?", "answers": ["On a Python version where dicts actually are ordered, you can do", "A dictionary is not indexed, but it is in some way, ordered. The following would give you the first existing key:", "Update: as of Python 3.7, insertion order is maintained, so you don't need an OrderedDict here. You can use the below approaches with a normal dict", "If you just want the first key from a dictionary you should use what many have suggested before", "The dict type is an unordered mapping, so there is no such thing as a \"first\" element."]}, {"question": "actual output: [1,3,5,6]\nexpected output: [1,3,5]", "answers": ["If order is not important and you don't need to worry about duplicates then you can use set intersection:", "Using list comprehensions is a pretty obvious one for me. Not sure about performance, but at least things stay lists.", "If you convert the larger of the two lists into a set, you can get the intersection of that set with any iterable using intersection():", "Make a set out of the larger one:", "Here's some Python 2 / Python 3 code that generates timing information for both list-based and set-based methods of finding the intersection of two lists. "]}, {"question": "I have two Series s1 and s2 with the same (non-consecutive) indices. How do I combine s1 and s2 to being two columns in a DataFrame and keep one of the indices as a third column?", "answers": ["I think concat is a nice way to do this. If they are present it uses the name attributes of the Series as the columns (otherwise it simply numbers them):", "Why don't you just use .to_frame if both have the same indexes?", "Pandas will automatically align these passed in series and create the joint index\nThey happen to be the same here. reset_index moves the index to a column.", "If I may answer this.", "Example code:"]}, {"question": "I am learning Python and creating a database connection.\nWhile trying to add to the DB, I am thinking of creating tuples out of information and then add them to the DB. ", "answers": ["Tuples are immutable; you can't change which variables they contain after construction. However, you can concatenate or slice them to form new tuples:", "You can start with a blank tuple with something like t = (). You can add with +, but you have to add another tuple. If you want to add a single element, make it a singleton: t = t + (element,). You can add a tuple of multiple elements with or without that trailing comma.", "In Python 3, you can use * to create a new tuple of elements from the original tuple along with the new element.", "Another tactic not yet mentioned is using appending to a list, and then converting the list to a tuple at the end:", "\" once the info is added to the DB, should I delete the tuple? i mean i dont need the tuple anymore.\""]}, {"question": "I am dealing with dates in Python and I need to convert them to UTC timestamps to be used\ninside Javascript. The following code does not work:", "answers": ["If d = date(2011, 1, 1) is in UTC:", "For unix systems only:", "Assumption 1: You're attempting to convert a date to a timestamp, however since a date covers a 24 hour period, there isn't a single timestamp that represents that date. I'll assume that you want to represent the timestamp of that date at midnight (00:00:00.000).", "I defined my own two functions", "follow the python2.7 document, you have to use calendar.timegm() instead of time.mktime()"]}, {"question": "I have a loop starting with for i in range(0, 100). Normally it runs correctly, but sometimes it fails due to network conditions. Currently I have it set so that on failure, it will continue in the except clause (continue on to the next number for i).", "answers": ["Do a while True inside your for loop, put your try code inside, and break from that while loop only when your code succeeds.", "I prefer to limit the number of retries, so that if there's a problem with that specific item you will eventually continue onto the next one, thus:", "UPDATE 2021-12-01:", "Here is a solution similar to others, but it will raise the exception if it doesn't succeed in the prescribed number or retries.", "The retrying library was previously the way to go, but sadly it has some bugs and it hasn't got any updates since 2016. Other alternatives seem to be backoff and tenacity. During the time of writing this, the tenacity had more GItHub stars (2.3k vs 1.2k) and was updated more recently, hence I chose to use it. Here is an example:"]}, {"question": "I'm trying to read a .csv file into Python (Spyder) but I keep getting an error. My code:", "answers": ["This error occurs because you are using a normal string as a path. You can use one of the three following solutions to fix your problem:", "The first backslash in your string is being interpreted as a special character, in fact because it's followed by a \"U\" it's being interpreted as the start of a unicode code point.", "You can just put r in front of the string with your actual path, which denotes a raw string. For example:", "consider it as a raw string. Just simple answer, add r before your windows path.", "Try writing the file path as \"C:\\\\Users\\miche\\Documents\\school\\jaar2\\MIK\\2.6\\vektis_agb_zorgverlener\" i.e with double backslash after the drive as opposed to \"C:\\Users\\miche\\Documents\\school\\jaar2\\MIK\\2.6\\vektis_agb_zorgverlener\" "]}, {"question": "I am opening a file which has 100,000 URL's.  I need to send an HTTP request to each URL and print the status code. I am using Python 2.6, and so far looked at the many confusing ways Python implements threading/concurrency.  I have even looked at the python concurrence library, but cannot figure out how to write this program correctly.  Has anyone come across a similar problem?  I guess generally I need to know how to perform thousands of tasks in Python as fast as possible - I suppose that means 'concurrently'.", "answers": ["Twistedless solution:", "Things have changed quite a bit since 2010 when this was posted and I haven't tried all the other answers but I have tried a few, and I found this to work the best for me using python3.6.", "A solution using tornado asynchronous networking library", "I know this is an old question, but in Python 3.7 you can do this using asyncio and aiohttp.", "Threads are absolutely not the answer here. They will provide both process and kernel bottlenecks, as well as throughput limits that are not acceptable if the overall goal is \"the fastest way\"."]}, {"question": "To my shame, I can't figure out how to handle exception for python 'with' statement. If I have a code:", "answers": ["If you want different handling for errors from the open call vs the working code you could do:", "The best \"Pythonic\" way to do this, exploiting the with statement, is listed as Example #6 in PEP 343, which gives the background of the statement.", "The with statement has been available without the __future__ import since Python 2.6. You can get it as early as Python 2.5 (but at this point it's time to upgrade!) with:", "Differentiating between exceptions that occur in a with statement is tricky because they can originate in different places. Exceptions can be raised from either of the following places (or functions called therein):"]}, {"question": "I have a Python function which takes several arguments. Some of these arguments could be omitted in some scenarios.", "answers": ["Just use the *args parameter, which allows you to pass as many arguments as you want after your a,b,c. You would have to add some logic to map args->c,d,e,f but its a \"way\" of overloading.", "Try calling it like: obj.some_function( '1', 2, '3', g=\"foo\", h=\"bar\" ). After the required positional arguments, you can specify specific optional arguments by name.", "It is very easy just do this", "as in more proper way:", "Required parameters first, optional parameters after. Optional parameters always with a =None."]}, {"question": "What are the differences between shell languages like bash, zsh, fish and the scripting languages above that makes them more suitable for the shell?", "answers": ["There are a couple of differences that I can think of; just thoughtstreaming here, in no particular order:", "It's cultural.  The Bourne shell is almost 25 years old; it was one of the first scripting languages, and it was the first good solution to the central need of Unix admins.  (I.e., a 'glue' to tie all the other utilities together and to do typical Unix tasks without having to compile a damn C program every time.)  ", "A shell language has to be easy to use. You want to type one-time throw away commands, not small programs. I.e. you want to type", "If you know of such a language, please post it as well.", "Who says they aren't?  Take a look at Zoidberg.  REPLs (Read Eval Print Loops) make crappy shells because every command must be syntactically correct, and running a program goes from being:"]}, {"question": "Now that it's clear what a metaclass is, there is an associated concept that I use all the time without knowing what it really means. ", "answers": ["A callable is anything that can be called. ", "From Python's sources object.c:", "A callable is an object allows you to use round parenthesis ( ) and eventually pass some parameters, just like functions.", "Let me explain backwards:", "A Callable is an object that has the __call__ method.  This means you can fake callable functions or do neat things like Partial Function Application where you take a function and add something that enhances it or fills in some of the parameters, returning something that can be called in turn (known as Currying in functional programming circles)."]}, {"question": "Why doesn't list have a safe \"get\" method like dictionary?", "answers": ["Ultimately it probably doesn't have a safe .get method because a dict is an associative collection (values are associated with names) where it is inefficient to check if a key is present (and return its value) without throwing an exception, while it is super trivial to avoid exceptions accessing list elements (as the len method is very fast).  The .get method allows you to query the value associated with a name, not directly access the 37th item in the dictionary (which would be more like what you're asking of your list).", "This works if you want the first element, like my_list.get(0)", "Probably because it just didn't make much sense for list semantics. However, you can easily create your own by subclassing.", "Instead of using .get, using like this should be ok for lists. Just a usage difference.", "Credits to jose.angel.jimenez and Gus Bus."]}, {"question": "Say I have a Python function that returns multiple values in a tuple:", "answers": ["You can use x = func()[0] to return the first value, x = func()[1] to return the second, and so on.", "One common convention is to use a \"_\" as a variable name for the elements of the tuple you wish to ignore. For instance:", "If you're using Python 3, you can you use the star before a variable (on the left side of an assignment) to have it be a list in unpacking.", "The common practice is to use the dummy variable _ (single underscore), as many have indicated here before.", "Remember, when you return more than one item, you're really returning a tuple. So you can do things like this:"]}, {"question": "I want to loop over the contents of a text file and do a search and replace on some lines and write the result back to the file. I could first load the whole file in memory and then write it back, but that probably is not the best way to do it.", "answers": ["The shortest way would probably be to use the fileinput module. For example, the following adds line numbers to a file, in-place:", "I guess something like this should do it. It basically writes the content to a new file and replaces the old file with the new file:", "Here's another example that was tested, and will match search & replace patterns:", "This should work: (inplace editing)", "Based on the answer by Thomas Watnedal. \nHowever, this does not answer the line-to-line part of the original question exactly. The function can still replace on a line-to-line basis "]}, {"question": "What is the Pythonic approach to achieve the following?", "answers": ["In Python 2:", "In python 3.0 zip returns a zip object. You can get a list out of it by calling list(zip(a, b)).", "You can use map lambda", "Youre looking for the builtin function zip.", "I am not sure if this a pythonic way or not but this seems simple if both lists have the same number of elements : "]}, {"question": "I have a very big file 4GB and when I try to read it my computer hangs.\nSo I want to read it piece by piece and after processing each piece store the processed piece into another file and read next piece.", "answers": ["To write a lazy function, just use yield:", "file.readlines() takes in an optional size argument which approximates the number of lines read in the lines returned.", "If your computer, OS and python are 64-bit, then you can use the mmap module to map the contents of the file into memory and access it with indices and slices. Here an example from the documentation:", "There are already many good answers, but if your entire file is on a single line and you still want to process \"rows\" (as opposed to fixed-size blocks), these answers will not help you.", "UPDATE: The approach is best explained in https://stackoverflow.com/a/4566523/38592"]}, {"question": "I'm new to Python, so this is probably a simple scoping question. The following code in a Python file (module) is confusing me slightly:", "answers": ["Python variables are scoped to the innermost function, class, or module in which they're assigned. Control blocks like if and while blocks don't count, so a variable assigned inside an if is still scoped to a function, class, or module.", "Yes, they're in the same \"local scope\", and actually code like this is common in Python:", "Scope in python follows this order:", "As Eli said, Python doesn't require variable declaration. In C you would say:", "Unlike languages such as C, a Python variable is in scope for the whole of the function (or class, or module) where it appears, not just in the innermost \"block\".  It is as though you declared int x at the top of the function (or class, or module), except that in Python you don't have to declare variables."]}, {"question": "I have a list of sets:", "answers": ["From Python version 2.6 on you can use multiple arguments to set.intersection(), like", "As of 2.6, set.intersection takes arbitrarily many iterables. ", "Clearly set.intersection is what you want here, but in case you ever need a generalisation of \"take the sum of all these\", \"take the product of all these\", \"take the xor of all these\", what you are looking for is the reduce function:", "If you don't have Python 2.6 or higher, the alternative is to write an explicit for loop:", "Here I'm offering a generic function for multiple set intersection trying to take advantage of the best method available:"]}, {"question": "I've never used SOAP before and I'm sort of new to Python.  I'm doing this to get myself acquainted with both technologies.  I've installed SOAPlib and I've tried to read their Client documentation, but I don't understand it too well.  Is there anything else I can look into which is more suited for being a SOAP Client library for Python?", "answers": ["Update (2016):", "I followed the advice of other answers to this question and gave SUDS a try. After using it \"in anger\" I must agree: SUDS is very nice! Highly recommended!", "I had good experience with SUDS\nhttps://fedorahosted.org/suds", "SUDS is the way to go, no question about it.", "Just an FYI warning for people looking at SUDS, until this ticket is resolved, SUDS does not support the \"choice\" tag in WSDL:"]}, {"question": "A colleague is looking to generate UML class diagrams from heaps of Python source code. \nHe's primarily interested in the inheritance relationships, and mildly interested in compositional relationships, and doesn't care much about class attributes that are just Python primitives.", "answers": ["You may have heard of Pylint that helps statically checking Python code. Few people know that it comes with a tool named Pyreverse that draws UML diagrams from the Python code it reads. Pyreverse uses Graphviz as a backend.", "Epydoc is a tool to generate API documentation from Python source code. It also generates UML class diagrams, using Graphviz in fancy ways. Here is an example of diagram generated from the source code of Epydoc itself.", "Check this list of seven uml tools for python", "Certain classes of well-behaved programs may be diagrammable, but in the general case, it can't be done.  Python objects can be extended at run time, and objects of any type can be assigned to any instance variable.  Figuring out what classes an object can contain pointers to (composition) would require a full understanding of the runtime behavior of the program.", "It is worth mentioning Gaphor. A Python modelling/UML tool."]}, {"question": "I have this code which calculates the distance between two coordinates. The two functions are both within the same class.", "answers": ["Since these are member functions, call it as a member function on the instance, self.", "That doesn't work because distToPoint is inside your class, so you need to prefix it with the classname if you want to refer to it, like this: classname.distToPoint(self, p). You shouldn't do it like that, though. A better way to do it is to refer to the method directly through the class instance (which is the first argument of a class method), like so: self.distToPoint(p)."]}, {"question": "The following use of super() raises a TypeError: why?", "answers": ["Alright, it's the usual \"super() cannot be used with an old-style class\".", "super() can be used only in the new-style classes, which means the root class needs to inherit from the 'object' class.", "You can also use class TextParser(HTMLParser, object):. This makes TextParser a new-style class, and super() can be used.", "The problem is that super needs an object as an ancestor:", "If you look at the inheritance tree (in version 2.6), HTMLParser inherits from SGMLParser which inherits from ParserBase which doesn't inherits from object. I.e. HTMLParser is an old-style class."]}, {"question": "I am calling different processes with the subprocess module. However, I have a question.", "answers": ["The benefit of not calling via the shell is that you are not invoking a 'mystery program.'  On POSIX, the environment variable SHELL controls which binary is invoked as the \"shell.\"  On Windows, there is no bourne shell descendent, only cmd.exe.", "Setting the shell argument to a true value causes subprocess to spawn an intermediate shell process, and tell it to run the command. In other words, using an intermediate shell means that variables, glob patterns, and other special shell features in the command string are processed before the command is run. Here, in the example, $HOME was processed before the echo command. Actually, this is the case of command with shell expansion while the command ls -l considered as a simple command.", "An example where things could go wrong with Shell=True is shown here", "Executing programs through the shell means that all user input passed to the program is interpreted according to the syntax and semantic rules of the invoked shell.  At best, this only causes inconvenience to the user, because the user has to obey these rules.  For instance, paths containing special shell characters like quotation marks or blanks must be escaped.  At worst, it causes security leaks, because the user can execute arbitrary programs.", "The other answers here adequately explain the security caveats which are also mentioned in the subprocess documentation.  But in addition to that, the overhead of starting a shell to start the program you want to run is often unnecessary and definitely silly for situations where you don't actually use any of the shell's functionality.  Moreover, the additional hidden complexity should scare you, especially if you are not very familiar with the shell or the services it provides."]}, {"question": "I'm wondering if there's any difference between the code fragment", "answers": ["It depends on how you want to access the import when you refer to it.", "Many people have already explained about import vs from, so I want to try to explain a bit more under the hood, where the actual difference lies.", "There is a difference. In some cases, one of those will work and the other won't. Here is an example: say we have the following structure:", "You are using Python3 were urllib in the package. Both forms are acceptable and no one form of import is preferred over the other. Sometimes when there are multiple package directories involved you may to use the former from x.y.z.a import s", "In python 2.x at least you cannot do import urllib2.urlopen"]}, {"question": "I need to know if a variable in Python is a string or a dict.  Is there anything wrong with the following code?", "answers": ["What happens if somebody passes a unicode string to your function? Or a class derived from dict? Or a class implementing a dict-like interface? Following code covers first two cases. If you are using Python 2.6 you might want to use collections.Mapping instead of dict as per the ABC PEP.", "type(dict()) says \"make a new dict, and then find out what its type is\".  It's quicker to say just dict.\nBut if you want to just check type, a more idiomatic way is isinstance(x, dict).", "built-in types in Python have built in names:", "isinstance is preferrable over type because it also evaluates as True when you compare an object instance with it's superclass, which basically means you won't ever have to special-case your old code for using it with dict or str subclasses.", "I think I will go for the duck typing approach - \"if it walks like a duck, it quacks like a duck, its a duck\". This way you will need not worry about if the string is a unicode or ascii. "]}, {"question": "I have the below db model:", "answers": ["it looks like datetime.now() is being evaluated when the model is defined, and not each time you add a record.", "Instead of using datetime.now you should be really using from django.utils.timezone import now", "From the documentation on the django model default field:", "David had the right answer. The parenthesis () makes it so that the callable timezone.now() is called every time the model is evaluated. If you remove the () from timezone.now() (or datetime.now(), if using the naive datetime object) to make it just this:", "The datetime.now() is evaluated when the class is created, not when new record is being added to the database."]}, {"question": "What does for row_number, row in enumerate(cursor): do in Python?", "answers": ["The enumerate() function adds a counter to an iterable.", "It's a builtin function that returns an object that can be iterated over. See the documentation.", "I am reading a book (Effective Python) by Brett Slatkin and he shows another way to iterate over a list and also know the index of the current item in the list but he suggests that it is better not to use it and to use enumerate instead. \nI know you asked what enumerate means, but when I understood the following, I also understood how enumerate makes iterating over a list while knowing the index of the current item easier (and more readable). ", "As other users have mentioned, enumerate is a generator that adds an incremental index next to each item of an iterable.", "The enumerate function works as follows:"]}, {"question": "Is there any significant difference between the two python keywords continue and pass like in the examples", "answers": ["Yes, they do completely different things.  pass simply does nothing, while continue goes on with the next loop iteration.  In your example, the difference would become apparent if you added another statement after the if:  After executing pass, this further statement would be executed.  After continue, it wouldn't.", "Yes, there is a difference. continue forces the loop to start at the next iteration while pass means \"there is no code to execute here\" and will continue through the remainder of the loop body.", "continue will jump back to the top of the loop. pass will continue processing.", "Difference between pass and continue in a for loop:", "In your example, there will be no difference, since both statements appear at the end of the loop. pass is simply a placeholder, in that it does nothing (it passes execution to the next statement). continue, on the other hand, has a definite purpose: it tells the loop to continue as if it had just restarted."]}, {"question": "I can't get past the error:", "answers": ["You need to instantiate a class instance here.", "You need to initialize it first:", "Works and is simpler than every other solution I see here :", "The self keyword in Python is analogous to this keyword in C++ / Java / C#.", "You can also get this error by prematurely taking PyCharm's advice to annotate a method @staticmethod.  Remove the annotation."]}, {"question": "Just opened a file with Sublime Text (with Sublime Linter) and noticed a PEP8 formatting error that I'd never seen before. Here's the text:", "answers": ["PEP-8 recommends you indent lines to the opening parentheses if you put anything on the first line, so it should either be indenting to the opening bracket:", "This goes also for statements like this (auto-formatted by PyCharm):"]}, {"question": "I'm trying to disable warning C0321 (\"more than one statement on a single line\" -- I often put if statements with short single-line results on the same line), in Pylint 0.21.1 (if it matters: astng 0.20.1, common 0.50.3, and Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56)).", "answers": ["pylint --generate-rcfile shows it like this:", "I had this problem using Eclipse and solved it as follows:", "Starting from Pylint v. 0.25.3, you can use the symbolic names for disabling warnings instead of having to remember all those code numbers. E.g.:", "To disable a warning locally in a block, add", "There are several ways to disable warnings & errors from Pylint.  Which one to use has to do with how globally or locally you want to apply the disablement -- an important design decision."]}, {"question": "How can I install the MySQLdb module for Python using pip?", "answers": ["It's easy to do, but hard to remember the correct spelling:", "Starting from a fresh Ubuntu 14.04.2 system, these two commands were needed:", "First    ", "I had problems installing the 64-bit version of MySQLdb on Windows via Pip (problem compiling sources)  [32bit version installed ok]. Managed to install the compiled MySQLdb from the .whl file available from http://www.lfd.uci.edu/~gohlke/pythonlibs/ ", "well this worked for me:"]}, {"question": "I'm trying to do this query in sqlalchemy", "answers": ["How about ", "Assuming you use the declarative style (i.e. ORM classes), it is pretty easy:", "An alternative way is using raw SQL mode with SQLAlchemy, I use SQLAlchemy 0.9.8, python 2.7, MySQL 5.X, and MySQL-Python as connector, in this case, a tuple is needed. My code listed below:", "Just wanted to share my solution using sqlalchemy and pandas in python 3. Perhaps, one would find it useful.", "With the expression API, which based on the comments is what this question is asking for, you can use the in_ method of the relevant column."]}, {"question": "What is the recommended way of handling settings for local development and the production server? Some of them (like constants, etc) can be changed/accessed in both, but some of them (like paths to static files) need to remain different, and hence should not be overwritten every time the new code is deployed.", "answers": ["Two Scoops of Django: Best Practices for Django 1.5 suggests using version control for your settings files and storing the files in a separate directory:", "In settings.py:", "Instead of settings.py, use this layout:", "I use a slightly modified version of the \"if DEBUG\" style of settings that Harper Shelby posted.  Obviously depending on the environment (win/linux/etc.) the code might need to be tweaked a bit.", "I use a settings_local.py and a settings_production.py. After trying several options I've found that it's easy to waste time with complex solutions when simply having two settings files feels easy and fast."]}, {"question": "In my case, I'm using the requests library to call PayPal's API over HTTPS. Unfortunately, I'm getting an error from PayPal, and PayPal support cannot figure out what the error is or what's causing it. They want me to \"Please provide the entire request, headers included\".", "answers": ["A simple method: enable logging in recent versions of Requests (1.x and higher.)  ", "r is a response.  It has a request attribute which has the information you need.", "You can use HTTP Toolkit to do exactly this.", "If you're using Python 2.x, try installing a urllib2 opener. That should print out your headers, although you may have to combine that with other openers you're using to hit the HTTPS.", "A much simpler way to debug HTTP local requests is to use netcat. If you run"]}, {"question": "I would like to know how to simply reverse the color order of a given colormap in order to use it with plot_surface.", "answers": ["The standard colormaps also all have reversed versions. They have the same names with _r tacked on to the end. (Documentation here.)", "The solution is pretty straightforward. Suppose you want to use the \"autumn\" colormap scheme. The standard version:", "In matplotlib a color map isn't a list, but it contains the list of its colors as colormap.colors. And the module matplotlib.colors provides a function ListedColormap() to generate a color map from a list. So you can reverse any color map by doing ", "As of Matplotlib 2.0, there is a reversed() method for ListedColormap and LinearSegmentedColorMap objects, so you can just do", "As a LinearSegmentedColormaps is based on a dictionary of red, green and blue, it's necessary to reverse each item:"]}, {"question": "If I've got a multi-level column index:", "answers": ["You can use MultiIndex.droplevel:", "Another way to drop the index is to use a list comprehension: ", "As of Pandas 0.24.0, we can now use DataFrame.droplevel():", "Another way to do this is to reassign df based on a cross section of df, using the .xs method.", "You could also achieve that by renaming the columns:"]}, {"question": "In R when you need to retrieve a column index based on the name of the column you could do", "answers": ["Sure, you can use .get_loc():", "Here is a solution through list comprehension. cols is the list of columns to get index for:", "DSM's solution works, but if you wanted a direct equivalent to which you could do (df.columns == name).nonzero()", "When you might be looking to find multiple column matches, a vectorized solution using searchsorted method could be used. Thus, with df as the dataframe and query_cols as the column names to be searched for, an implementation would be -", "In case you want the column name from the column location (the other way around to the OP question), you can use:"]}, {"question": "I am using PyCharm on Windows and want to change the settings to limit the maximum line length to 79 characters, as opposed to the default limit of 120 characters.", "answers": ["Here is screenshot of my Pycharm. Required settings is in following path: File -> Settings -> Editor -> Code Style -> General: Right margin (columns)", "For PyCharm 2018.1 on Mac:", "For PyCharm 4", "You can even set a separate right margin for HTML. Under the specified path:", "For anyone, or myself if I reload my machine, who this is not working for when you do a code reformat there is an additional option to check under editor->code style->python : ensure right margin is not exceeded.  Once this was selected the reformat would work."]}, {"question": "Believe it or not, after profiling my current code, the repetitive operation of numpy array reversion ate a giant chunk of the running time. What I have right now is the common view-based method:", "answers": ["When you create reversed_arr you are creating a view into the original array.  You can then change the original array, and the view will update to reflect the changes.", "As mentioned above,", "Because this seems to not be marked as answered yet... The Answer of Thomas Arildsen should be the proper one: just use", "np.fliplr() flips the array left to right. ", "I will expand on the earlier answer about np.fliplr(). Here is some code that demonstrates constructing a 1d array, transforming it into a 2d array, flipping it, then converting back into a 1d array. time.clock() will be used to keep time, which is presented in terms of seconds."]}, {"question": "I have a Dataframe, df, with the following column:", "answers": ["If you want new columns showing year and month separately you can do this:", "The df['date_column'] has to be in date time format.", "You can directly access the year and month attributes, or request a datetime.datetime:", "If you want the month year unique pair, using apply is pretty sleek.", "Extracting the Year say from ['2018-03-04']  "]}, {"question": "I am using this data frame:", "answers": ["Use GroupBy.sum:", "Also you can use agg function,", "If you want to keep the original columns Fruit and Name, use reset_index(). Otherwise Fruit and Name will become part of the index. ", "Both the other answers accomplish what you want.  ", "You can select different columns to sum numbers. "]}, {"question": "Tried to perform REST GET through python requests with the following code and I got error.", "answers": ["The docs give a fair indicator of what's required., however requests allow us to skip a few steps:", "If you are not able to upgrade your Python version to 2.7.9, and want to suppress warnings, "]}, {"question": "In Python, is there a portable and simple way to test if an executable program exists?", "answers": ["I know this is an ancient question, but you can use distutils.spawn.find_executable.  This has  been documented since python 2.4 and has existed since python 1.6.", "Easiest way I can think of: ", "Use shutil.which() from Python's wonderful standard library.\nBatteries included!", "As a one-liner of Jan-Philip Gehrcke Answer:", "Just remember to specify the file extension on windows. Otherwise, you have to write a much complicated is_exe for windows using PATHEXT environment variable. You may just want to use FindPath."]}, {"question": "The docs show how to apply multiple functions on a groupby object at a time using a dict with the output column names as the keys:", "answers": ["The second half of the currently accepted answer is outdated and has two deprecations. First and most important, you can no longer pass a dictionary of dictionaries to the agg groupby method. Second, never use .ix.", "For the first part you can pass a dict of column names for keys and a list of functions for the values:", "Since pandas version 0.25.0 or higher, we are moving away from the dictionary based aggregation and renaming, and moving towards named aggregations which accepts a tuple. Now we can simultaneously aggregate + rename to a more informative column name:", "As an alternative (mostly on aesthetics) to Ted Petrou's answer, I found I preferred a slightly more compact listing. Please don't consider accepting it, it's just a much-more-detailed comment on Ted's answer, plus code/data. Python/pandas is not my first/best, but I found this to read well:", "New in version 0.25.0."]}, {"question": "In our team, we define most test cases like this:", "answers": ["This works as you suggest - you just have to specify the class name as well:", "If you organize your test cases, that is, follow the same organization like the actual code and also use relative imports for modules in the same package, you can also use the following command format:", "It can work well as you guess", "If you check out the help of the unittest module it tells you about several combinations that allow you to run test case classes from a module and test methods from a test case class.", "In case you want to run only tests from a specific class:"]}, {"question": "I've got list of objects. I want to find one (first or whatever) object in this list that has attribute (or method result - whatever) equal to value.", "answers": ["This gets the first item from the list that matches the condition, and returns None if no item matches. It's my preferred single-expression form.", "Since it has not been mentioned just for completion.\nThe good ol' filter to filter your to be filtered elements.", "A simple example:\nWe have the following array", "Old question but I use this quite frequently (for version 3.8). It's a bit of syntactic salt, but it has the advantage over the top answer in that you could retrieve a list of results (if there are multiple) by simply removing the [0] and it still defaults to None if nothing is found. For any other condition, simply change the x.value==value to what ever you're looking for.", "You could also implement rich comparison via __eq__ method for your Test class and use in operator.\nNot sure if this is the best stand-alone way, but in case if you need to compare Test instances based on value somewhere else, this could be useful."]}, {"question": "How can I read in a .csv file (with no headers) and when I only want a subset of the columns (say 4th and 7th out of a total of 20 columns), using pandas? I cannot seem to be able to do usecols", "answers": ["In order to read a csv in that doesn't have a header and for only certain columns you need to pass params header=None and usecols=[3,6] for the 4th and 7th columns:", "Previous answers were good and correct, but in my opinion, an extra names parameter will make it perfect, and it should be the recommended way, especially when the csv has no headers.", "Make sure you specify pass header=None and add usecols=[3,6] for the 4th and 7th columns.", "As per documentation https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html :\nheaderint, list of int, default \u2018infer\u2019\nRow number(s) to use as the column names, and the start of the data. Default behavior is to infer the column names: if no names are passed the behavior is identical to header=0 and column names are inferred from the first line of the file, if column names are passed explicitly then the behavior is identical to header=None. Explicitly pass header=0 to be able to replace existing names. The header can be a list of integers that specify row locations for a multi-index on the columns e.g. [0,1,3]. Intervening rows that are not specified will be skipped (e.g. 2 in this example is skipped). Note that this parameter ignores commented lines and empty lines if skip_blank_lines=True, so header=0 denotes the first line of data rather than the first line of the file."]}, {"question": "I use pandas.to_datetime to parse the dates in my data. Pandas by default represents the dates with datetime64[ns] even though the dates are all daily only.\nI wonder whether there is an elegant/clever way to convert the dates to datetime.date or datetime64[D] so that, when I write the data to CSV, the dates are not appended with 00:00:00. I know I can convert the type manually element-by-element:", "answers": ["Since version 0.15.0 this can now be easily done using .dt to access just the date component:", "Simple Solution:", "While I upvoted EdChum's answer, which is the most direct answer to the question the OP posed, it does not really solve the performance problem (it still relies on python datetime objects, and hence any operation on them will be not vectorized - that is, it will be slow).", "Avoid, where possible, converting your datetime64[ns] series to an object dtype series of datetime.date objects. The latter, often constructed using pd.Series.dt.date, is stored as an array of pointers and is inefficient relative to a pure NumPy-based series.", "Pandas DatetimeIndex and Series have a method called normalize that does exactly what you want."]}, {"question": "What is the difference between ndarray and array in Numpy? And where can I find the implementations in the numpy source code?", "answers": ["numpy.array is just a convenience function to create an ndarray; it is not a class itself.  ", "numpy.array is a function that returns a numpy.ndarray.  There is no object type numpy.array.", "Just a few lines of example code to show the difference between numpy.array and numpy.ndarray", "numpy.ndarray() is a class, while numpy.array() is a method / function to create ndarray. ", "I think with np.array() you can only create C like though you mention the order, when you check using np.isfortran() it says false. but with np.ndarrray() when you specify the order it creates based on the order provided. "]}, {"question": "I am trying to use networkx with Python. When I run this program it get this error. Is there anything missing?", "answers": ["The main problem is that (on your system) matplotlib chooses an x-using backend by default. I just had the same problem on one of my servers.  The solution for me was to add the following code in a place that gets read before any other pylab/matplotlib/pyplot import:", "Just as a complement of Reinout's answer.", "The clean answer is to take a little bit of time correctly prepare your execution environment.", "I got the error while using matplotlib through Spark. matplotlib.use('Agg') doesn't work for me. In the end, the following code works for me. More here", "I will just repeat what @Ivo Bosticky said which can be overlooked. Put these lines at the VERY start of the py file."]}, {"question": "I'm parsing some HTML with Beautiful Soup 3, but it contains HTML entities which Beautiful Soup 3 doesn't automatically decode for me:", "answers": ["Use html.unescape():", "Beautiful Soup handles entity conversion. In Beautiful Soup 3, you'll need to specify the convertEntities argument to the BeautifulSoup constructor (see the 'Entity Conversion' section of the archived docs). In Beautiful Soup 4, entities get decoded automatically.", "You can use replace_entities from w3lib.html library", "Beautiful Soup 4 allows you to set a formatter to your output", "I had a similar encoding issue. I used the normalize() method. I was getting a Unicode error using the pandas .to_html() method when exporting my data frame to an .html file in another directory. I ended up doing this and it worked..."]}, {"question": "I know I should avoid using global variables in the first place due to confusion like this, but if I were to use them, is the following a valid way to go about using them? (I am trying to call the global copy of a variable created in a separate function.)", "answers": ["If you want to simply access a global variable you just use its name. However to change its value you need to use the global keyword.", "Within a Python scope, any assignment to a variable not already declared within that scope creates a new local variable unless that variable is declared earlier in the function as referring to a globally scoped variable with the keyword global.", "As others have noted, you need to declare a variable global in a function when you want that function to be able to modify the global variable. If you only want to access it, then you don't need global.", "You can directly access a global variable inside a function. If you want to change the value of that global variable, use \"global variable_name\". See the following example:", "Here is one case that caught me out, using a global as a default value of a parameter."]}, {"question": "Apply function to every item of iterable and return a list of the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. ", "answers": ["map isn't particularly pythonic. I would recommend using list comprehensions instead:", "map doesn't relate to a Cartesian product at all, although I imagine someone well versed in functional programming could come up with some impossible to understand way of generating a one using map. ", "map creates a new list by applying a function to every element of the source:", "Simplifying a bit, you can imagine map() doing something like this:", "The map() function is there to apply the same procedure to every item in an iterable data structure, like lists, generators, strings, and other stuff."]}, {"question": "I'm basically looking for a python version of Combination of List<List<int>>", "answers": ["you need itertools.product:", "The most elegant solution is to use itertools.product in python 2.6.", "I hope you find that as elegant as I did when I first encountered it.", "Nothing wrong with straight up recursion for this task, and if you need a version that works with strings, this might fit your needs:", "Numpy can do it:"]}, {"question": "Is it possible? When installing pip, install the python packages inside my $HOME folder. (for example, I want to install mercurial, using pip, but inside $HOME instead of /usr/local)", "answers": ["While you can use a virtualenv, you don't need to.  The trick is passing the PEP370 --user argument to the setup.py script.  With the latest version of pip, one way to do it is:", "I would use virtualenv at your HOME directory.", "You can specify the -t option (--target) to specify the destination directory. See pip install --help for detailed information. This is the command you need: ", "Yes"]}, {"question": "I'm building a web application that will is going to manipulate (pad, mix, merge etc) sound files and I've found that sox does exactly what I want. Sox is a linux command line program and I'm feeling a little uncomfortable with having the python web app starting new sox processes on my server on a per request basis. ", "answers": ["The subprocess module is the preferred way of running other programs from Python -- much more flexible and nicer to use than os.system. ", "This whole setup seems a little unstable to me.", "If you're concerned about server performance then look at capping the number of running sox processes. If the cap has been hit you can always cache the request and inform the user when it's finished in whichever way suits your application.", "I am not familiar with sox, but instead of making repeated calls to the program as a command line, is it possible to set it up as a service and connect to it for requests?  You can take a look at the connection interface such as sqlite for inspiration.  "]}, {"question": "I need to add two subplots to a figure. One subplot needs to be about three times as wide as the second (same height). I accomplished this using GridSpec and the colspan argument but I would like to do this using figure so I can save to PDF. I can adjust the first figure using the figsize argument in the constructor, but how do I change the size of the second plot?", "answers": ["", "You can use gridspec and figure:", "I used pyplot's axes object to manually adjust the sizes without using GridSpec:", "Probably the simplest way is using subplot2grid, described in Customizing Location of Subplot Using GridSpec.", "In a simple way, different size sub plotting can also be done without gridspec:"]}, {"question": "My project is currently receiving a JSON message in python which I need to get bits of information out of. For the purposes of this, let's set it to some simple JSON in a string:", "answers": ["Very simple:", "Sometimes your json is not a string. For example if you are getting a json from a url like this:", "For URL or file, use json.load(). For string with .json content, use json.loads().", "Following is simple example that may help you:"]}, {"question": "I have spent plenty of time as far as I am newbie in Python.\nHow could I ever decode such a URL:", "answers": ["The data is UTF-8 encoded bytes escaped with URL quoting, so you want to decode, with urllib.parse.unquote(), which handles decoding from percent-encoded data to UTF-8 bytes and then to text, transparently:", "If you are using Python 3, you can use urllib.parse", "You can achieve an expected result with requests library as well:", "In HTML the URLs can contain html entities.\nThis replaces them, too."]}, {"question": "In the book that I am reading on Python, it keeps using the code eval(input('blah')) ", "answers": ["The eval function lets a Python program run Python code within itself.", "eval() interprets a string as code. The reason why so many people have warned you about using this is because a user can use this as an option to run code on the computer. If you have eval(input()) and os imported, a person could type into input() os.system('rm -R *') which would delete all your files in your home directory. (Assuming you have a unix system). Using eval() is a security hole. If you need to convert strings to other formats, try to use things that do that, like int().", "Lots of good answers here, but none describe the use of eval() in the context of its globals and locals kwargs, i.e. eval(expression, globals=None, locals=None) (see docs for eval here).", "In Python 2.x input(...) is equivalent to eval(raw_input(...)), in Python 3.x raw_input was renamed input, which I suspect lead to your confusion (you were probably looking at the documentation for input in Python 2.x). Additionally, eval(input(...)) would work fine in Python 3.x, but would raise a TypeError in Python 2.", "Maybe a misleading example of reading a line and interpreting it."]}, {"question": "I'm trying out Python's type annotations with abstract base classes to write some interfaces. Is there a way to annotate the possible types of *args and **kwargs?", "answers": ["For variable positional arguments (*args) and variable keyword arguments (**kw) you only need to specify the expected value for one such argument.", "The proper way to do this is using @overload", "As a short addition to the previous answer, if you're trying to use mypy on Python 2 files and need to use comments to add types instead of annotations, you need to prefix the types for args and kwargs with * and ** respectively:", "While you can annotate variadic arguments with a type, I don't find it very useful because it assumes that all arguments are of the same type.", "In some cases the content of **kwargs can be a variety of types."]}, {"question": "I am trying to import Tkinter. However, I get an error stating that Tkinter has not been installed:", "answers": ["It is not very easy to install Tkinter locally to use with system-provided Python. You may build it from sources, but this is usually not the best idea with a binary package-based distro you're apparently running.", "Actually, you just need to use the following to install the tkinter for python3:", "If, like me, you don't have root privileges on your network because of your wonderful friends in I.S., and you are working in a local install you may have some problems with the above approaches.", "If you are using Python 3 it might be because you are typing Tkinter not tkinter", "For Arch Linux users, it goes a bit like"]}, {"question": "I know how to generate a random number within a range in Python.", "answers": ["If you just need sampling without replacement:", "Generate the range of data first and then shuffle it like this", "You could add to a set until you reach n:", "You could use the random.sample function from the standard library to select k elements from a population:"]}, {"question": "I'm using python3.3 and I'm having a cryptic error when trying to pickle a simple dictionary. ", "answers": ["The output file needs to be opened in binary mode:", "Just had same issue.  In Python 3, Binary modes 'wb', 'rb' must be specified whereas in Python 2x,  they are not needed.  When you follow tutorials that are based on Python 2x,  that's why you are here. ", "pickle uses a binary protocol, hence only accepts binary files. As the document said in the first sentence, \"The pickle module implements binary protocols for serializing and de-serializing\"."]}, {"question": "I want to display:", "answers": ["You should use the new format specifications to define how your value should be represented:", "The String Formatting Operations section of the Python documentation contains the answer you're looking for.  In short:", "I suppose you're probably using the Decimal() objects from the decimal module? (If you need exactly two digits of precision beyond the decimal point with arbitrarily large numbers, you definitely should be, and that's what your question's title suggests...)", "You can change 2 in 2f to any number of decimal points you want to show.", "You can use the string formatting operator as so:"]}, {"question": "Is there a way in python to programmatically determine the width of the console? I mean the number of characters that fits in one line without wrapping, not the pixel width of the window.", "answers": ["Not sure why it is in the module shutil, but it landed there in Python 3.3, Querying the size of the output terminal:", "uses the 'stty size' command which according to a thread on the python mailing list is reasonably universal on linux. It opens the 'stty size' command as a file, 'reads' from it, and uses a simple string split to separate the coordinates.", "use", "Code above didn't return correct result on my linux because winsize-struct has 4 unsigned shorts, not 2 signed shorts:", "It's either:"]}, {"question": "I have been searching and tried various alternatives without success and spent several days on it now - driving me mad.", "answers": ["Here is my workflow after creating a folder and cd'ing into it:", "You forgot to do source bin/activate where source is a executable name.\nStruck me first few times as well, easy to think that manual is telling \"execute this from root of the environment folder\". ", "You can do ", "Go to the project directory. In my case microblog is the flask project directory and under microblog directory there should be app and venv folders. then run the below command, This is one worked for me in Ubuntu.", "Cd to the environment path, go to the bin folder.\nAt this point when you use ls command, you should see the \"activate\" file."]}, {"question": "I load some machine learning data from a CSV file. The first 2 columns are observations and the remaining columns are features.", "answers": ["See the deprecation in the docs", "Note: .ix has been deprecated since Pandas v0.20. You should instead use .loc or .iloc, as appropriate.", "Lets use the titanic dataset from the seaborn package as an example", "Also, Given a DataFrame ", "You can slice along the columns of a DataFrame by referring to the names of each column in a list, like so:"]}, {"question": "I want to find out my Python installation path on Windows. For example:", "answers": ["In your Python interpreter, type the following commands:", "If you have Python in your environment variable then you can use the following command in cmd or powershell:", "It would be either of", "If you need to know the installed path under Windows without starting the python interpreter, have a look in the Windows registry.", "Simple way is"]}, {"question": "I am working with a library which returns a byte string and I need to convert this to a string. ", "answers": ["The only thing that a computer can store is bytes.", "Assuming Python 3 (in Python 2, this difference is a little less well-defined) - a string is a sequence of characters, ie unicode codepoints; these are an abstract concept, and can't be directly stored on disk. A byte string is a sequence of, unsurprisingly, bytes - things that can be stored on disk. The mapping between them is an encoding - there are quite a lot of these (and infinitely many are possible) - and you need to know which applies in the particular case in order to do the conversion, since a different encoding may map the same bytes to a different string: ", "Note: I will elaborate more my answer for Python 3 since the end of life of Python 2 is very close.", "From What is Unicode:", "Let's have a simple one-character string '\u0161' and encode it into a sequence of bytes:"]}, {"question": "Run the following code from a directory that contains a directory named bar (containing one or more files) and a directory named baz (also containing one or more files).  Make sure there is not a directory named foo.", "answers": ["Here's a solution that's part of the standard library:", "This limitation of the standard shutil.copytree seems arbitrary and annoying. Workaround:", "Python 3.8 introduced the dirs_exist_ok argument to shutil.copytree:", "In slight improvement on atzz's answer to the function where the above function always tries to copy the files from source to destination. ", "A merge one inspired by atzz and Mital Vora:"]}, {"question": "I have a series of images that I want to create a video from.  Ideally I could specify a frame duration for each frame but a fixed frame rate would be fine too.  I'm doing this in wxPython, so I can render to a wxDC or I can save the images to files, like PNG.  Is there a Python library that will allow me to create either a video (AVI, MPG, etc) or an animated GIF from these frames?", "answers": ["I'd recommend not using images2gif from visvis because it has problems with PIL/Pillow and is not actively maintained (I should know, because I am the author).", "Here's how you do it using only PIL (install with: pip install Pillow):", "Well, now I'm using ImageMagick.  I save my frames as PNG files and then invoke ImageMagick's convert.exe from Python to create an animated GIF.  The nice thing about this approach is I can specify a frame duration for each frame individually.  Unfortunately this depends on ImageMagick being installed on the machine.  They have a Python wrapper but it looks pretty crappy and unsupported.  Still open to other suggestions.", "As of June 2009 the originally cited blog post has a method to create animated GIFs in the comments.  Download the script images2gif.py (formerly images2gif.py, update courtesy of @geographika).", "I used images2gif.py which was easy to use. It did seem to double the file size though.."]}, {"question": "I'm new to Python and Flask and I'm trying to do the equivalent of Response.redirect as in C# - ie: redirect to a specific URL - how do I go about this?", "answers": ["You have to return a redirect:", "Take a look at the example in the documentation.", "From the Flask API Documentation (v. 2.0.x):", "I believe that this question deserves an updated. Just compare with other approaches.", "Flask includes the redirect function for redirecting to any url. Futhermore, you can abort a request early with an error code with abort:"]}, {"question": "Can I insert a column at a specific column index in pandas? ", "answers": ["see docs: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.insert.html", "If you want a single value for all rows:", "You could try to extract columns as list, massage this as you want, and reindex your dataframe:", "This will work if there is no other column with the same name. If a column, with your provided name already exists in the dataframe, it will raise a ValueError.", "You can do that after you added the 'n' column into your df as follows. "]}, {"question": "For example I have simple DF:", "answers": ["Sure!  Setup:", "Another solution is to use the query method:", "And remember to use parenthesis!", "You can use pandas it has some built in functions for comparison. So if you want to select values of \"A\" that are met by the conditions of \"B\" and \"C\" (assuming you want back a DataFrame pandas object)"]}, {"question": "I'd like to create a file with path x using python. I've been using os.system(y) where y = 'touch %s' % (x). I've looked for a non-directory version of os.mkdir, but I haven't been able to find anything. Is there a tool like this to create a file without opening it, or using system or popen/subprocess?", "answers": ["There is no way to create a file without opening it There is os.mknod(\"newfile.txt\") (but it requires root privileges on OSX). The system call to create a file is actually open() with the O_CREAT flag. So no matter how, you'll always open the file.", "Of course there IS a way to create files without opening. It's as easy as calling os.mknod(\"newfile.txt\").  The only drawback is that this call requires root privileges on OSX."]}, {"question": "I can't understand why Python doesn't have a sign function. It has an abs builtin (which I consider sign's sister), but no sign.", "answers": ["EDIT:", "\"copysign\" is defined by IEEE 754, and part of the C99 specification. That's why it's in Python. The function cannot be implemented in full by abs(x) * sign(y) because of how it's supposed to handle NaN values.", "Another one liner for sign()", "Since cmp has been removed, you can get the same functionality with", "The definition on Wikipedia reads:"]}, {"question": "How can I see what's inside a bucket in S3 with boto3? (i.e. do an \"ls\")?", "answers": ["One way to see the contents would be:", "This is similar to an 'ls' but it does not take into account the prefix folder convention and will list the objects in the bucket.  It's left up to the reader to filter out prefixes which are part of the Key name. ", "I'm assuming you have configured authentication separately. ", "My s3 keys utility function is essentially an optimized version of @Hephaestus's answer:", "In order to handle large key listings (i.e. when the directory list is greater than 1000 items), I used the following code to accumulate key values (i.e. filenames) with multiple listings (thanks to Amelio above for the first lines).  Code is for python3:"]}, {"question": "PIL does support JPEG in my system.", "answers": ["libjpeg-dev is required to be able to process jpegs with pillow (or PIL), so you need to install it and then recompile pillow. It also seems that libjpeg8-dev is needed on Ubuntu 14.04", "For those on OSX, I used the following binary to get libpng and libjpeg installed systemwide:", "This is the only way that worked for me. Installing packages and reinstalling PIL didn't work.", "The followed works on ubuntu 12.04:", "On Fedora 17 I had to install libjpeg-devel and afterwards reinstall PIL:"]}, {"question": "When I try", "answers": ["Simply put, numpy.newaxis is used to increase the dimension of the existing array by one more dimension, when used once. Thus,", "The np.newaxis is just an alias for the Python constant None, which means that wherever you use np.newaxis you could also use None:", "You started with a one-dimensional list of numbers.  Once you used numpy.newaxis, you turned it into a two-dimensional matrix, consisting of four rows of one column each.", "newaxis object in the selection tuple serves to expand the dimensions of the resulting selection by one unit-length dimension."]}, {"question": "I've spent entirely too long researching how to get two subplots to share the same y-axis with a single colorbar shared between the two in Matplotlib. ", "answers": ["Just place the colorbar in its own axis and use subplots_adjust to make room for it.", "You can simplify Joe Kington's code using the axparameter of figure.colorbar() with a list of axes.\nFrom the documentation:", "This solution does not require manual tweaking of axes locations or colorbar size, works with multi-row and single-row layouts, and works with tight_layout().  It is adapted from a gallery example, using ImageGrid from matplotlib's AxesGrid Toolbox.", "Using make_axes is even easier and gives a better result. It also provides possibilities to customise the positioning of the colorbar.\nAlso note the option of subplots to share x and y axes.", "As a beginner who stumbled across this thread, I'd like to add a python-for-dummies adaptation of abevieiramota's very neat answer (because I'm at the level that I had to look up 'ravel' to work out what their code was doing):"]}, {"question": "The above code generates a file, test.csv, with an extra \\r at each row, like so:", "answers": ["The official csv documentation recommends opening the file with newline='' on all platforms to disable universal newlines translation:", "While @john-machin gives a good answer, it's not always the best approach. For example, it doesn't work on Python 3 unless you encode all of your inputs to the CSV writer. Also, it doesn't address the issue if the script wants to use sys.stdout as the stream.", "In Python 3 (I haven't tried this in Python 2), you can also simply do", "You can introduce the  lineterminator='\\n' parameter in the csv writer command.", "You have to add attribute newline=\"\\n\" to open function like this:"]}, {"question": "I have a function called by the main program:", "answers": ["The other answers all point out that you should not catch generic exceptions, but no one seems to want to tell you why, which is essential to understanding when you can break the \"rule\". Here is an explanation. Basically, it's so that you don't hide:", "Get the name of the class that exception object belongs:", "You usually should not catch all possible exceptions with try: ... except as this is overly broad. Just catch those that are expected to happen for whatever reason. If you really must, for example if you want to find out more about some problem while debugging, you should do", "Most answers point to except (\u2026) as (\u2026): syntax (rightly so) but at the same time nobody wants to talk about an elephant in the room, where the elephant is sys.exc_info() function.\nFrom the documentation of sys module (emphasis mine):", "Unless somefunction is a very bad coded legacy function, you shouldn't need what you're asking."]}, {"question": "I've recently become interested in algorithms and have begun exploring them by writing a naive implementation and then optimizing it in various ways.", "answers": ["This one has been answered already here: Python memory profiler", "Python 3.4 includes a new module: tracemalloc. It provides detailed statistics about which code is allocating the most memory. Here's an example that displays the top three lines allocating memory.", "If you only want to look at the memory usage of an object, (answer to other question)", "Disclosure:", "Below is a simple function decorator which allows to track how much memory the process consumed before the function call, after the function call, and what is the difference:"]}, {"question": "Say I have a function:", "answers": ["I'd recommend reading that PEP the error gives you.  The problem is that your code is trying to use the ASCII encoding, but the pound symbol is not an ASCII character.  Try using UTF-8 encoding.  You can start by putting # -*- coding: utf-8 -*- at the top of your .py file.  To get more advanced, you can also define encodings on a string by string basis in your code.  However, if you are trying to put the pound sign literal in to your code, you'll need an encoding that supports it for the entire file.", "Adding the following two lines at the top of my .py script worked for me (first line was necessary):", "First add the # -*- coding: utf-8 -*- line to the beginning of the file and then use u'foo' for all your non-ASCII unicode data:", "The error message tells you exactly what's wrong. The Python interpreter needs to know the encoding of the non-ASCII character.", "Adding the following two lines in the script solved the issue for me."]}, {"question": "I have a DataFrame with four columns. I want to convert this DataFrame to a python dictionary. I want the elements of first column be keys and the elements of other columns in same row be values. ", "answers": ["The to_dict() method sets the column names as dictionary keys so you'll need to reshape your DataFrame slightly. Setting the 'ID' column as the index and then transposing the DataFrame is one way to achieve this.", "Should a dictionary like:", "Suppose your dataframe is as follows:", "Try to use Zip", "If you don't mind the dictionary values being tuples, you can use itertuples:"]}, {"question": "I would like to know how can I set a variable with another variable in jinja. I will explain, I have got a submenu and I would like show which link is active. I tried this:", "answers": ["{{ }} tells the template to print the value, this won't work in expressions like you're trying to do.  Instead, use the {% set %} template tag and then assign the value the same way you would in normal python code.", "Nice shorthand for Multiple variable assignments", "Just Set it up like this"]}, {"question": "I have a pandas dataframe in which one column of text strings contains comma-separated values. I want to split each CSV field and create a new row per entry (assume that CSV are clean and need only be split on ','). For example, a should become b:", "answers": ["UPDATE 3: it makes more sense to use Series.explode() / DataFrame.explode() methods (implemented in Pandas 0.25.0 and extended in Pandas 1.3.0 to support multi-column explode) as is shown in the usage example:", "After painful experimentation to find something faster than the accepted answer, I got this to work. It ran around 100x faster on the dataset I tried it on.", "Series and DataFrame methods define a .explode() method that explodes lists into separate rows. See the docs section on Exploding a list-like column.", "How about something like this:", "Here's a function I wrote for this common task. It's more efficient than the Series/stack methods. Column order and names are retained."]}, {"question": "I have a script reading in a csv file with very huge fields:", "answers": ["The csv file might contain very huge fields, therefore increase the field_size_limit:", "This could be because your CSV file has embedded single or double quotes. If your CSV file is tab-delimited try opening it as:", ".csv field sizes are controlled via [Python.Docs]: csv.field_size_limit([new_limit]) (emphasis is mine):", "Below is to check the current limit", "I just had this happen to me on a 'plain' CSV file. Some people might call it an invalid formatted file. No escape characters, no double quotes and delimiter was a semicolon."]}, {"question": "Given a dictionary { k1: v1, k2: v2 ... } I want to get { k1: f(v1), k2: f(v2) ... } provided I pass a function f.", "answers": ["There is no such function; the easiest way to do this is to use a dict comprehension:", "These toolz are great for this kind of simple yet repetitive logic.", "You can do this in-place, rather than create a new dict, which may be preferable for large dictionaries (if you do not need a copy).", "Due to PEP-0469 which renamed iteritems() to items() and PEP-3113 which removed Tuple parameter unpacking, in Python 3.x you should write Martijn Pieters\u2666 answer like this:", "While my original answer missed the point (by trying to solve this problem with the solution to Accessing key in factory of defaultdict), I have reworked it to propose an actual solution to the present question."]}, {"question": "In the Anaconda repository, there are two types of installers:", "answers": ["Per the original docs:", "The difference is that miniconda is just shipping the repository management system. So when you install it there is just the management system without packages. Whereas with Anaconda, it is like a distribution with some built in packages. ", "conda is both a command line tool, and a python package.", "Miniconda gives you the Python interpreter itself, along with a command-line tool called conda which operates as a cross-platform package manager geared toward Python packages, similar in spirit to the apt or yum tools that Linux users might be familiar with.", "The 2 in Anaconda2 means that the main version of Python will be 2.x rather than the 3.x installed in Anaconda3. The current release has Python 2.7.13."]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["argparse is the way to go. Here is a short summary of how to use it:", "This answer suggests optparse which is appropriate for older Python versions. For Python 2.7 and above, argparse replaces optparse. See this answer for more information.", "Since 2012 there is a very easy, powerful and really cool module for argument parsing called docopt. Here is an example taken from its documentation: ", "The new hip way is argparse for these reasons.  argparse > optparse > getopt", "I prefer Click. It abstracts managing options and allows \"(...) creating beautiful command line interfaces in a composable way with as little code as necessary\"."]}, {"question": "I am sketching the architecture for a set of programs that share various interrelated objects stored in a database. I want one of the programs to act as a service which provides a higher level interface for operations on these objects, and the other programs to access the objects through that service.", "answers": ["Yes you can. I do it using the pythoncom libraries that come included with ActivePython or can be installed with pywin32 (Python for Windows extensions).", "The simplest way is to use the: NSSM - the Non-Sucking Service Manager. Just download and unzip to a location of your choosing. It's a self-contained utility, around 300KB (much less than installing the entire pywin32 suite just for this purpose) and no \"installation\" is needed. The zip contains a 64-bit and a 32-bit version of the utility. Either should work well on current systems (you can use the 32-bit version to manage services on 64-bit systems).", "Although I upvoted the chosen answer a couple of weeks back, in the meantime I struggled a lot more with this topic. It feels like having a special Python installation and using special modules to run a script as a service is simply the wrong way. What about portability and such?", "The simplest way to achieve this is to use native command sc.exe:", "There are a couple alternatives for installing as a service virtually any Windows executable."]}, {"question": "I need to choose some elements from the given list, knowing their index. Let say I would like to create a new list, which contains element with index 1, 2, 5, from given list [-2, 1, 5, 3, 8, 5, 6]. What I did is:", "answers": ["You can use operator.itemgetter:", "Alternatives:", "Another solution could be via pandas Series:", "Basic and not very extensive testing comparing the execution time of the five supplied answers:", "Here's a simpler way:"]}, {"question": "Recently I started using Python3 and it's lack of xrange hurts.", "answers": ["Some performance measurements, using timeit instead of trying to do it manually with time.", "Python3's range is Python2's xrange. There's no need to wrap an iter around it. To get an actual list in Python3, you need to use list(range(...))", "Python 3's range type works just like Python 2's xrange. I'm not sure why you're seeing a slowdown, since the iterator returned by your xrange function is exactly what you'd get if you iterated over range directly.", "One way to fix up your python2 code is:", "xrange from Python 2 is a generator and implements iterator while range is just a function.\nIn Python3 I don't know why was dropped off the xrange."]}, {"question": "I have a Decimal('3.9') as part of an object, and wish to encode this to a JSON string which should look like {'x': 3.9}. I don't care about precision on the client side, so a float is fine.", "answers": ["Simplejson 2.1 and higher has native support for Decimal type:", "I would like to let everyone know that I tried Micha\u0142 Marczyk's answer on my web server that was running Python 2.6.5 and it worked fine. However, I upgraded to Python 2.7 and it stopped working. I tried to think of some sort of way to encode Decimal objects and this is what I came up with:", "How about subclassing json.JSONEncoder?", "The native Django option is missing so I'll add it for the next guy/gall that looks for it.", "In my Flask app, Which uses python 2.7.11, flask alchemy(with 'db.decimal' types), and Flask Marshmallow ( for 'instant' serializer and deserializer), i had this error, every time i did a GET or POST. The serializer and deserializer, failed to convert  Decimal types into any JSON identifiable format. "]}, {"question": "Here is my code,", "answers": ["As suggested by Mark Ransom, I found the right encoding for that problem. The encoding was \"ISO-8859-1\", so replacing open(\"u.item\", encoding=\"utf-8\") with open('u.item', encoding = \"ISO-8859-1\") will solve the problem.", "The following also worked for me. ISO\u00a08859-1 is going to save a lot, mainly if using Speech Recognition APIs.", "Your file doesn't actually contain UTF-8 encoded data; it contains some other encoding. Figure out what that encoding is and use it in the open call.", "Try this to read using Pandas:", "This works:"]}, {"question": "Is there a way to open a file for both reading and writing?", "answers": ["Here's how you read a file, and then write to it (overwriting any existing data), without closing and reopening:", "Summarize the I/O behaviors", "r+ is the canonical mode for reading and writing at the same time. This is not different from using the fopen() system call since file() / open() is just a tiny wrapper around this operating system call.", "I have tried something like this and it works as expected:"]}, {"question": "What do I have to do in Python to figure out which encoding a string has?", "answers": ["In Python 3, all strings are sequences of Unicode characters. There is a bytes type that holds raw bytes.", "You can use type or isinstance.", "In python 3.x all strings are sequences of Unicode characters. and doing the isinstance check for str (which means unicode string by default) should suffice.", "Unicode is not an encoding - to quote Kumar McMillan:", "If your code needs to be compatible with both Python 2 and Python 3, you can't directly use things like isinstance(s,bytes) or isinstance(s,unicode) without wrapping them in either try/except or a python version test, because bytes is undefined in Python 2 and unicode is undefined in Python 3."]}, {"question": "I want to call a C library from a Python application. I don't want to wrap the whole API, only the functions and datatypes that are relevant to my case. As I see it, I have three choices:", "answers": ["Warning: a Cython core developer's opinion ahead.", "ctypes is your best bet for getting it done quickly, and it's a pleasure to work with as you're still writing Python!", "Cython is a pretty cool tool in itself, well worth learning, and is surprisingly close to the Python syntax. If you do any scientific computing with Numpy, then Cython is the way to go because it integrates with Numpy for fast matrix operations.", "For calling a C library from a Python application there is also cffi which is a new alternative for ctypes. It brings a fresh look for FFI: ", "I'll throw another one out there: SWIG"]}, {"question": "I have an integer value x, and I need to check if it is between a start and end values, so I write the following statements:", "answers": ["In Python you can \"chain\" comparison operations which just means they are \"and\"ed together.  In your case, it'd be like this:", "It can be rewritten as:"]}, {"question": "I am new to Jupyter Notebook, what is the key difference between the Jupyter Notebook and JupyterLab, suggest me to choose the best one, which should be used in future.", "answers": ["Jupyter Notebook is a web-based interactive computational environment for creating Jupyter notebook documents. It supports several languages like Python (IPython), Julia, R etc. and is largely used for data analysis, data visualization and further interactive, exploratory computing.", "At this time (mid 2019), with JupyterLab 1.0 release, as a user, I think we should adopt JupyterLab for daily use. And from the JupyterLab official documentation:", "The single most important difference between the two is that you should start using JupyterLab straight away, and that you should not worry about Jupyter Notebook at all. Because:", "(I am using JupyterLab with Julia)", "This answer shows the python perspective. Jupyter supports various languages besides python."]}, {"question": "I have a Flask server running through port 5000, and it's fine. I can access it at http://example.com:5000", "answers": ["1- Stop other applications that are using port 80.\n2- run application with port 80 :", "For externally visible server, where you don't use apache or other web server you just type ", "So it's throwing up that error message because you have apache2 running on port 80.", "If you use the following to change the port or host:", "A convinient way is using the package python-dotenv:\nIt reads out a .flaskenv file where you can store environment variables for flask."]}, {"question": "I have a large spreadsheet file (.xlsx) that I'm processing using python pandas. It happens that I need data from two tabs (sheets) in that large file. One of the tabs has a ton of data and the other is just a few square cells.", "answers": ["Try pd.ExcelFile:", "There are a few options:", "You can also use the index for the sheet:", "You could also specify the sheet name as a parameter:", "Option 1"]}, {"question": "I am looking over this website but just can't seem to figure out how to do this as it's not working. I need to check if the current site user is logged in (authenticated), and am trying:", "answers": ["Update for Django 1.10+:", "Django 1.10+", "Following block should work: ", "In your view:", "If you want to check for authenticated users in your template then:"]}, {"question": "The following code gives the error UnboundLocalError: local variable 'Var1' referenced before assignment:", "answers": ["This is because, even though Var1 exists, you're also using an assignment statement on the name Var1 inside of the function (Var1 -= 1 at the bottom line). Naturally, this creates a variable inside the function's scope called Var1 (truthfully, a -= or += will only update (reassign) an existing variable, but for reasons unknown (likely consistency in this context), Python treats it as an assignment). The Python interpreter sees this at module load time and decides (correctly so) that the global scope's Var1 should not be used inside the local scope, which leads to a problem when you try to reference the variable before it is locally assigned.", "If you set the value of a variable inside the function, python understands it as creating a local variable with that name. This local variable masks the global variable.", "You can fix this by passing parameters rather than relying on Globals", "I don't like this behavior, but this is how Python works. The question has already been answered by others, but for completeness, let me point out that Python 2 has more such quirks.", "Why not simply return your calculated value and let the caller modify the global variable. It's not a good idea to manipulate a global variable within a function, as below:"]}, {"question": "When I try to install the Cryptography package for Python through either pip install cryptography or by downloading the package from their site and running python setup.py, I get the following error:", "answers": ["I had a similar issue, and found I was simply missing a dependency (libssl-dev, for me). As referenced in https://cryptography.io/en/latest/installation/, ensure that all dependencies are met:", "This is a condensed version of the information found on cryptography's installation docs page. Consult that page for the latest details.", "For those of you running OS X, here is what worked for me:", "This worked for me in El Capitan", "This solved the problem for me (Ubuntu 16.04):"]}, {"question": "I have an existing dataframe which I need to add an additional column to which will contain the same value for every row.", "answers": ["df['Name']='abc' will add the new column and set all rows to that value:", "You can use insert to specify where you want to new column to be.  In this case, I use 0 to place the new column at the left.", "Summing up what the others have suggested, and adding a third way", "Single liner works", "One Line did the job for me."]}, {"question": "Given the Python function:", "answers": ["Take a look at the inspect module - this will do the inspection of the various code object properties for you.", "In CPython, the number of arguments is", "The Python 3 version is:", "In a decorator method, you can list arguments of the original method in this way:", "I think what you're looking for is the locals method - "]}, {"question": "I am using pyplot. I have 4 subplots. How to set a single, main title above all the subplots? title() sets it above the last subplot.", "answers": ["Use pyplot.suptitle or Figure.suptitle:", "A few points I find useful when applying this to my own plots:", "If your subplots also have titles, you may need to adjust the main title size:"]}, {"question": "Is there a way of reading one single character from the user input? For instance, they press one key at the terminal and it is returned (sort of like getch()). I know there's a function in Windows for it, but I'd like something that is cross-platform.", "answers": ["Here's a link to the ActiveState Recipes site that says how you can read a single character in Windows, Linux and OSX:", "will basically read 1 byte from STDIN.", "The ActiveState recipe quoted verbatim in two answers is over-engineered. It can be boiled down to this:", "Also worth trying is the readchar library, which is in part based on the ActiveState recipe mentioned in other answers.", "An alternative method:"]}, {"question": "Suppose I have a function:", "answers": ["You're looking for Optional.", "You could just use simillar to OR operator ( the vertical line | ):"]}, {"question": "I am new to Django and pretty new to Ajax. I am working on a project where I need to integrate the two. I believe that I understand the principles behind them both, but have not found a good explanation of the two together. ", "answers": ["Even though this isn't entirely in the SO spirit, I love this question, because I had the same trouble when I started, so I'll give you a quick guide. Obviously you don't understand the principles behind them (don't take it as an offense, but if you did you wouldn't be asking). ", "Further from yuvi's excellent answer, I would like to add a small specific example on how to deal with this within Django (beyond any js that will be used). The example uses AjaxableResponseMixin and assumes an Author model.", "I am writing this because the accepted answer is pretty old, it needs a refresher. ", "Simple and Nice. You don't have to change your views. Bjax handles all your links. Check this out:\nBjax", "AJAX is the best way to do asynchronous tasks. Making asynchronous calls is something common in use in any website building. We will take a short example to learn how we can implement AJAX in Django. We need to use jQuery so as to write less javascript."]}, {"question": "I've come across links that say Python is a strongly typed language.", "answers": ["Python is strongly, dynamically typed.", "There are some important issues that I think all of the existing answers have missed.", "Python typing is Dynamic so you can change a string variable to an int (in a Static language you can't)", "You are confusing 'strongly typed' with 'dynamically typed'.", "According to this wiki Python article Python is both dynamically and strongly typed (provides a good explanation too)."]}, {"question": "\nWant to improve this question? Update the question so it can be answered with facts and citations by editing this post.\r\n                ", "answers": ["Found this page on their github repo, I'll just copy-paste the content here.", "It depends on what you want to do.", "The pickle Python library implements binary protocols for serializing and de-serializing a Python object.", "A common PyTorch convention is to save models using either a .pt or .pth file extension.", "If you want to save the model and wants to resume the training later:"]}, {"question": "I have a dataframe with ~300K rows and ~40 columns.\nI want to find out if any rows contain null values - and put these 'null'-rows into a separate dataframe so that I could explore them easily.", "answers": ["[Updated to adapt to modern pandas, which has isnull as a method of DataFrames..]", "then when ever you need it  you can type:", "If you want to filter rows by a certain number of columns with null values, you may use this:", "Four fewer characters, but 2 more ms", ".any() and .all() are great for the extreme cases, but not when you're looking for a specific number of null values. Here's an extremely simple way to do what I believe you're asking. It's pretty verbose, but functional."]}, {"question": "I've seen there are actually two (maybe more) ways to concatenate lists in Python:\nOne way is to use the extend() method:", "answers": ["The only difference on a bytecode level is that the .extend way involves a function call, which is slightly more expensive in Python than the INPLACE_ADD.", "You can't use += for non-local variable (variable which is not local for function and also not global)", "You can chain function calls, but you can't += a function call directly:", "I would say that there is some difference when it comes with numpy (I just saw that the question ask about concatenating two lists, not numpy array, but since it might be a issue for beginner, such as me, I hope this can help someone who seek the solution to this post), for ex.", "extend() works with any iterable*, += works with some but can get funky. "]}, {"question": "From pip install --help:", "answers": ["pip defaults to installing Python packages to a system directory (such as /usr/local/lib/python3.4). This requires root access.", "--user installs in site.USER_SITE.", "Just a warning: ", "Other answers mention site.USER_SITE as where Python packages get placed. If you're looking for binaries, these go in {site.USER_BASE}/bin.", "pip <command> --user changes the scope of the current pip command to work on the current user account's local python package install location, rather than the system-wide package install location, which is the default."]}, {"question": "I have a pandas Series object containing boolean values. How can I get a series containing the logical NOT of each value?", "answers": ["To invert a boolean Series, use ~s:", "@unutbu's answer is spot on, just wanted to add a warning that your mask needs to be dtype bool, not 'object'.  Ie your mask can't have ever had any nan's. See here - even if your mask is nan-free now, it will remain 'object' type.", "I just give it a shot:", "You can also use numpy.invert:", "In support to the excellent answers here, and for future convenience, there may be a case where you want to flip the truth values in the columns and have other values remain the same (nan values for instance)"]}, {"question": "Python works on multiple platforms and can be used for desktop and web applications, thus I conclude that there is some way to compile it into an executable for Mac, Windows and Linux.", "answers": ["First you will need some GUI library with Python bindings and then (if you want) some program that will convert your python scripts into standalone executables.", "Another system (not mentioned in the accepted answer yet) is PyInstaller, which worked for a PyQt project of mine when py2exe would not. I found it easier to use.", "An alternative tool to py2exe is bbfreeze which generates executables for windows and linux. It's newer than py2exe and handles eggs quite well. I've found it magically works better without configuration for a wide variety of applications.", "There's also PyGTK, which is basically a Python wrapper for the Gnome Toolkit.  I've found it easier to wrap my mind around than Tkinter, coming from pretty much no knowledge of GUI programming previously.  It works pretty well and has some good tutorials.  Unfortunately there isn't an installer for Python 2.6 for Windows yet, and may not be for a while.", "Since python is installed on nearly every non-Windows OS by default now, the only thing you really need to make sure of is that all of the non-standard libraries you use are installed."]}, {"question": "I am trying to find a simple way of getting a count of the number of elements in a list:", "answers": ["len()", "just do len(MyList)", "len(myList) should do it.", "it will count the element in the list, tuple and string and dictionary,\neg.", "To find count of unique elements of list use the combination of len() and set()."]}, {"question": "I am having trouble with some of pandas functionalities. How do I check what is my installation version?", "answers": ["Check pandas.__version__:", "Run:", "Simplest Solution", "Run ", "Windows "]}, {"question": "I want to use input from a user as a regex pattern for a search over some text.  It works, but how I can handle cases where user puts characters that have meaning in regex?", "answers": ["Use the re.escape() function for this:", "You can use re.escape():", "Unfortunately, re.escape() is not suited for the replacement string:", "Please give a try:"]}, {"question": "I am using Python-2.6 CGI scripts but found this error in server log while doing json.dumps(),", "answers": ["I switched this simply by defining a different codec package in the read_csv() command:", "Try the below code snippet:", "The error is because there is some non-ascii character in the dictionary and it can't be encoded/decoded. One simple way to avoid this error is to encode such strings with encode() function as follows (if a is the string with non-ascii character):", "Your string has a non ascii character encoded in it.", "On read csv, I added an encoding method:"]}, {"question": "I am using selenium with python and have downloaded the chromedriver for my windows computer from this site: http://chromedriver.storage.googleapis.com/index.html?path=2.15/ ", "answers": ["I see the discussions still talk about the old way of setting up chromedriver by downloading the binary and configuring the path manually.", "You can test if it actually is in the PATH, if you open a cmd and type in chromedriver (assuming your chromedriver executable is still named like this) and hit Enter. If Starting ChromeDriver 2.15.322448 is appearing, the PATH is set appropriately and there is something else going wrong.", "On Ubuntu:", "For Linux and OSX", "Same situation with pycharm community edition, so, as for cmd, you must restart your ide in order to reload path variables. Restart your ide and it should be fine."]}, {"question": "By debugging information I mean what TensorFlow shows in my terminal about loaded libraries and found devices etc. not Python errors.", "answers": ["You can disable all debugging logs using os.environ :", "2.0 Update (10/8/19)\nSetting TF_CPP_MIN_LOG_LEVEL should still work (see below in v0.12+ update), but there was a reported issue for version 2.0 until 2.3.z fixed in 2.4 and later. If setting TF_CPP_MIN_LOG_LEVEL does not work for you (again, see below), try doing the following to set the log level:", "For compatibility with Tensorflow 2.0, you can use tf.get_logger ", "I have had this problem as well (on tensorflow-0.10.0rc0), but could not fix the excessive nose tests logging problem via the suggested answers.", "As TF_CPP_MIN_LOG_LEVEL didn't work for me you can try:"]}, {"question": "I'm using Python 2 to parse JSON from ASCII encoded text files. ", "answers": ["While there are some good answers here, I ended up using PyYAML to parse my JSON files, since it gives the keys and values as str type strings instead of unicode type. Because JSON is a subset of YAML it works nicely:", "There's no built-in option to make the json module functions return byte strings instead of unicode strings. However, this short and simple recursive function will convert any decoded JSON object from using unicode strings to UTF-8-encoded byte strings:", "[edit]: Updated for Python 2.7 and 3.x compatibility.", "You can use the object_hook parameter for json.loads to pass in a converter. You don't have to do the conversion after the fact. The json module will always pass the object_hook dicts only, and it will recursively pass in nested dicts, so you don't have to recurse into nested dicts yourself. I don't think I would convert unicode strings to numbers like Wells shows. If it's a unicode string, it was quoted as a string in the JSON file, so it is supposed to be a string (or the file is bad).", "That's because json has no difference between string objects and unicode objects. They're all strings in javascript."]}, {"question": "I need to replace all non-ASCII (\\x00-\\x7F) characters with a space. I'm surprised that this is not dead-easy in Python, unless I'm missing something. The following function simply removes all non-ASCII characters:", "answers": ["Your ''.join() expression is filtering, removing anything non-ASCII; you could use a conditional expression instead:", "For you the get the most alike representation of your original string I recommend the unidecode module:", "For character processing, use Unicode strings:", "If the replacement character can be '?' instead of a space, then I'd suggest result = text.encode('ascii', 'replace').decode():", "What about this one?"]}, {"question": "According to http://www.faqs.org/docs/diveintopython/fileinfo_private.html:", "answers": ["In Python, \"privacy\" depends on \"consenting adults'\" levels of agreement - you can't force it (any more than you can in real life;-).  A single leading underscore means you're not supposed to access it \"from the outside\" -- two leading underscores (w/o trailing underscores) carry the message even more forcefully... but, in the end, it still depends on social convention and consensus: Python's introspection is forceful enough that you can't handcuff every other programmer in the world to respect your wishes.", "There may be confusion between class privates and module privates.", "This question was not fully answered, since module privacy is not purely conventional, and since using import may or may not recognize module privacy, depending on how it is used.", "Python allows for private class members with the double underscore prefix.  This technique doesn't work at a module level so I am thinking this is a mistake in Dive Into Python.", "You can add an inner function:"]}, {"question": "I have a pandas DataFrame with 4 columns and I want to create a new DataFrame that only has three of the columns.  This question is similar to: Extracting specific columns from a data frame but for pandas not R.  The following code does not work, raises an error, and is certainly not the pandasnic way to do it. ", "answers": ["There is a way of doing this and it actually looks similar to R", "The easiest way is", "Another simpler way seems to be: ", "columns by index:", "Generic functional form"]}, {"question": "I want to use a new feature of httpie. This feature is in the github repo https://github.com/jkbr/httpie but not in the release on the python package index https://pypi.python.org/pypi/httpie ", "answers": ["You need to use the proper git URL:", "To install Python package from github, you need to clone that repository."]}, {"question": "I'm using the Requests: HTTP for Humans library and I got this weird error and I don't know what is mean.", "answers": ["You need to include the protocol scheme:", "One more reason, maybe your url include some hiden characters, such as '\\n'.", "Fix connection adapter matching to be most-specific first,Miscellaneous small Python 3 text encoding bugs.,.netrc no longer overrides explicit auth.,Mountable Connection Adapters"]}, {"question": "How can I remove some specific elements from a numpy array? Say I have", "answers": ["Use numpy.delete() - returns a new array with sub-arrays along an axis deleted", "There is a numpy built-in function to help with that.", "A Numpy array is immutable, meaning you technically cannot delete an item from it. However, you can construct a new array without the values you don't want, like this:", "To delete by value : ", "Using np.delete is the fastest way to do it, if we know the indices of the elements that we want to remove. However, for completeness, let me add another way of \"removing\" array elements using a boolean mask created with the help of np.isin. This method allows us to remove the elements by specifying them directly or by their indices:"]}, {"question": "I installed the latest version of Python (3.6.4 64-bit) and the latest version of PyCharm (2017.3.3 64-bit). Then I installed some modules in PyCharm (Numpy, Pandas, etc), but when I tried installing Tensorflow it didn't install, and I got the error message: ", "answers": ["As of October 2020:", "There are a few important rules to install Tensorflow:", "I installed it successfully by pip install https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.8.0-py3-none-any.whl", "if you are using anaconda, python 3.7 is installed by default, so you have to downgrade it to 3.6:", "I am giving  it for Windows"]}, {"question": "Consider this - a base class A, class B inheriting from A, class C inheriting from B. What is a generic way to call a parent class initialiser in an initialiser? If this still sounds too vague, here's some code.", "answers": ["Python 3 includes an improved super() which allows use like this:", "The way you are doing it is indeed the recommended one (for Python 2.x). ", "You can simply write :  "]}, {"question": "Does anyone know why Python's list.append function is not called list.push given that there's already a list.pop that removes and returns the last element (that indexed at -1) and list.append semantic is consistent with that use?", "answers": ["Because \"append\" existed long before \"pop\" was thought of. Python 0.9.1 supported list.append in early 1991. By comparison, here's part of a discussion on comp.lang.python about adding pop in 1997. Guido wrote:", "Because it appends; it doesn't push. \"Appending\" adds to the end of a list, \"pushing\" adds to the front.", "Because it appends an element to a list? Push is usually used when referring to stacks.", "Because \"append\" intuitively means \"add at the end of the list\". If it was called \"push\", then it would be unclear whether we're adding stuff at the tail or at head of the list.", "Not an official answer by any means (just a guess based on using the language), but Python allows you to use lists as stacks (e.g., section 5.1.1 of the tutorial). However, a list is still first of all a list, so the operations that are common to both use list terms (i.e., append) rather than stack terms (i.e., push). Since a pop operation isn't that common in lists (though 'removeLast' could have been used), they defined a pop() but not a push()."]}, {"question": "How do I implement Python equivalent of this C# code ?", "answers": ["As mentioned by other here:", "Using the abc module for abstract base classes seems to do the trick.", "Implementing interfaces with abstract base classes is much simpler in modern Python 3 and they serve a purpose as an interface contract for plug-in extensions.", "interface supports Python 2.7 and Python 3.4+.", "There are third-party implementations of interfaces for Python (most popular is Zope's, also used in Twisted), but more commonly Python coders prefer to use the richer concept known as an \"Abstract Base Class\" (ABC), which combines an interface with the possibility of having some implementation aspects there too.  ABCs are particularly well supported in Python 2.6 and later, see the PEP, but even in earlier versions of Python they're normally seen as \"the way to go\" -- just define a class some of whose methods raise NotImplementedError so that subclasses will be on notice that they'd better override those methods!-)"]}, {"question": "\nWant to improve this question? Update the question so it can be answered with facts and citations by editing this post.\r\n                ", "answers": ["A Python file is called a \"module\" and it's one way to organize your software so that it makes \"sense\".  Another is a directory, called a \"package\".", "Since there is no artificial limit, it really depends on what's comprehensible.  If you have a bunch of fairly short, simple classes that are logically grouped together, toss in a bunch of 'em.  If you have big, complex classes or classes that don't make sense as a group, go one file per class.  Or pick something in between.  Refactor as things change.", "I happen to like the Java model for the following reason. Placing each class in an individual file promotes reuse by making classes easier to see when browsing the source code. If you have a bunch of classes grouped into a single file, it may not be obvious to other developers that there are classes there that can be reused simply by browsing the project's directory structure. Thus, if you think that your class can possibly be reused, I would put it in its own file.", "It entirely depends on how big the project is, how long the classes are, if they will be used from other files and so on.", "I find myself splitting things up when I get annoyed with the bigness of files and when the desirable structure of relatedness starts to emerge naturally.  Often these two stages seem to coincide."]}, {"question": "How to do this in pandas:", "answers": ["I usually do this using zip:", "Building off of user1827356 's answer, you can do the assignment in one pass using df.merge:", "In 2020, I use apply() with argument result_type='expand'", "This is what I've done in the past", "This is the correct and easiest way to accomplish this for 95% of use cases:"]}, {"question": "I am trying to use pip behind a proxy at work.", "answers": ["With Ubuntu I could not get the proxy option to work as advertised \u2013 so following command did not work:", "Under Windows dont forget to set", "To setup CNTLM for windows, follow this article. For Ubuntu, read my blog post. ", "It was not working for me. I had to use https at work:", "You can continue to use pip over HTTPS by adding your corporation's root certificate to the cacert.pem file in your site-packages/pip folder. Then configure pip to use your proxy by adding the following lines to ~/pip/pip.conf (or ~\\pip\\pip.ini if you're on Windows):"]}, {"question": "Assume I have a program that uses argparse to process command line arguments/options. The following will print the 'help' message:", "answers": ["This answer comes from Steven Bethard on Google groups. I'm reposting it here to make it easier for people without a Google account to access.", "Instead of writing a class, a try/except can be used instead", "With argparse you could use ArgumentParser.print_usage():", "If you associate default functions for (sub)parsers, as is mentioned under add_subparsers, you can simply add it as the default action:", "If you have arguments that must be specified for the script to run - use the required parameter for ArgumentParser as shown below:-"]}, {"question": "I need to read a large file, line by line. Lets say that file has more than 5GB and I need to read each line, but obviously I do not want to use readlines() because it will create a very large list in the memory.", "answers": ["I provided this answer because Keith's, while succinct, doesn't close the file explicitly", "All you need to do is use the file object as an iterator.", "An old school approach:", "You are better off using an iterator instead.\nRelevant:  fileinput \u2014 Iterate over lines from multiple input streams.", "Please try this:"]}, {"question": "I have some Python code that have inconsistent indentation. There is a lot of mixture of tabs and spaces to make the matter even worse, and even space indentation is not preserved.", "answers": ["Use the reindent.py script that you find in the Tools/scripts/ directory of your Python installation:", "I would reach for autopep8 to do this:", "If you're using Vim, see :h retab.", "Use autopep8", "Using Vim, it shouldn't be more involved than hitting Esc, and then typing..."]}, {"question": "I have the following soup:", "answers": ["You can use find_all in the following way to find every a element that has an href attribute, and print each one:"]}, {"question": "I would like to create a copy of an object. I want the new object to possess all properties of the old object (values of the fields). But I want to have independent objects. So, if I change values of the fields of the new object, the old object should not be affected by that.", "answers": ["To get a fully independent copy of an object you can use the copy.deepcopy() function.", "So, if I change values of the fields of the new object, the old object should not be affected by that.", "Shallow copy with copy.copy()", "I believe the following should work with many well-behaved classed in Python:"]}, {"question": "I have the following DataFrame from a SQL query:", "answers": ["One way to convert to string is to use astype:", "If you need to convert ALL columns to strings, you can simply use:", "Prior to pandas 1.0 (well, 0.25 actually) this was the defacto way of declaring a Series/column as as string:", "Here's the other one, particularly useful to convert the multiple columns to string instead of just single column:", "There are four ways to convert columns to string"]}, {"question": "I'm bit confused about how the global variables work. I have a large project, with around 50 files, and I need to define global variables for all those files.", "answers": ["The problem is you defined myList from main.py, but subfile.py needs to use it. Here is a clean way to solve this problem: move all globals to a file, I call this file settings.py. This file is responsible for defining globals and initializing them:", "See Python's document on sharing global variables across modules:", "You can think of Python global variables as \"module\" variables - and as such they are much more useful than the traditional \"global variables\" from C.", "Using from your_file import * should fix your problems. It defines everything so that it is globally available (with the exception of local variables in the imports of course).", "Hai Vu answer works great, just one comment: "]}, {"question": "I've been trying to round long float numbers like:", "answers": ["TL;DR:", "Use round(x, y). It will round up your number up to your desired decimal place.", "round(value,significantDigit) is the ordinary solution, however this does not operate as one would expect from a math perspective when round values ending in 5.  If the 5 is in the digit just after the one you're rounded to, these values are only sometimes rounded up as expected (i.e. 8.005 rounding to two decimal digits gives 8.01).  For certain values due to the quirks of floating point math, they are rounded down instead!", "For positives, try", "Isn't just Python doing round half to even, as prescribed by IEEE 754?"]}, {"question": "Here is my code:", "answers": ["You are trying to decode an object that is already decoded. You have a str, there is no need to decode from UTF-8 anymore.", "If you land here using jwt authentication after the PyJWT v2.0.0 release (22/12/2020), you might want to freeze your version of PyJWT to the previous release in your requirements.txt file.", "Begining with Python 3, all strings are unicode objects.", "Use it by this Method:", "I'm not familiar with the library, but if your problem is that you don't want a byte array, one easy way is to specify an encoding type straight in a cast:"]}, {"question": "What is the name of the method to override the [] operator (subscript notation) for a class in Python?", "answers": ["You need to use the __getitem__ method.", "To fully overload it you also need to implement the __setitem__and __delitem__ methods.", "You are looking for the __getitem__ method. See http://docs.python.org/reference/datamodel.html, section 3.4.6"]}, {"question": "I have a a dictionary mapping keywords to the repetition of the keyword, but I only want a list of distinct words so I wanted to count the number of keywords. Is there a way to count the number of keywords or is there another way I should look for distinct words?", "answers": ["or just", "The number of distinct words (i.e. count of entries in the dictionary) can be found using the len() function.", "Calling len() directly on your dictionary works, and is faster than building an iterator, d.keys(), and calling len() on it, but the speed of either will negligible in comparison to whatever else your program is doing.", "If the question is about counting the number of keywords then would recommend something like", "Some modifications were made on posted answer UnderWaterKremlin to make it python3 proof. A surprising result below as answer."]}, {"question": "In Python, is it possible to have multiple except statements for one try statement? Such as :", "answers": ["Yes, it is possible."]}, {"question": "Right now I have a central module in a framework that spawns multiple processes using the Python 2.6 multiprocessing module. Because it uses multiprocessing, there is module-level multiprocessing-aware log, LOG = multiprocessing.get_logger(). Per the docs, this logger has process-shared locks so that you don't garble things up in sys.stderr (or whatever filehandle) by having multiple processes writing to it simultaneously.", "answers": ["I just now wrote a log handler of my own that just feeds everything to the parent process via a pipe.  I've only been testing it for ten minutes but it seems to work pretty well. ", "The only way to deal with this non-intrusively is to:", "QueueHandler is native in Python 3.2+, and does exactly this. It is easily replicated in previous versions.", "Below is another solution with a focus on simplicity for anyone else (like me) who get here from Google.  Logging should be easy!  Only for 3.2 or higher.", "Yet another alternative might be the various non-file-based logging handlers in the logging package: "]}, {"question": "When comparing floats to integers, some pairs of values take much longer to be evaluated than other values of a similar magnitude.", "answers": ["A comment in the Python source code for float objects acknowledges that:", "Using gmpy2 with arbitrary precision floats and integers it is possible to get more uniform comparison performance:"]}, {"question": "I want to loop through a Python list and process 2 list items at a time. Something like this in another language:", "answers": ["You can use for in range with a step size of 2:", "You can also use this syntax (L[start:stop:step]):", "The simplest in my opinion is just this:", "If you're using Python 2.6 or newer you can use the grouper recipe from the itertools module:", "Kinda dirty but it works."]}, {"question": "In C#, I can say x ?? \"\", which will give me x if x is not null, and the empty string if x is null. I've found it useful for working with databases. ", "answers": ["You could use the or operator:", "try the above.", "You can use a conditional expression:", "You've got the ternary syntax x if x else '' - is that what you're after?"]}, {"question": "I am new to django-1.6. When I run the django server with DEBUG = True, it's running perfectly. But when I change DEBUG to False in the settings file, then the server stopped and it gives the following error on the command prompt:", "answers": ["The ALLOWED_HOSTS list should contain fully qualified host names, not urls. Leave out the port and the protocol. If you are using 127.0.0.1, I would add localhost to the list too:", "I had the same problem and none of the answers resolved my problem. For resolving situations like this, it's best to enable logging by adding the following config to settings.py temporarily.", "For me, I got this error by not setting USE_X_FORWARDED_HOST to true.  From the docs: ", "I had the same problem and I fixed it by setting ALLOWED_HOSTS = ['*'] and to solve the problem with the static images you have to change the virtual paths in the environment configuration like this:", "in the settings.py of your project, check line 28, where is the Allows Host"]}, {"question": "When selecting a sub dataframe from a parent dataframe, I noticed that some programmers make a copy of the data frame using the .copy() method. For example,", "answers": ["This expands on Paul's answer. In Pandas, indexing a DataFrame returns a reference to the initial DataFrame. Thus, changing the subset will change the initial DataFrame. Thus, you'd want to use the copy if you want to make sure the initial DataFrame shouldn't change. Consider the following code:", "Because if you don't make a copy then the indices can still be manipulated elsewhere even if you assign the dataFrame to a different name.", "It's necessary to mention that returning copy or view depends on kind of indexing.", "The primary purpose is to avoid chained indexing and eliminate the SettingWithCopyWarning.", "Assumed you have data frame as below"]}, {"question": "Like in:", "answers": ["You're right, see 3.1.3. Unicode Strings.", "The u in u'Some String' means that your string is a Unicode string.", "My guess is that it indicates \"Unicode\", is it correct?", "I came here because I had funny-char-syndrome on my requests output. I thought response.text would give me a properly decoded string, but in the output I found funny double-chars where German umlauts should have been.", "All strings meant for humans should use u\"\"."]}, {"question": "I'm making a website where users can log on and download files, using the Flask micro-framework (based on Werkzeug) which uses Python (2.6 in my case).", "answers": ["See the documentation on how to access the Request object and then get from this same Request object, the attribute remote_addr.", "Proxies can make this a little tricky, make sure to check out ProxyFix (Flask docs) if you are using one. Take a look at request.environ in your particular environment. With nginx I will sometimes do something like this:", "Actually, what you will find is that when simply getting the following will get you the server's address: ", "The user's IP address can be retrieved using the following snippet:", "The below code always gives the public IP of the client (and not a private IP behind a proxy)."]}, {"question": "I have an Express Node.js application, but I also have a machine learning algorithm to use in Python. Is there a way I can call Python functions from my Node.js application to make use of the power of machine learning libraries?", "answers": ["Easiest way I know of is to use \"child_process\" package which comes packaged with node.", "Example for people who are from Python background and want to integrate their machine learning model in the Node.js application:", "The python-shell module by extrabacon is a simple way to run Python scripts from Node.js with basic, but efficient inter-process communication and better error handling.", "You can now use RPC libraries that support Python and Javascript such as zerorpc", "Most of previous answers call the success of the promise in the on(\"data\"), it is not the proper way to do it because if you receive a lot of data you will only get the first part. Instead you have to do it on the end event."]}, {"question": "The community reviewed whether to reopen this question 6 months ago and left it closed:", "answers": ["To get a NumPy array, you should use the values attribute:", "You can use df.index to access the index object and then get the values in a list using df.index.tolist(). Similarly, you can use df['col'].tolist() for Series.", "From v0.24.0 onwards, we will have two brand spanking new, preferred methods for obtaining NumPy arrays from Index, Series, and DataFrame objects: they are to_numpy(), and .array. Regarding usage, the docs mention:", "If you are dealing with a multi-index dataframe, you may be interested in extracting only the column of one name of the multi-index. You can do this as", "Since pandas v0.13 you can also use get_values:"]}, {"question": "How can I find the row for which the value of a specific column is maximal?", "answers": ["Use the pandas idxmax function. It's straightforward:", "You might also try idxmax:", "Both above answers would only return one index if there are multiple rows that take the maximum value. If you want all the rows, there does not seem to have a function.\nBut it is not hard to do. Below is an example for Series; the same can be done for DataFrame:", "argmax() would provide the index corresponding to the max value for the columnX. iloc can be used to get the row of the DataFrame df for this index.", "Very simple: we have df as below and we want to print a row with max value in C:"]}, {"question": "I tried searching internet but could not find the meaning of hashable.", "answers": ["From the Python glossary:", "All the answers here have good working explanation of hashable objects in python, but I believe one needs to understand the term Hashing first.", "Anything that is not mutable (mutable means, likely to change) can be hashed. Besides the hash function to look for, if a class has it, by eg. dir(tuple) and looking for the __hash__ method, here are some examples", "In my understanding according to Python glossary, when you create an instance of objects that are hashable, an unchangeable value is also calculated according to the members or values of the instance.\nFor example, that value could then be used as a key in a dictionary as below:", "Hashable = capable of being hashed."]}, {"question": "I'm trying to use scikit-learn's LabelEncoder to encode a pandas DataFrame of string labels. As the dataframe has many (50+) columns, I want to avoid creating a LabelEncoder object for each column; I'd rather just have one big LabelEncoder objects that works across all my columns of data.  ", "answers": ["You can easily do this though,", "As mentioned by larsmans, LabelEncoder() only takes a 1-d array as an argument. That said, it is quite easy to roll your own label encoder that operates on multiple columns of your choosing, and returns a transformed dataframe. My code here is based in part on Zac Stewart's excellent blog post found here.", "Since scikit-learn 0.20 you can use sklearn.compose.ColumnTransformer and sklearn.preprocessing.OneHotEncoder:", "We don't need a LabelEncoder.", "this does not directly answer your question (for which Naputipulu Jon and PriceHardman have fantastic replies)"]}, {"question": "I have a C++/Obj-C background and I am just discovering Python (been writing it for about an hour).\nI am writing a script to recursively read the contents of text files in a folder structure.", "answers": ["Make sure you understand the three return values of os.walk:", "If you are using Python 3.5 or above, you can get this done in 1 line.", "Agree with Dave Webb, os.walk will yield an item for each directory in the tree. Fact is, you just don't have to care about subFolders.", "TL;DR: This is the equivalent to find -type f to go over all files in all folders below and including the current one:", "The pathlib library is really great for working with files.  You can do a recursive glob on a Path object like so."]}, {"question": "I am trying to run a Django management command from cron. I am using virtualenv to keep my project sandboxed.", "answers": ["You should be able to do this by using the python in your virtual environment:", "Running source from a cronfile won't work as cron uses /bin/sh as its default shell, which doesn't support source.  You need to set the SHELL environment variable to be /bin/bash:", "Don't look any further:", "The only correct way to run python cron jobs when using a virtualenv is to activate the environment and then execute the environment's python to run your code.", "Rather than mucking around with virtualenv-specific shebangs, just prepend PATH onto the crontab. "]}, {"question": "I want to send a value for \"User-agent\" while requesting a webpage using Python Requests.  I am not sure is if it is okay to send this as a part of the header, as in the code below:", "answers": ["The user-agent should be specified as a field in the header.", "It's more convenient to use a session, this way you don't have to remember to set headers each time:", "simply you can do it like below:"]}, {"question": "How do you execute raw SQL in SQLAlchemy?", "answers": ["Have you tried:", "SQL Alchemy session objects have their own execute method:", "docs: SQL Expression Language Tutorial - Using Text", "You can get the results of SELECT SQL queries using from_statement() and text() as shown here. You don't have to deal with tuples this way. As an example for a class User having the table name users you can try,", "executes the <sql here> but doesn't commit it unless you're on autocommit mode. So, inserts and updates wouldn't reflect in the database."]}, {"question": "Possible Duplicate: \nWhat is a clean, pythonic way to have multiple constructors in Python?", "answers": ["Unlike Java, you cannot define multiple constructors.  However, you can define a default value if one is not passed.", "If your signatures differ only in the number of arguments, using default arguments is the right way to do it. If you want to be able to pass in different kinds of argument, I would try to avoid the isinstance-based approach mentioned in another answer, and instead use keyword arguments.", "For the example you gave, use default values:", "The easiest way is through keyword arguments:", "The answer by Jack M. is correct. Do it this way:"]}, {"question": "I'm having a problem with deleting empty directories. Here is my code:", "answers": ["Try shutil.rmtree:", "The default behavior of os.walk() is to walk from root to leaf. Set topdown=False in os.walk() to walk from leaf to root.", "Here's my pure pathlib recursive directory unlinker:", "Try rmtree() in shutil from the Python standard library", "better to use absolute path and import only the rmtree function\nfrom shutil import rmtree \nas this is a large package the above line will only import the required function."]}, {"question": "What is the pythonic way of writing the following code?", "answers": ["Though not widely known, str.endswith also accepts a tuple. You don't need to loop.", "Just use:", "There is two ways: regular expressions and string (str) methods. ", "another way which can return the list of matching strings is ", "I just came across this, while looking for something else. "]}, {"question": "I am confused about the method view() in the following code snippet.", "answers": ["The view function is meant to reshape the tensor. ", "Let's do some examples, from simpler to more difficult.", "view() reshapes a tensor by 'stretching' or 'squeezing' its elements into the shape you specify:", "Simply put, torch.Tensor.view() which is inspired by numpy.ndarray.reshape() or numpy.reshape(), creates a new view of the tensor, as long as the new shape is compatible with the shape of the original tensor. ", "I figured it out that x.view(-1, 16 * 5 * 5) is equivalent to x.flatten(1), where the parameter 1 indicates the flatten process starts from the 1st dimension(not flattening the 'sample' dimension)\nAs you can see, the latter usage is semantically more clear and easier to use, so I prefer flatten()."]}, {"question": "What is the best way to represent and solve a maze given an image?", "answers": ["Here is a solution.", "This solution is written in Python. Thanks Mikhail for the pointers on the image preparation.", "I tried myself implementing A-Star search for this problem. Followed closely the implementation by Joseph Kern for the framework and the algorithm pseudocode given here:", "Tree search is too much. The maze is inherently separable along the solution path(s).", "Uses a queue for a threshold continuous fill. Pushes the pixel left of the entrance onto the queue and then starts the loop. If a queued pixel is dark enough, it's colored light gray (above threshold), and all the neighbors are pushed onto the queue."]}, {"question": "I'm trying to display a grayscale image using matplotlib.pyplot.imshow().  My problem is that the grayscale image is displayed as a colormap.  I need the grayscale because I want to draw on top of the image with color.", "answers": ["The following code will load an image from a file image.png and will display it as grayscale.", "Try to use a grayscale colormap?", "import matplotlib.pyplot as plt", "I would use the get_cmap method. Ex.:", "@unutbu's answer is quite close to the right answer."]}, {"question": "I have a generator that generates a series, for example:", "answers": ["g.next() has been renamed to g.__next__(). The reason for this is consistency: special methods like __init__() and __del__() all have double underscores (or \"dunder\" in the current vernacular), and .next() was one of the few exceptions to that rule. This was fixed in Python 3.0. [*]", "Try:", "If your code must run under Python2 and Python3, use the 2to3 six library like this:"]}, {"question": "I'd like to extract the text from an HTML file using Python.  I want essentially the same output I would get if I copied the text from a browser and pasted it into notepad.  ", "answers": ["The best piece of code I found for extracting text without getting javascript or not wanted things :", "html2text is a Python program that does a pretty good job at this.", "NOTE: NTLK no longer supports clean_html function", "Found myself facing just the same problem today. I wrote a very simple HTML parser to strip incoming content of all markups, returning the remaining text with only a minimum of formatting.", "I know there are a lot of answers already, but the most elegent and pythonic solution I have found is described, in part, here."]}, {"question": "I need a working approach of getting all classes that are inherited from a base class in Python.", "answers": ["New-style classes (i.e. subclassed from object, which is the default in Python 3) have a __subclasses__ method which returns the subclasses:", "If you just want direct subclasses then .__subclasses__() works fine. If you want all subclasses, subclasses of subclasses, and so on, you'll need a function to do that for you.", "The simplest solution in general form:", "As other answer mentioned you can check the __subclasses__ attribute to get the list of subclasses, since python 3.6 you can modify this attribute creation by overriding the __init_subclass__ method.", "Note: I see that someone (not @unutbu) changed the referenced answer so that it no longer uses vars()['Foo'] \u2014 so the primary point of my post no longer applies."]}, {"question": "https://github.com/affinelayer/pix2pix-tensorflow/tree/master/tools", "answers": ["Python tries to convert a byte-array (a bytes which it assumes to be a utf-8-encoded string) to a unicode string (str).  This process of course is a decoding according to utf-8 rules.  When it tries this, it encounters a byte sequence which is not allowed in utf-8-encoded strings (namely this 0xff at position 0).", "Use this solution it will strip out (ignore) the characters and return the string without them. Only use this if your need is to strip them not convert them.", "Use encoding format ISO-8859-1 to solve the issue.", "Had an issue similar to this, Ended up using UTF-16 to decode. my code is below.", "I've come across this thread when suffering the same error, after doing some research I can confirm, this is an error that happens when you try to decode a UTF-16 file with UTF-8."]}, {"question": "\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\r\n                ", "answers": ["There is PyCharm from JetBrains which supports Django and Google Apps. It looks promising.", "I use Eclipse and a plain vanilla PyDev. There isn't any specific Django functionality. The best I came up with was setting up a run profile to run the development web server.", "I use Vim:", "I use Komodo Edit.  Check out the Open Komodo Edit.", "Sublime"]}, {"question": "I have a generator function like the following:", "answers": ["Create a generator using", "For picking just one element of a generator use break in a for statement, or list(itertools.islice(gen, 1))", "Generator is a function that produces an iterator. Therefore, once you have iterator instance, use next() to fetch the next item from the iterator.\nAs an example, use next() function to fetch the first item, and later use for in to process remaining items:", "You can pick specific items using destructuring, e.g.:", "I don't believe there's a convenient way to retrieve an arbitrary value from a generator.  The generator will provide a next() method to traverse itself, but the full sequence is not produced immediately to save memory.  That's the functional difference between a generator and a list."]}, {"question": "Is it possible to append to an empty data frame that doesn't contain any indices or columns?", "answers": ["That should work:", "And if you want to add a row, you can use a dictionary:", "You can concat the data in this way:", "I tried this way and it works"]}, {"question": "I recently upgrade Django from v1.3.1 to v1.4.", "answers": ["As far as where the templates folder should go, I don't know since Django 1.4 just came out and I haven't looked at it yet. You should probably ask another question on SE to solve that issue.", "To get the folder of a file just use:", "If you are using Python 3.4 or newer, a convenient way to move up multiple directories is pathlib:", "You want exactly this:", "Personally, I'd go for the function approach"]}, {"question": "While using the requests module, is there any way to print the raw HTTP request? ", "answers": ["Since v1.2.3 Requests added the PreparedRequest object. As per the documentation \"it contains the exact bytes that will be sent to the server\".", "Response objects have a .request property which is the original PreparedRequest object that was sent.", "An even better idea is to use the requests_toolbelt library, which can dump out both requests and responses as strings for you to print to the console. It handles all the tricky cases with files and encodings which the above solution does not handle well.", "Note: this answer is outdated. Newer versions of requests  support getting the request content directly, as AntonioHerraizS's answer documents.", "requests supports so called event hooks (as of 2.23 there's actually only response hook). The hook can be used on a request to print full request-response pair's data, including effective URL, headers and bodies, like:"]}, {"question": "What exactly do *args and **kwargs mean?", "answers": ["Putting *args and/or **kwargs as the last items in your function definition\u2019s argument list allows that function to accept an arbitrary number of arguments and/or keyword arguments.", "Also, we use them for managing inheritance.", "Notice the cool thing in S.Lott's comment - you can also call functions with *mylist and **mydict to unpack positional and keyword arguments:", "Another good use for *args and **kwargs: you can define generic \"catch all\" functions, which is great for decorators where you return such a wrapper instead of the original function.", "Just to clarify how to unpack the arguments, and take care of missing arguments etc."]}, {"question": "Python provides different packages (datetime, time, calendar) as can be seen here in order to deal with time. I made a big mistake by using the following to get current GMT time time.mktime(datetime.datetime.utcnow().timetuple())", "answers": ["I would use time.time() to get a timestamp in seconds since the epoch.", "Output:", "Does this help?", "python2 and python3", "Python 3 seconds with microsecond decimal resolution:"]}, {"question": "I'm struggling to understand exactly how einsum works. I've looked at the documentation and a few examples, but it's not seeming to stick.", "answers": ["(Note: this answer is based on a short blog post about einsum I wrote a while ago.)", "Grasping the idea of numpy.einsum() is very easy if you understand it intuitively. As an example, let's start with a simple description involving matrix multiplication.", "When reading einsum equations, I've found it the most helpful to just be able to\nmentally boil them down to their imperative versions.", "I found NumPy: The tricks of the trade (Part II) instructive", "Lets make 2 arrays, with different, but compatible dimensions to highlight their interplay"]}, {"question": "I am trying to save plots I make using matplotlib; however, the images are saving blank.", "answers": ["First, what happens when T0 is not None? I would test that, then I would adjust the values I pass to plt.subplot(); maybe try values 131, 132, and 133, or values that depend whether or not T0 exists.", "plt.show() should come after plt.savefig()", "change the order of the functions fixed the problem for me:", "Calling savefig before show() worked for me.", "let's me give a more detail example:"]}, {"question": "\nWant to improve this question? Update the question so it can be answered with facts and citations by editing this post.\r\n                ", "answers": ["Github has a great boilerplate .gitignore", "When using buildout I have following in .gitignore (along with *.pyo and *.pyc):", "Covers most of the general stuff -", "local_settings.py, for django projects.", "One question is if you also want to use git for the deploment of your projects. If so you probably would like to exclude your local sqlite file from the repository, same probably applies to file uploads (mostly in your media folder). (I'm talking about django now, since your question is also tagged with django)"]}, {"question": "If I add a subtitle to my matplotlib figure it gets overlaid by the subplot's titles. Does anybody know how to easily take care of that? I tried the tight_layout() function, but it only makes things worse.", "answers": ["You can adjust the subplot geometry in the very tight_layout call as follows:", "You could manually adjust the spacing using plt.subplots_adjust(top=0.85):", "One thing you could change in your code very easily is the fontsize you are using for the titles. However, I am going to assume that you don't just want to do that!", "An alternative and simple to use solution is to adjust the coordinates of the suptitle text in the figure using the y argument in the call of suptitle (see the docs):", "Tight layout doesn't work with suptitle, but constrained_layout does. See this question Improve subplot size/spacing with many subplots in matplotlib"]}, {"question": "While searching through a Python project, I found a few lines commented with # noqa.", "answers": ["Adding # noqa to a line indicates that the linter (a program that automatically checks code quality) should not check this line. Any warnings that code may have generated will be ignored.", "It's generally referred in Python Programming to ignore the PEP8 warnings.", "You know what? Even Guido van Rossum (the creator of Python) asked this question before :D", "Came here after finding a # noqa directive in a library that I was working with. Having never heard of it, I naturally arrived here after searching on Google. The answers provided here are adequate but I wanted to provide some further elaboration for those that may be curious (I certainly was)"]}, {"question": "How can I set the y axis range of the second subplot to e.g. [0,1000] ?\nThe FFT plot of my data (a column in a text file) results in a (inf.?) spike so that the actual data is not visible.", "answers": ["You have pylab.ylim:", "Using axes objects is a great approach for this. It helps if you want to interact with multiple figures and sub-plots. To add and manipulate the axes objects directly:", "Sometimes you really want to set the axes limits before you plot the data.  In that case, you can set the \"autoscaling\" feature of the Axes or AxesSubplot object.  The functions of interest are set_autoscale_on, set_autoscalex_on, and set_autoscaley_on.", "If you know the exact axis you want, then", "If you have multiple subplots, i.e."]}, {"question": "I have been programming in python for about two years; mostly data stuff (pandas, mpl, numpy), but also automation scripts and small web apps.  I'm trying to become a better programmer and increase my python knowledge and one of the things that bothers me is that I have never used a class (outside of copying random flask code for small web apps).  I generally understand what they are, but I can't seem to wrap my head around why I would need them over a simple function.  ", "answers": ["Classes are the pillar of Object Oriented Programming. OOP is highly concerned with code organization, reusability, and encapsulation.", "Whenever you need to maintain a state of your functions and it cannot be accomplished with generators (functions which yield rather than return).  Generators maintain their own state.", "I think you do it right. Classes are reasonable when you need to simulate some business logic or difficult real-life processes with difficult relations.\nAs example:", "A class defines a real world entity. If you are working on something that exists individually and has its own logic that is separate from others, you should create a class for it. For example, a class that encapsulates database connectivity.", "dantiston gives a great answer on why OOP can be useful. However, it is worth noting that OOP is not necessary a better choice most cases it is used. OOP has the advantage of combining data and methods together. In terms of application, I would say that use OOP only if all the functions/methods are dealing and only dealing with a particular set of data and nothing else."]}]