[{"question": "Reading the changes in Python 3.1, I found something... unexpected:", "answers": ["Named tuples are basically easy-to-create, lightweight object types.  Named tuple instances can be referenced using object-like variable dereferencing or the standard tuple syntax.  They can be used similarly to struct or other common record types, except that they are immutable.  They were added in Python 2.6 and Python 3.0, although there is a recipe for implementation in Python 2.4.", "A named tuple is a tuple."]}, {"question": "What is the difference between old style and new style classes in Python?  When should I use one or the other?", "answers": ["From New-style and classic classes:", "Declaration-wise:"]}, {"question": "Should I put the shebang in my Python scripts? In what form?", "answers": ["The shebang line in any script determines the script's ability to be executed like a standalone executable without typing python beforehand in the terminal or when double clicking it in a file manager (when configured properly). It isn't necessary but generally put there so when someone sees the file opened in an editor, they immediately know what they're looking at. However, which shebang line you use is important.", "It's really just a matter of taste. Adding the shebang means people can invoke the script directly if they want (assuming it's marked as executable); omitting it just means python has to be invoked manually."]}, {"question": "How can I print the error/exception in my except: block?", "answers": ["For Python 2.6 and later and Python 3.x:", "The traceback module provides methods for formatting and printing exceptions and their tracebacks, e.g. this would print exception like the default handler does:"]}, {"question": "I need to get the location of the home directory of the current logged-on user. Currently, I've been using the following on Linux:", "answers": ["You want to use os.path.expanduser.\nThis will ensure it works on all platforms:", "I found that pathlib module also supports this."]}, {"question": "The community reviewed whether to reopen this question last month and left it closed:", "answers": ["If you need to do this, do", "All proposed answers so far seem to miss the fact that a double (floats in python are actually doubles) can also be an integer (if it has nothing after the decimal point).  I use the built-in is_integer() method on doubles to check this."]}, {"question": "Let\u2019s say I have the following Pandas dataframe:", "answers": ["You can use the isin method:", "You can use the method query:"]}, {"question": "I wonder what is better to do:", "answers": ["in is definitely more pythonic.", "in wins hands-down, not just in elegance (and not being deprecated;-) but also in performance, e.g.:"]}, {"question": "How does one write a unittest that fails only if a function doesn't throw an expected exception?", "answers": ["Use TestCase.assertRaises (or TestCase.failUnlessRaises) from the unittest module, for example:", "Since Python 2.7 you can use context manager to get ahold of the actual Exception object thrown:"]}, {"question": "How do I import other files in Python?", "answers": ["Don't just hastily pick the first import strategy that works for you or else you'll have to rewrite the codebase later on when you find it doesn't meet your needs.  ", "importlib was added to Python 3 to programmatically import a module."]}, {"question": "I am looking for minimum and maximum values for integers in python. For eg., in Java, we have Integer.MIN_VALUE and Integer.MAX_VALUE. Is there something like this in python?", "answers": ["In Python 3, this question doesn't apply. The plain int type is unbounded.", "If you just need a number that's bigger than all others, you can use"]}, {"question": "\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\r\n                ", "answers": ["Spreadsheet version"]}, {"question": "What is the purpose of __slots__ in Python \u2014 especially with respect to when I would want to use it, and when not?", "answers": ["The special attribute __slots__ allows you to explicitly state which instance attributes you expect your object instances to have, with the expected results:", "Quoting Jacob Hallen:"]}, {"question": "Does anyone know how to do convert from a string to a boolean in Python? I found this link. But it doesn't look like a proper way to do it.  I.e. using built-in functionality, etc.", "answers": ["Really, you just compare the string to whatever you expect to accept as representing true, so you can do this:", "Use:"]}, {"question": "I happened to find myself having a basic filtering need: I have a list and I have to filter it by an attribute of the items.", "answers": ["It is strange how much beauty varies for different people. I find the list comprehension much clearer than filter+lambda, but use whichever you find easier.", "This is a somewhat religious issue in Python. Even though Guido considered removing map, filter and reduce from Python 3, there was enough of a backlash that in the end only reduce was moved from built-ins to functools.reduce."]}, {"question": "I am trying to print an integer in Python 2.6.1 with commas as thousands separators. For example, I want to show the number 1234567 as 1,234,567. How would I go about doing this? I have seen many examples on Google, but I am looking for the simplest practical way.", "answers": ["Per Format Specification Mini-Language,", "I got this to work:"]}, {"question": "I have a list of dictionaries like this:", "answers": ["Supposing d is your list of dicts, simply:", "The other answers are correct, but not much has been explained in terms of advantages and limitations of these methods. The aim of this post will be to show examples of these methods under different situations, discuss when to use (and when not to use), and suggest alternatives."]}, {"question": "I notice that a pre-increment/decrement operator can be applied on a variable (like ++count). It compiles, but it does not actually change the value of the variable!", "answers": ["++ is not an operator. It is two + operators. The + operator is the identity operator, which does nothing. (Clarification: the + and - unary operators only work on numbers, but I presume that you wouldn't expect a hypothetical ++ operator to work on strings.)", "Python does not have pre and post increment operators."]}, {"question": "Here's my code:", "answers": ["You would want and instead of &&.", "Python uses and and or conditionals."]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["Are you talking about lambda expressions? Like", "lambda is just a fancy way of saying function. Other than its name, there is nothing obscure, intimidating or cryptic about it. When you read the following line, replace lambda by function in your mind:"]}, {"question": "I work with Series and DataFrames on the terminal a lot. The default __repr__ for a Series returns a reduced sample, with some head and tail values, but the rest missing.", "answers": ["You can also use the option_context, with one or more options:", "No need to hack settings. There is a simple way:"]}, {"question": "I'm helping a veterinary clinic measuring pressure under a dogs paw. I use Python for my data analysis and now I'm stuck trying to divide the paws into (anatomical) subregions.", "answers": ["I detected the peaks using a local maximum filter. Here is the result on your first dataset of 4 paws:\n", "Data file: paw.txt. Source code:"]}, {"question": "A tweet reads: ", "answers": ["From Ian Bicking's own introduction to pip:", "Many of the answers here are out of date for 2015 (although the initially accepted one from Daniel Roseman is not). Here's the current state of things:"]}, {"question": "I have the list [0, 1, 2, 3, 4] I'd like to make it into [1, 2, 3, 4]. How do I go about this? ", "answers": ["You can find a short collection of useful list functions here.", "Slicing:"]}, {"question": "In Python, how do I get a function name as a string, without calling the function?", "answers": ["Using __name__ is the preferred method as it applies uniformly. Unlike func_name, it works on built-in functions as well:", "To get the current function's or method's name from inside it, consider:"]}, {"question": "Using pip, is it possible to figure out which version of a package is currently installed?", "answers": ["As of pip 1.3, there is a pip show command.", "I just sent a pull request in pip with the enhancement Hugo Tavares said:"]}, {"question": "I know pip is a package manager for python packages. However, I saw the installation on IPython's website use conda to install IPython.", "answers": ["Quoting from the Conda blog:", "Disclaimer: This answer describes the state of things as it was a decade ago, at that time pip did not support binary packages. Conda was specifically created to better support building and distributing binary packages, in particular data science libraries with C extensions. For reference, pip only gained widespread support for portable binary packages with wheels (pip 1.4 in 2013) and the manylinux1 specification (pip 8.1 in March 2016). See the more recent answer for more history."]}, {"question": "I am trying to understand the advantages of multiprocessing over threading. I know that multiprocessing gets around the Global Interpreter Lock, but what other advantages are there, and can threading not do the same thing?", "answers": ["Here are some pros/cons I came up with.", "The threading module uses threads, the multiprocessing module uses processes. The difference is that threads run in the same memory space, while processes have separate memory. This makes it a bit harder to share objects between processes with multiprocessing. Since threads use the same memory, precautions have to be taken or two threads will write to the same memory at the same time. This is what the global interpreter lock is for."]}, {"question": "How do I create a GUID in Python that is platform independent? I hear there is a method using ActivePython on Windows but it's Windows only because it uses COM. Is there a method using plain Python?", "answers": ["The uuid module provides immutable UUID objects (the UUID class) and the functions uuid1(), uuid3(), uuid4(), uuid5() for generating version 1, 3, 4, and 5 UUIDs as specified in RFC 4122.", "If you're using Python 2.5 or later, the uuid module is already included with the Python standard distribution."]}, {"question": "I'm iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. ", "answers": ["You can use a list comprehension to create a new list containing only the elements you don't want to remove:", "The answers suggesting list comprehensions are ALMOST correct -- except that they build a completely new list and then give it the same name the old list as, they do NOT modify the old list in place. That's different from what you'd be doing by selective removal, as in @Lennart's suggestion -- it's faster, but if your list is accessed via multiple references the fact that you're just reseating one of the references and NOT altering the list object itself can lead to subtle, disastrous bugs."]}, {"question": "Given a path such as \"mydir/myfile.txt\", how do I find the file's absolute path relative to the current working directory in Python? E.g. on Windows, I might end up with:", "answers": ["Also works if it is already an absolute path:", "You could use the new Python 3.4 library pathlib. (You can also get it for Python 2.6 or 2.7 using pip install pathlib.) The authors wrote: \"The aim of this library is to provide a simple hierarchy of classes to handle filesystem paths and the common operations users do over them.\""]}, {"question": "Coming from a C# background the naming convention for variables and method names are usually either camelCase or PascalCase:", "answers": ["See Python PEP 8: Function and Variable Names:", "The Google Python Style Guide has the following convention:"]}, {"question": "Today, I came across the dict method get which, given a key in the dictionary, returns the associated value.", "answers": ["It allows you to provide a default value if the key is missing:", "What is the dict.get() method?"]}, {"question": "I'm building a Python application and don't want to force my clients to install Python and modules.", "answers": ["You can use PyInstaller to package Python programs as standalone executables. It works on Windows, Linux, and Mac.", "You can use py2exe as already answered and use Cython to convert your key .py files in .pyc, C compiled files, like .dll in Windows and .so on Linux."]}, {"question": "How can I write a try/except block that catches all exceptions?", "answers": ["Apart from a bare except: clause (which as others have said you shouldn't use), you can simply catch Exception:", "You can but you probably shouldn't:"]}, {"question": "I've always laughed to myself when I've looked back at my VB6 days and thought, \"What modern language doesn't allow incrementing with double plus signs?\":", "answers": ["Python doesn't support ++, but you can do:", "Simply put, the ++ and -- operators don't exist in Python because they wouldn't be operators, they would have to be statements. All namespace modification in Python is a statement, for simplicity and consistency. That's one of the design decisions. And because integers are immutable, the only way to 'change' a variable is by reassigning it."]}, {"question": "I have a dataframe in pandas which I would like to write to a CSV file.", "answers": ["To delimit by a tab you can use the sep argument of to_csv:", "When you are storing a DataFrame object into a csv file using the to_csv method, you probably wont be needing to store the preceding indices of each row of the DataFrame object."]}, {"question": "I am trying to use IPython notebook on MacOS X with Python 2.7.2 and IPython 1.1.0.", "answers": ["I used %matplotlib inline in the first cell of the notebook and it works. I think you should try:", "If your matplotlib version is above 1.4, it is also possible to use"]}, {"question": "I need to set some environment variables in the Python script and I want all the other scripts that are called from Python to see the environment variables' set.", "answers": ["Environment variables must be strings, so use", "You may need to consider some further aspects for code robustness;"]}, {"question": "In Python, what are the differences between the urllib, urllib2, urllib3 and requests modules? Why are there three? They seem to do the same thing...", "answers": ["I know it's been said already, but I'd highly recommend the requests Python package.", "urllib2 provides some extra functionality, namely the urlopen() function can allow you to specify headers (normally you'd have had to use httplib in the past, which is far more verbose.) More importantly though, urllib2 provides the Request class, which allows for a more declarative approach to doing a request:"]}, {"question": "This is the error I get", "answers": ["It seems mysql_config is missing on your system or the installer could not find it.\nBe sure mysql_config is really installed.", "In Mac OS, I simply ran this in terminal to fix:"]}, {"question": "From what I understand, a cache is an encrypted file of similar files.", "answers": ["When you run a program in Python, the interpreter compiles it to bytecode first (this is an oversimplification) and stores it in the __pycache__ folder. If you look in there you will find a bunch of files sharing the names of the .py files in your project's folder, only their extensions will be either .pyc or .pyo. These are bytecode-compiled and optimized bytecode-compiled versions of your program's files, respectively.", "__pycache__ is a folder containing Python 3 bytecode compiled and ready to be executed."]}, {"question": "How do I convert a hex string to an int in Python? ", "answers": ["Without the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell:", "int(hexstring, 16) does the trick, and works with and without the 0x prefix:"]}, {"question": "Trying to pip install a repo's specific branch. Google tells me to", "answers": ["Prepend the url prefix git+ (See VCS Support):", "Using pip with git+ to clone a repository can be extremely slow (test with https://github.com/django/django@stable/1.6.x for example, it will take a few minutes). The fastest thing I've found, which works with GitHub and BitBucket, is:"]}, {"question": "\nWant to improve this question? Add details and clarify the problem by editing this post.\r\n                ", "answers": ["There's no performance difference, as they compile to the same bytecode:", "Both Google and Python's style guide is the best practice:"]}, {"question": "Is it possible to terminate a running thread without setting/checking any flags/semaphores/etc.?", "answers": ["It is generally a bad pattern to kill a thread abruptly, in Python, and in any language. Think of the following cases:", "A multiprocessing.Process can p.terminate()"]}, {"question": "I have the following code in Python 3:", "answers": ["TL;DR: As of today (2019), in Python 3.7+ you must turn this feature on using a \"future\" statement, from __future__ import annotations.", "Specifying the type as string is fine, but always grates me a bit that we are basically circumventing the parser. So you better not misspell any one of these literal strings:"]}, {"question": "This piece of code in Python runs in  (Note: The timing is done with the time function in BASH in Linux.)", "answers": ["Inside a function, the bytecode is:", "You might ask why it is faster to store local variables than globals. This is a CPython implementation detail."]}, {"question": "I want to know how to get size of objects like a string, integer, etc. in Python.", "answers": ["Just use the sys.getsizeof function defined in the sys module.", "The answer, \"Just use sys.getsizeof\", is not a complete answer."]}, {"question": "I am running Python 2.5.", "answers": ["You could use relative imports (python >= 2.5):", "Relative imports (as in from .. import mymodule) only work in a package.\nTo import 'mymodule' that is in the parent directory of your current module:"]}, {"question": "I have installed a python package with python setup.py install.", "answers": ["Note: Avoid using python setup.py install use pip install .", "For me, the following mostly works:"]}, {"question": "I would like to know what are all the possible values for the timezone argument in the Python library pytz. How to do it?", "answers": ["You can list all the available timezones with pytz.all_timezones:", "Don't create your own list - pytz has a built-in set:"]}, {"question": "When you just want to do a try-except without handling the exception, how do you do it in Python?", "answers": ["or", "It's generally considered best-practice to only catch the errors you are interested in. In the case of shutil.rmtree it's probably OSError:"]}, {"question": "I tried to install the Python package dulwich:", "answers": ["Update: Comments point out that the instructions here may be dangerous. Consider using the Visual C++ 2008 Express edition or the purpose-built Microsoft Visual C++ Compiler for Python (details) and NOT using the original answer below. Original error message means the required version of Visual C++ is not installed.", "I found the solution. \nI had the exact same problem, and error, installing 'amara'. I had mingw32 installed, but distutils needed to be configured."]}, {"question": "I just installed the Python modules: construct and statlib with setuptools like this:", "answers": ["I suggest using pip in place of easy_install. With pip, you can list all installed packages and their versions with ", "You can try"]}, {"question": "The very common directory structure for even a simple Python module seems to be to separate the unit tests into their own test directory:", "answers": ["The best solution in my opinion is to use the unittest command line interface which will add the directory to the sys.path so you don't have to (done in the TestLoader class).", "The simplest solution for your users is to provide an executable script (runtests.py or some such) which bootstraps the necessary test environment, including, if needed, adding your root project directory to sys.path temporarily. This doesn't require users to set environment variables, something like this works fine in a bootstrap script:"]}, {"question": "I have a variable, x, and I want to know whether it is pointing to a function or not.", "answers": ["If this is for Python 2.x or for Python 3.2+, you can use callable(). It used to be deprecated, but is now undeprecated, so you can use it again. You can read the discussion here: http://bugs.python.org/issue10518. You can do this with:", "Builtin types that don't have constructors in the built-in namespace (e.g. functions, generators, methods) are in the types module. You can use types.FunctionType in an isinstance call:"]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["Doesn't too much matter.  Whatever makes you happy will work.  There aren't a lot of silly rules because Python projects can be simple.", "According to Jean-Paul Calderone's Filesystem structure of a Python project:"]}, {"question": "Is there a reason to prefer using map() over list comprehension or vice versa?  Is either of them generally more efficient or considered generally more pythonic than the other?", "answers": ["map may be microscopically faster in some cases (when you're NOT making a lambda for the purpose, but using the same function in map and a listcomp). List comprehensions may be faster in other cases and most (not all) pythonistas consider them more direct and clearer.", "Cases"]}, {"question": "I want to remove all empty strings from a list of strings in python.", "answers": ["I would use filter:", "Using a list comprehension is the most Pythonic way:"]}, {"question": "Using virtualenv, I run my projects with the default version of Python (2.7). On one project, I need to use Python 3.4. ", "answers": ["simply run", "Python 3 has a built-in support for virtual environments - venv. It might be better to use that instead. Referring to the docs:"]}, {"question": "Is there a way to widen the display of output in either interactive or script-execution mode?", "answers": ["Update: Pandas 0.23.4 onwards", "Try this:"]}, {"question": "__future__ frequently appears in Python modules. I do not understand what __future__ is for and how/when to use it even after reading the Python's __future__ doc. ", "answers": ["With __future__ module's inclusion, you can slowly be accustomed to incompatible changes or to such ones introducing new keywords.", "When you do"]}, {"question": "I needed to create a list of lists in Python, so I typed the following:", "answers": ["When you write [x]*3 you get, essentially, the list [x, x, x]. That is, a list with 3 references to the same x. When you then modify this single x it is visible via all three references to it:", "Live visualization using Python Tutor:"]}, {"question": "How do you get the logical xor of two variables in Python?", "answers": ["If you're already normalizing the inputs to booleans, then != is xor.", "You can always use the definition of xor to compute it from other logical operations:"]}, {"question": "In Django model QuerySets, I see that there is a __gt and __lt for comparative values, but is there a __ne or != (not equals)? I want to filter out using a not equals. For example, for", "answers": ["You can use Q objects for this. They can be negated with the ~ operator and combined much like normal Python expressions:", "Your query appears to have a double negative, you want to exclude all rows where x is not 5, so in other words you want to include all rows where x is 5. I believe this will do the trick:"]}, {"question": "In a comment on this answer to another question, someone said that they weren't sure what functools.wraps was doing. So, I'm asking this question so that there will be a record of it on StackOverflow for future reference: what does functools.wraps do, exactly?", "answers": ["When you use a decorator, you're replacing one function with another.  In other words, if you have a decorator", "As of python 3.5+:"]}, {"question": "Out of these not None tests.", "answers": ["is the Pythonic idiom for testing that a variable is not set to None. This idiom has particular uses in the case of declaring keyword functions with default parameters. is tests identity in Python. Because there is one and only one instance of None present in a running Python script/program, is is the optimal test for this. As Johnsyweb points out, this is discussed in PEP 8 under \"Programming Recommendations\".", "From, Programming Recommendations, PEP 8:"]}, {"question": "I'm trying to convert a server side Ajax response script into a Django HttpResponse, but apparently it's not working.", "answers": ["I usually use a dictionary, not a list to return JSON content. ", "New in django 1.7"]}, {"question": "From time to time in Python, I see the block:", "answers": ["\"I do not know if it is out of ignorance, but I do not like that\n  kind of programming, as it is using exceptions to perform flow control.\"", "A try block allows you to handle an expected error. The except block should only catch exceptions you are prepared to handle. If you handle an unexpected error, your code may do the wrong thing and hide bugs."]}, {"question": "I've been looking at dynamic evaluation of Python code, and come across the eval() and compile() functions, and the exec statement.", "answers": ["Basically, eval is used to evaluate a single dynamically generated Python expression, and exec is used to execute dynamically generated Python code only for its side effects.", "exec is not an expression: a statement in Python 2.x, and a function in Python 3.x. It compiles and immediately evaluates a statement or set of statement contained in a string. Example:"]}, {"question": "I wrote a Python program that acts on a large input file to create a few million objects representing triangles.  The algorithm is:", "answers": ["According to Python Official Documentation, you can explicitly invoke the Garbage Collector to release unreferenced memory with gc.collect(). Example:", "Unfortunately (depending on your version and release of Python) some types of objects use \"free lists\" which are a neat local optimization but may cause memory fragmentation, specifically by making more and more memory \"earmarked\" for only objects of a certain type and thereby unavailable to the \"general fund\"."]}, {"question": "I am curious as to why df[2] is not supported, while df.ix[2] and df[2:3] both work. ", "answers": ["echoing @HYRY, see the new docs in 0.11", "When the indexing operator is passed a string or integer, it attempts to find a column with that particular name and return it as a Series."]}, {"question": "Is there a way to get all attributes/methods/fields/etc. of an object in Python?", "answers": ["Use the built-in function dir().", "I use __dict__ and dir(<instance>)"]}, {"question": "I've been testing out Selenium with Chromedriver and I noticed that some pages can detect that you're using Selenium even though there's no automation at all. Even when I'm just browsing manually just using Chrome through Selenium and Xephyr I often get a page saying that suspicious activity was detected. I've checked my user agent, and my browser fingerprint, and they are all exactly identical to the normal Chrome browser.", "answers": ["Basically, the way the Selenium detection works, is that they test for predefined JavaScript variables which appear when running with Selenium. The bot detection scripts usually look anything containing word \"selenium\" / \"webdriver\" in any of the variables (on window object), and also document variables called $cdc_ and $wdc_. Of course, all of this depends on which browser you are on. All the different browsers expose different things.", "You can use vim or perl to replace the cdc_ string in chromedriver. See answer by @Erti-Chris Eelmaa to learn more about that string and how it's a detection point."]}, {"question": "I want to apply my custom function (it uses an if-else ladder) to these six columns (ERI_Hispanic, ERI_AmerInd_AKNatv, ERI_Asian, ERI_Black_Afr.Amer, ERI_HI_PacIsl, ERI_White) in each row of my dataframe.", "answers": ["OK, two steps to this - first is to write a function that does the translation you want - I've put an example together based on your pseudo-code:", "Since this is the first Google result for 'pandas new column from others', here's a simple example:"]}, {"question": "I'm deploying a Django app to a dev server and am hitting this error when I run pip install -r requirements.txt:", "answers": ["July 2018 Update ", "fixed it for me in Debian. Seems like uninstalling some .deb packages (twisted set in my case) has broken the path python uses to find packages "]}, {"question": "The function foo below returns a string 'foo'. How can I get the value 'foo' which is returned from the thread's target?", "answers": ["One way I've seen is to pass a mutable object, such as a list or a dictionary, to the thread's constructor, along with a an index or other identifier of some sort. The thread can then store its results in its dedicated slot in that object.  For example:", "FWIW, the multiprocessing module has a nice interface for this using the Pool class.  And if you want to stick with threads rather than processes, you can just use the multiprocessing.pool.ThreadPool class as a drop-in replacement."]}, {"question": "How can I get a list of the values in a dict in Python?", "answers": ["dict.values returns a view of the dictionary's values, so you have to wrap it in list:", "You can use * operator to unpack dict_values:"]}, {"question": "I've seen a lot of questions that ask about pivot tables.  Even if they don't know that they are asking about pivot tables, they usually are.  It is virtually impossible to write a canonical question and answer that encompasses all aspects of pivoting...", "answers": ["We start by answering the first question:", "To extend @piRSquared's answer another version of Question 10"]}, {"question": "I have issue after installing the matplotlib package unable to import matplotlib.pyplot as plt. Any suggestion will be greatly appreciate.  ", "answers": ["Problem Cause"]}, {"question": "Is it possible to declare more than one variable using a with statement in Python?", "answers": ["It is possible in Python 3 since v3.1 and  Python 2.7. The new with syntax supports multiple context managers:", "Note that if you split the variables into lines, prior to Python 3.10 you must use backslashes to wrap the newlines."]}, {"question": "I have a pandas DataFrame and I want to delete rows from it where the length of the string in a particular column is greater than 2.", "answers": ["To directly answer this question's original title \"How to delete rows from a pandas DataFrame based on a conditional expression\" (which I understand is not necessarily the OP's problem but could help other users coming across this question) one way to do this is to use the drop method:", "When you do len(df['column name']) you are just getting one number, namely the number of rows in the DataFrame (i.e., the length of the column itself).  If you want to apply len to each element in the column, use df['column name'].map(len).  So try"]}, {"question": "While reading up the documentation for dict.copy(), it says that it makes a shallow copy of the dictionary. Same goes for the book I am following (Beazley's Python Reference), which says: ", "answers": ["By \"shallow copying\" it means the content of the dictionary is not copied by value, but just creating a new reference.", "Take this example:"]}, {"question": "In Python, when should you use lists and when tuples?", "answers": ["Tuples are fixed size in nature whereas lists are dynamic.\nIn other words, a tuple is immutable whereas a list is mutable.", "There's a strong culture of tuples being for heterogeneous collections, similar to what you'd use structs for in C, and lists being for homogeneous collections, similar to what you'd use arrays for.  But I've never quite squared this with the mutability issue mentioned in the other answers.  Mutability has teeth to it (you actually can't change a tuple), while homogeneity is not enforced, and so seems to be a much less interesting distinction."]}, {"question": "I need a way to tell what mode the shell is in from within the shell.", "answers": ["One way is to look at sys.maxsize as documented here:", "When starting the Python interpreter in the terminal/command line you may also see a line like: "]}, {"question": "I have a list of strings like this:", "answers": ["Shortest Code", "Zip the two lists together, sort it, then take the parts you want:"]}, {"question": "I am trying to understand when to use __getattr__ or __getattribute__.  The documentation mentions __getattribute__ applies to new-style classes. What are new-style classes?  ", "answers": ["A key difference between __getattr__ and __getattribute__ is that __getattr__ is only invoked if the attribute wasn't found the usual ways.  It's good for implementing a fallback for missing attributes, and is probably the one of two you want.", "Lets see some simple examples of both __getattr__ and __getattribute__ magic methods."]}, {"question": "I want to change the key of an entry in a Python dictionary.", "answers": ["Easily done in 2 steps:", "if you want to change all the keys:"]}, {"question": "I would like to know how to check whether a string starts with \"hello\" in Python.", "answers": ["More info about startswith.", "RanRag has already answered it for your specific question."]}, {"question": "Whenever I am trying to install any package using pip, I am getting this import error:", "answers": ["You must have inadvertently upgraded your system pip (probably through something like sudo pip install pip --upgrade)", "We can clear the error by modifying the pip file."]}, {"question": "What exactly are the Python scoping rules?", "answers": ["Actually, a concise rule for Python Scope resolution, from Learning Python, 3rd. Ed.. (These rules are specific to variable names, not attributes. If you reference it without a period, these rules apply.)", "Essentially, the only thing in Python that introduces a new scope is a function definition.  Classes are a bit of a special case in that anything defined directly in the body is placed in the class's namespace, but they are not directly accessible from within the methods (or nested classes) they contain."]}, {"question": "I have a try...except block in my code and When an exception is throw. I really just want to continue with the code because in that case, everything is still able to run just fine. The problem is if you leave the except: block empty or with a #do nothing, it gives you a syntax error. I can't use continue because its not in a loop. Is there a keyword i can use that tells the code to just keep going?", "answers": ["Python docs for the pass statement", "The standard \"nop\" in Python is the pass statement:"]}, {"question": "I have a list of tuples that looks something like this:", "answers": ["Try using the key keyword with sorted().", "IMO using itemgetter is more readable in this case than the solution by @cheeken. It is\nalso faster since almost all of the computation will be done on the c side (no pun intended) rather than through the use of lambda.  "]}, {"question": "How would I create a list with values between two values I put in? \nFor example, the following list is generated for values from 11 to 16:", "answers": ["Use range. In Python 2.x it returns a list so all you need is:", "You seem to be looking for range():"]}, {"question": "I'm using Python's logging module to log some debug strings to a file which works pretty well. Now in addition, I'd like to use this module to also print the strings out to stdout. How do I do this? In order to log my strings to a file I use following code:", "answers": ["Just get a handle to the root logger and add the StreamHandler. The StreamHandler writes to stderr. Not sure if you really need stdout over stderr, but this is what I use when I setup the Python logger and I also add the FileHandler as well. Then all my logs go to both places (which is what it sounds like you want).", "logging.basicConfig() can take a keyword argument handlers since Python 3.3, which simplifies logging setup a lot, especially when setting up multiple handlers with the same formatter:"]}, {"question": "I have a dictionary which looks like this: di = {1: \"A\", 2: \"B\"}", "answers": ["You can use .replace.  For example:", "If your dictionary has more than a couple of keys, using map can be much faster than replace.  There are two versions of this approach, depending on whether your dictionary exhaustively maps all possible values (and also whether you want non-matches to keep their values or be converted to NaNs):"]}, {"question": "Is there a way to expand a Python tuple into a function - as actual parameters?", "answers": ["myfun(*some_tuple) does exactly what you request. The * operator simply unpacks the tuple (or any iterable) and passes them as the positional arguments to the function. Read more about unpacking arguments.", "Note that you can also expand part of argument list:"]}, {"question": "How to fix it?", "answers": ["Without seeing the source it's difficult to know the root cause, so I'll have to speak generally.", "Finally I got it:"]}, {"question": "I have a parameter file of the form:", "answers": ["str.replace() v2|v3 does not recognize regular expressions. ", "You are looking for the re.sub function."]}, {"question": "This \"underscoring\" seems to occur a lot, and I was wondering if this was a requirement in the Python language, or merely a matter of convention?", "answers": ["From the Python PEP 8 -- Style Guide for Python Code:", "The other respondents are correct in describing the double leading and trailing underscores as a naming convention for \"special\" or \"magic\" methods."]}, {"question": "I need to print some stuff only when a boolean variable is set to True. So, after looking at this, I tried with a simple example:", "answers": ["Python does not have a trailing if statement.", "Inline if-else EXPRESSION must always contain else clause, e.g:"]}, {"question": "When writing custom classes it is often important to allow equivalence by means of the == and != operators. In Python, this is made possible by implementing the __eq__ and __ne__ special methods, respectively. The easiest way I've found to do this is the following method:", "answers": ["Consider this simple problem:", "You need to be careful with inheritance:"]}, {"question": "I want to plot a graph with one logarithmic axis using matplotlib. ", "answers": ["You can use the Axes.set_yscale method. That allows you to change the scale after the Axes object is created. That would also allow you to build a control to let the user pick the scale if you needed to.", "First of all, it's not very tidy to mix pylab and pyplot code. What's more, pyplot style is preferred over using pylab."]}, {"question": "Let's say I have two lists, l1 and l2.  I want to perform l1 - l2, which returns all elements of l1 not in l2.", "answers": ["Python has a language feature called List Comprehensions that is perfectly suited to making this sort of thing extremely easy. The following statement does exactly what you want and stores the result in l3:", "One way is to use sets:"]}, {"question": "I have a set like this:", "answers": ["e.g, keep.update(xrange(11)) for your specific example.  Or, if you have to produce the values in a loop for some other reason,", "Define set"]}, {"question": "Is it possible to read binary MATLAB .mat files in Python?", "answers": ["An import is required, import scipy.io...", "Neither scipy.io.savemat, nor scipy.io.loadmat work for MATLAB arrays version 7.3. But the good part is that MATLAB version 7.3 files are hdf5 datasets. So they can be read using a number of tools, including NumPy."]}, {"question": "Why are there no ++ and -- operators in Python?", "answers": ["It's not because it doesn't make sense; it makes perfect sense to define \"x++\" as \"x += 1, evaluating to the previous binding of x\".", "This original answer I wrote is a myth from the folklore of computing: debunked by Dennis Ritchie as \"historically impossible\" as noted in the letters to the editors of Communications of the ACM July 2012 doi:10.1145/2209249.2209251"]}, {"question": "How to make pytest print traceback, so I would see where in the whatever function an exception was raised?", "answers": ["pytest.raises(Exception) is what you need.", "Do you mean something like this:"]}, {"question": "Consider three functions:", "answers": ["On the actual behavior, there is no difference. They all return None and that's it. However, there is a time and  place for all of these.\nThe following instructions are basically how the different methods should be used (or at least how I was taught they should be used), but they are not absolute rules so you can mix them up if you feel necessary to.", "Yes, they are all the same. "]}, {"question": "It seems there are already quite some questions here about relative import in python 3, but after going through many of them I still didn't find the answer for my issue. \nso here is the question. ", "answers": ["EDIT: There are better/more coherent answers to this question in other questions: ", "Try this.\nWorked for me."]}, {"question": "How do I tell the time difference in minutes between two datetime objects?", "answers": ["Subtracting the later time from the first time difference = later_time - first_time creates a datetime object that only holds the difference.\nIn the example above it is 0 minutes, 8 seconds and 562000 microseconds.", "Using datetime example"]}, {"question": "If I do this:", "answers": ["Operator precedence 2.x, 3.x. The precedence of not is lower than that of in. So it is equivalent to:", "not x in y is evaluated as x not in y"]}, {"question": "I use python to create my project settings setup, but I need help getting the command line arguments.", "answers": ["Python tutorial explains it:", "(not including the name of the Python file)"]}, {"question": "How to check whether a pandas DataFrame is empty? In my case I want to print some message in terminal if the DataFrame is empty. ", "answers": ["You can use the attribute df.empty to check whether it's empty or not:", "I use the len function. It's much faster than empty. len(df.index) is even faster."]}, {"question": "I saw this in someone's code:", "answers": ["In Python 3, they made the / operator do a floating-point division, and added the // operator to do integer division (i.e., quotient without remainder); whereas in Python 2, the / operator was simply integer division, unless one of the operands was already a floating point number.", "// is unconditionally \"flooring division\", e.g:"]}, {"question": "PEP 8 states:", "answers": ["Module importing is quite fast, but not instant. This means that:", "Putting the import statement inside of a function can prevent circular dependencies.\nFor example, if you have 2 modules, X.py and Y.py, and they both need to import each other, this will cause a circular dependency when you import one of the modules causing an infinite loop. If you move the import statement in one of the modules then it won't try to import the other module till the function is called, and that module will already be imported, so no infinite loop. Read here for more - effbot.org/zone/import-confusion.htm"]}, {"question": "How do I accomplish variable variables in Python?", "answers": ["You can use dictionaries to accomplish this. Dictionaries are stores of keys and values. ", "Use the built-in getattr function to get an attribute on an object by name.  Modify the name as needed."]}, {"question": "I came across the Python with statement for the first time today.  I've been using Python lightly for several months and didn't even know of its existence!  Given its somewhat obscure status, I thought it would be worth asking:", "answers": ["I believe this has already been answered by other users before me, so I only add it for the sake of completeness: the with statement simplifies exception handling by encapsulating common preparation and cleanup tasks in so-called context managers. More details can be found in PEP 343. For instance, the open statement is a context manager in itself, which lets you open a file, keep it open as long as the execution is in the context of the with statement where you used it, and close it as soon as you leave the context, no matter whether you have left it because of an exception or during regular control flow. The with statement can thus be used in ways similar to the RAII pattern in C++: some resource is acquired by the with statement and released when you leave the with context.", "I would suggest two interesting lectures:"]}, {"question": "I have the following string: \"aaaabbbb\"", "answers": ["Like this:", "See : http://codepad.org/S3zjnKoD"]}, {"question": "What will happen if two modules import each other?", "answers": ["If you do import foo (inside bar.py) and import bar (inside foo.py), it will work fine. By the time anything actually runs, both modules will be fully loaded and will have references to each other.", "There was a really good discussion on this over at comp.lang.python last year. It answers your question pretty thoroughly."]}, {"question": "In Python, there are two similarly-named functions, exit() and sys.exit(). What's the difference and when should I use one over the other?", "answers": ["exit is a helper for the interactive shell - sys.exit is intended for use in programs.", "If I use exit() in a code and run it in the shell, it shows a message asking whether I want to kill the program or not. It's really disturbing.\nSee here"]}, {"question": "When should you use generator expressions and when should you use list comprehensions in Python?", "answers": ["John's answer is good (that list comprehensions are better when you want to iterate over something multiple times).  However, it's also worth noting that you should use a list if you want to use any of the list methods.  For example, the following code won't work:", "Iterating over the generator expression or the list comprehension will do the same thing. However, the list comprehension will create the entire list in memory first while the generator expression will create the items on the fly, so you are able to use it for very large (and also infinite!) sequences."]}, {"question": "I saw this in someone's code. What does it mean?", "answers": ["Using these magic methods (__enter__, __exit__) allows you to implement objects which can be used easily with the with statement. ", "If you know what context managers are then you need nothing more to understand __enter__ and __exit__ magic methods. Lets see a very simple example."]}, {"question": "I'm running into a weird error when trying to install Django on my computer.", "answers": ["You need to add the path of your pip installation to your PATH system variable. By default, pip is installed to C:\\Python34\\Scripts\\pip (pip now comes bundled with new versions of python), so the path \"C:\\Python34\\Scripts\" needs to be added to your PATH variable.", "For Windows, when you install a package, you type:"]}, {"question": "I'm trying to plot a figure without tickmarks or numbers on either of the axes (I use axes in the traditional sense, not the matplotlib nomenclature!). An issue I have come across is where matplotlib adjusts the x(y)ticklabels by subtracting a value N, then adds N at the end of the axis.", "answers": ["Instead of hiding each element, you can hide the whole axis:", "If you want to hide just the axis text keeping the grid lines:"]}, {"question": "I have this code:", "answers": ["With the -c (command) argument (assuming your file is named foo.py):", "Just put hello() somewhere below the function and it will execute when you do python your_file.py"]}, {"question": "I would like to make a deep copy of a dict in python. Unfortunately the .deepcopy() method doesn't exist for the dict. How do I do that?", "answers": ["How about:", "dict.copy() is a shallow copy function for dictionary \n\nid is built-in function that gives you the address of variable"]}, {"question": "If I have a function like this:", "answers": ["Your second way is correct. ", "If you're using typing (introduced in Python 3.5) you can use typing.Optional, where Optional[X] is equivalent to Union[X, None]. It is used to signal that the explicit value of None is allowed . From typing.Optional:"]}, {"question": "Is there a way to check if a column exists in a Pandas DataFrame?", "answers": ["This will work:", "To check if one or more columns all exist, you can use set.issubset, as in:"]}, {"question": "I want to remove a certain environment created with conda. How can I achieve that? Let's say I have an active testenv environment. I tried, by following documentation, with:", "answers": ["You probably didn't fully deactivate the Conda environment - remember, the command you need to use with Conda is conda deactivate (for older versions, use source deactivate). So it may be wise to start a new shell and activate the environment in that before you try. Then deactivate it.", "After making sure your environment is not active, type:"]}, {"question": "What do these python file extensions mean?", "answers": ["Also for some further discussion on .pyc vs .pyo, take a look at: http://www.network-theory.co.uk/docs/pytut/CompiledPythonfiles.html (I've copied the important part below)", "A larger list of additional Python file-extensions (mostly rare and unofficial) can be found at http://dcjtech.info/topic/python-file-extensions/"]}, {"question": "I would like to increase the width of the ipython notebook in my browser. I have a high-resolution screen, and I would like to expand the cell width/size to make use of this extra space.", "answers": ["If you don't want to change your default settings, and you only want to change the width of the current notebook you're working on, you can enter the following into a cell:", "That div.cell solution didn't actually work on my IPython, however luckily someone suggested a working solution for new IPythons:"]}, {"question": "How can I check if a Python object is a string (either regular or Unicode)?", "answers": ["Use isinstance(obj, basestring) for an object-to-test obj.", "In Python 3.x basestring is not available anymore, as str is the sole string type (with the semantics of Python 2.x's unicode)."]}, {"question": "I have two existing dictionaries, and I wish to 'append' one of them to the other. By that I mean that the key,values of the other dictionary should be made into the first dictionary. For example:", "answers": ["You can do", "There are two ways to add one dictionary to another."]}, {"question": "When debugging in PHP, I frequently find it useful to simply stick a var_dump() in my code to show me what a variable is, what its value is, and the same for anything that it contains.", "answers": ["I think the best equivalent to PHP's var_dump($foo, $bar) is combine print with vars:", "To display a value nicely, you can use the pprint module. The easiest way to dump all variables with it is to do"]}, {"question": "Given a datetime.time value in Python, is there a standard way to add an integer number of seconds to it, so that 11:34:59 + 3 = 11:35:02, for example?", "answers": ["You can use full datetime variables with timedelta, and by providing a dummy date then using time to just get the time value.", "As others here have stated, you can just use full datetime objects throughout:"]}, {"question": "I'm a little bit confused with JSON in Python.\nTo me, it seems like a dictionary, and for that reason\nI'm trying to do that:", "answers": ["json.loads()", "When I started using json, I was confused and unable to figure it out for some time, but finally I got what I wanted\nHere is the simple solution    "]}, {"question": "In all other languages I've worked with the super constructor is invoked implicitly. How does one invoke it in Python? I would expect super(self) but this doesn't work.", "answers": ["In line with the other answers, there are multiple ways to call super class methods (including the constructor), however in Python-3.x the process has been simplified:", "super() returns a parent-like object in new-style classes:"]}, {"question": "Are there situations in which sys.stdout.write() is preferable to print? ", "answers": ["print is just a thin wrapper that formats the inputs (modifiable, but by default with a space between args and newline at the end) and calls the write function of a given object. By default this object is sys.stdout, but you can pass a file using the \"chevron\" form. For example:", "print first converts the object to a string (if it is not already a string). It will also put a space before the object if it is not the start of a line and a newline character at the end."]}, {"question": "I'm trying to download and save an image from the web using python's requests module.", "answers": ["You can either use the response.raw file object, or iterate over the response.", "Get a file-like object from the request and copy it to a file. This will also avoid reading the whole thing into memory at once."]}, {"question": "I am trying to install a Python package from a private GitHub repository. For a public repository, I can issue the following command which works fine:", "answers": ["You can use the git+ssh URI scheme, but you must set a username. Notice the git@ part in the URI:", "As an additional technique, if you have the private repository cloned locally, you can do:"]}, {"question": "Why or why not?", "answers": ["For performance, especially when you're iterating over a large range, xrange() is usually better.  However, there are still a few cases why you might prefer range():", "No, they both have their uses:"]}, {"question": "In Python remove() will remove the first occurrence of value in a list.", "answers": ["Functional approach:", "You can use a list comprehension:"]}, {"question": "When calling", "answers": ["The low_memory option is not properly deprecated, but it should be, since it does not actually do anything differently[source]", "Try:"]}, {"question": "Currently I am working on a python project that contains sub modules and uses numpy/scipy. Ipython is used as interactive console. Unfortunately I am not very happy with workflow that I am using right now, I would appreciate some advice.", "answers": ["IPython comes with some automatic reloading magic:", "In IPython 0.12 (and possibly earlier), you can use this:"]}, {"question": "How would I compare two dates to see which is later, using Python?", "answers": ["Use the datetime method and the operator < and its kin.", "Use time"]}, {"question": "What is the best way of creating an alphabetically sorted list in Python?", "answers": ["Basic answer:", "It is also worth noting the sorted() function:"]}, {"question": "Ok so I can use an OrderedDict in json.dump. That is, an OrderedDict can be used as an input to JSON.", "answers": ["Yes, you can.  By specifying the object_pairs_hook argument to JSONDecoder.  In fact, this is the exact example given in the documentation.", "Simple version for Python 2.7+"]}, {"question": "I am getting error Expecting value: line 1 column 1 (char 0) when trying to decode JSON.", "answers": ["Your code produced an empty response body, you'd want to check for that or catch the exception raised. It is possible the server responded with a 204 No Content response, or a non-200-range status code was returned (404 Not Found, etc.). Check for this.", "Be sure to remember to invoke json.loads() on the contents of the file, as opposed to the file path of that JSON:"]}, {"question": "In Python 2.6, I want to do:", "answers": ["The syntax you're looking for:", "why don't you just define a function?"]}, {"question": "How do I use a progress bar when my script is doing some task that is likely to take time?", "answers": ["With tqdm (conda install tqdm or pip install tqdm) you can add a progress meter to your loops in a second:", "There are specific libraries (like this one here) but maybe something very simple would do:"]}, {"question": "I'm trying to add items to an array in python.", "answers": ["{} represents an empty dictionary, not an array/list.  For lists or arrays, you need [].", "If you do it this way:"]}, {"question": "How do I execute a string containing Python code in Python?", "answers": ["For statements, use exec(string) (Python 2/3) or exec string (Python 2):", "In the example a string is executed as code using the exec function."]}, {"question": "Consider:", "answers": ["In Python 3, UTF-8 is the default source encoding (see PEP 3120), so unicode characters can be used anywhere.", "Do not forget to verify if your text editor encodes properly your code in UTF-8."]}, {"question": "I'd simply like to convert a base-2 binary number string into an int, something like this:", "answers": ["You use the built-in int() function, and pass it the base of the input number, i.e. 2 for a binary number:", "Just type 0b11111111 in python interactive interface:"]}, {"question": "I'm having difficulty installing lxml with easy_install on Ubuntu 11.", "answers": ["Since you're on Ubuntu, don't bother with those source packages. Just install those development packages using apt-get.", "I also had to install lib32z1-dev before lxml would compile (Ubuntu 13.04 x64)."]}, {"question": "I have a data frame like this: ", "answers": ["Use sort_values to sort the df by a specific column's values:", "I tried the solutions above and I do not achieve results, so I found a different solution that works for me. The ascending=False is to order the dataframe in descending order, by default it is True. I am using python 3.6.6 and pandas 0.23.4 versions."]}, {"question": "I have a conda environment named old_name, how can I change its name to new_name without breaking references?", "answers": ["You can't.", "conda create --name new_name --copy --clone old_name is better"]}, {"question": "Which is better to use for timing in Python? time.clock() or time.time()? Which one provides more accuracy?", "answers": ["As of 3.3, time.clock() is deprecated, and it's suggested to use time.process_time() or time.perf_counter() instead.", "The short answer is: most of the time time.clock() will be better.\nHowever, if you're timing some hardware (for example some algorithm you put in the GPU), then time.clock() will get rid of this time and time.time() is the only solution left."]}, {"question": "I would like to create views or dataframes from an existing dataframe based on column selections.", "answers": ["You can either Drop the columns you do not need OR Select the ones you need", "There is a new index method called difference. It returns the original columns, with the columns passed as argument removed. "]}, {"question": "I have a pandas data frame with two columns. I need to change the values of the first column without affecting the second one and get back the whole data frame with just first column values changed. How can I do that using apply in pandas?", "answers": ["Given a sample dataframe df as:", "For a single column better to use map(), like this:"]}, {"question": "How do I add an optional flag to my command line args?", "answers": ["As you have it, the argument w is expecting a value after -w on the command line. If you are just looking to flip a switch by setting a variable True or False, have a look here (specifically store_true and store_false)", "Adding a quick snippet to have it ready to execute:"]}, {"question": "I am not able to access my data in the JSON. What am I doing wrong?", "answers": ["json.dumps() converts a dictionary to str object, not a json(dict) object! So you have to load your str into a dict to use it by using json.loads() method", "json.dumps() returns the JSON string representation of the python dict. See the docs"]}, {"question": "What is the __main__.py file for, what sort of code should I put into it, and when should I have one?", "answers": ["Often, a Python program is run by naming a .py file on the command line:", "When creating a Python module, it is common to make the module execute some functionality (usually contained in a main function) when run as the entry point of the program. This is typically done with the following common idiom placed at the bottom of most Python files:"]}, {"question": "How can I sort an array in NumPy by the nth column?", "answers": ["To sort by the second column of a:", "@steve's answer is actually the most elegant way of doing it."]}, {"question": "I'm trying to build a simple API using Flask, in which I now want to read some POSTed JSON. I do the POST with the Postman Chrome extension, and the JSON I POST is simply {\"text\":\"lalala\"}. I try to read the JSON using the following method:", "answers": ["First of all, the .json attribute is a property that delegates to the request.get_json() method, which documents why you see None here. ", "For reference, here's complete code for how to send json from a Python client:"]}, {"question": "I can't really think of any reason why Python needs the del keyword (and most languages seem to not have a similar keyword). For instance, rather than deleting a variable, one could just assign None to it. And when deleting from a dictionary, a del method could be added.", "answers": ["Firstly, you can del other things besides local variables", "There's this part of what del does (from the Python Language Reference):"]}, {"question": "I find myself frequently using Python's interpreter to work with databases, files, etc -- basically a lot of manual formatting of semi-structured data.  I don't properly save and clean up the useful bits as often as I would like.  Is there a way to save my input into the shell (db connections, variable assignments, little for loops and bits of logic) -- some history of the interactive session?  If I use something like script I get too much stdout noise.  I don't really need to pickle all the objects -- though if there is a solution that does that, it would be OK.  Ideally I would just be left with a script that ran as the one I created interactively, and I could just delete the bits I didn't need.  Is there a package that does this, or a DIY approach?", "answers": ["IPython is extremely useful if you like using interactive sessions. For example for your use-case there is the %save magic command, you just input %save my_useful_session 10-20 23 to save input lines 10 to 20 and 23 to my_useful_session.py (to help with this, every line is prefixed by its number).", "From Andrew Jones's website (archived):"]}, {"question": "Can someone explain to me what is the purpose of meshgrid function in Numpy? I know it creates some kind of grid of coordinates for plotting, but I can't really see the direct benefit of it.", "answers": ["The purpose of meshgrid is to create a rectangular grid out of an array of x values and an array of y values.", "Courtesy of Microsoft Excel:\u00a0"]}, {"question": "Is it possible to install packages using pip from the local filesystem?", "answers": ["What about::", "I am pretty sure that what you are looking for is called --find-links option."]}, {"question": "Very similar to this question but with the difference that my figure can be as large as it needs to be.", "answers": ["Try using plt.tight_layout", "You can use plt.subplots_adjust to change the spacing between the subplots (source)"]}, {"question": "I would like to get the first item from a list matching a condition. It's important that the resulting method not process the entire list, which could be quite large. For example, the following function is adequate:", "answers": ["If you want StopIteration to be raised if no matching element is found:", "I love this answer. However, since next() raise a StopIteration exception when there are no items,\ni would use the following snippet to avoid an exception:"]}, {"question": "What's your preferred way of getting the current system status (current CPU, RAM, free disk space, etc.) in Python? Bonus points for unix and Windows platforms.", "answers": ["The psutil library gives you information about CPU, RAM, etc., on a variety of platforms:", "Use the psutil library.  On Ubuntu 18.04, pip installed 5.5.0 (latest version) as of 1-30-2019.  Older versions may behave somewhat differently.\nYou can check your version of psutil by doing this in Python:"]}, {"question": "Is there a way to select pytest tests to run from a file?\nFor example, a file foo.txt containing a list of tests to be executed:", "answers": ["You can use -k option to run test cases with different patterns:", "Pytest supports several ways to run and select tests from the command-line."]}, {"question": "The community reviewed whether to reopen this question 4 months ago and left it closed:", "answers": ["In Python 3.2+, you can elegantly do the following:"]}]