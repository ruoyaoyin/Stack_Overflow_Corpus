"
","<p>Today, I came across the <code>dict</code> method <code>get</code> which, given a key in the dictionary, returns the associated value.</p>","
","<p>For what purpose is this function useful? If I wanted to find a value associated with a key in a dictionary, I can just do <code>dict[key]</code>, and it returns the same thing:</p>","
","<pre><code>dictionary = {""Name"": ""Harry"", ""Age"": 17}
dictionary[""Name""]
dictionary.get(""Name"")
</code></pre>","
"
"
",<p>It allows you to provide a default value if the key is missing:</p>,"
","<pre><code>dictionary.get(""bogus"", default_value)
</code></pre>","
","<p>returns <code>default_value</code> (whatever you choose it to be), whereas</p>","
","<pre><code>dictionary[""bogus""]
</code></pre>","
",<p>would raise a <code>KeyError</code>.  </p>,"
","<p>If omitted, <code>default_value</code> is <code>None</code>, such that</p>","
","<pre><code>dictionary.get(""bogus"")  # &lt;-- No default specified -- defaults to None
</code></pre>","
",<p>returns <code>None</code> just like </p>,"
","<pre><code>dictionary.get(""bogus"", None)
</code></pre>","
",<p>would. </p>,"
"
"
","<blockquote>
<p><strong>What is the <code>dict.get()</code> method?</strong></p>
</blockquote>","
","<p>As already mentioned the <code>get</code> method contains an additional parameter which indicates the missing value. <a href=""https://docs.python.org/3/library/stdtypes.html#dict.get"" rel=""noreferrer"">From the documentation</a></p>","
","<blockquote>
<pre><code>get(key[, default])
</code></pre>
<p>Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a <code>KeyError</code>.</p>
</blockquote>","
",<p>An example can be </p>,"
","<pre><code>&gt;&gt;&gt; d = {1:2,2:3}
&gt;&gt;&gt; d[1]
2
&gt;&gt;&gt; d.get(1)
2
&gt;&gt;&gt; d.get(3)
&gt;&gt;&gt; repr(d.get(3))
'None'
&gt;&gt;&gt; d.get(3,1)
1
</code></pre>","
","<blockquote>
<p><strong>Are there speed improvements anywhere?</strong></p>
</blockquote>","
","<p>As mentioned <a href=""https://wiki.python.org/moin/PythonSpeed/PerformanceTips"" rel=""noreferrer"">here</a>,</p>","
","<blockquote>
<p>It seems that all three approaches now exhibit similar performance (within about 10% of each other), more or less independent of the properties of the list of words.</p>
</blockquote>","
","<p>Earlier <code>get</code> was considerably slower, However now the speed is almost comparable along with the additional advantage of returning the default value. But to clear all our queries, we can test on a fairly large list (Note that the test includes looking up all the valid keys only)</p>","
","<pre><code>def getway(d):
    for i in range(100):
        s = d.get(i)

def lookup(d):
    for i in range(100):
        s = d[i]
</code></pre>","
","<p>Now timing these two functions using <a href=""https://docs.python.org/3/library/timeit.html"" rel=""noreferrer""><code>timeit</code></a></p>","
","<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; print(timeit.timeit(""getway({i:i for i in range(100)})"",""from __main__ import getway""))
20.2124660015
&gt;&gt;&gt; print(timeit.timeit(""lookup({i:i for i in range(100)})"",""from __main__ import lookup""))
16.16223979
</code></pre>","
","<p>As we can see the lookup is faster than the get as there is no function lookup. This can be seen through <a href=""https://docs.python.org/3/library/dis.html"" rel=""noreferrer""><code>dis</code></a></p>","
","<pre><code>&gt;&gt;&gt; def lookup(d,val):
...     return d[val]
... 
&gt;&gt;&gt; def getway(d,val):
...     return d.get(val)
... 
&gt;&gt;&gt; dis.dis(getway)
  2           0 LOAD_FAST                0 (d)
              3 LOAD_ATTR                0 (get)
              6 LOAD_FAST                1 (val)
              9 CALL_FUNCTION            1
             12 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(lookup)
  2           0 LOAD_FAST                0 (d)
              3 LOAD_FAST                1 (val)
              6 BINARY_SUBSCR       
              7 RETURN_VALUE  
</code></pre>","
","<blockquote>
<p><strong>Where will it be useful?</strong></p>
</blockquote>","
",<p>It will be useful whenever you want to provide a default value whenever you are looking up a dictionary. This reduces</p>,"
","<pre><code> if key in dic:
      val = dic[key]
 else:
      val = def_val
</code></pre>","
","<p>To a single line, <code>val = dic.get(key,def_val)</code></p>","
","<blockquote>
<p><strong>Where will it be NOT useful?</strong></p>
</blockquote>","
",<p>Whenever you want to return a <code>KeyError</code> stating that the particular key is not available. Returning a default value also carries the risk that a particular default value may be a key too! </p>,"
","<blockquote>
<p><strong>Is it possible to have <code>get</code> like feature in <code>dict['key']</code>?</strong></p>
</blockquote>","
","<p>Yes! We need to implement the <a href=""https://docs.python.org/3/reference/datamodel.html#object.__missing__"" rel=""noreferrer""><code>__missing__</code></a> in a dict subclass.</p>","
",<p>A sample program can be</p>,"
","<pre><code>class MyDict(dict):
    def __missing__(self, key):
        return None
</code></pre>","
",<p>A small demonstration can be</p>,"
","<pre><code>&gt;&gt;&gt; my_d = MyDict({1:2,2:3})
&gt;&gt;&gt; my_d[1]
2
&gt;&gt;&gt; my_d[3]
&gt;&gt;&gt; repr(my_d[3])
'None'
</code></pre>","
"
"
","<p><code>get</code> takes a second optional value.  If the specified key does not exist in your dictionary, then this value will be returned.</p>","
","<pre><code>dictionary = {""Name"": ""Harry"", ""Age"": 17}
dictionary.get('Year', 'No available data')
&gt;&gt; 'No available data'
</code></pre>","
","<p>If you do not give the second parameter, <code>None</code> will be returned.</p>","
","<p>If you use indexing as in <code>dictionary['Year']</code>, nonexistent keys will raise <code>KeyError</code>.</p>","
"
"
","<p>I will give a practical example in scraping web data using python, a lot of the times you will get keys with no values, in those cases you will get errors if you use dictionary['key'], whereas dictionary.get('key', 'return_otherwise') has no problems.</p>","
","<p>Similarly, I would use ''.join(list) as opposed to list[0] if you try to capture a single value from a list.</p>","
",<p>hope it helps.</p>,"
",<p>[Edit] Here is a practical example:</p>,"
","<p>Say, you are calling an API, which returns a JOSN file you need to parse. The first JSON looks like following:</p>","
","<pre><code>{""bids"":{""id"":16210506,""submitdate"":""2011-10-16 15:53:25"",""submitdate_f"":""10\/16\/2011 at 21:53 CEST"",""submitdate_f2"":""p\u0159ed 2 lety"",""submitdate_ts"":1318794805,""users_id"":""2674360"",""project_id"":""1250499""}}
</code></pre>","
",<p>The second JOSN is like this:</p>,"
","<pre><code>{""bids"":{""id"":16210506,""submitdate"":""2011-10-16 15:53:25"",""submitdate_f"":""10\/16\/2011 at 21:53 CEST"",""submitdate_f2"":""p\u0159ed 2 lety"",""users_id"":""2674360"",""project_id"":""1250499""}}
</code></pre>","
","<p>Note that the second JSON is missing the ""submitdate_ts"" key, which is pretty normal in any data structure.</p>","
","<p>So when you try to access the value of that key in a loop, can you call it with the following:</p>","
","<pre><code>for item in API_call:
    submitdate_ts = item[""bids""][""submitdate_ts""]
</code></pre>","
","<p>You could, but it will give you a traceback error for the second JSON line, because the key simply doesn't exist.</p>","
","<p>The appropriate way of coding this, could be the following:</p>","
","<pre><code>for item in API_call:
    submitdate_ts = item.get(""bids"", {'x': None}).get(""submitdate_ts"")
</code></pre>","
",<p>{'x': None} is there to avoid the second level getting an error. Of course you can build in more fault tolerance into the code if you are doing scraping. Like first specifying a if condition</p>,"
"
"
",<p>A gotcha to be aware of when using <code>.get()</code>:</p>,"
","<p>If the dictionary contains the key used in the call to <code>.get()</code> and its value is <code>None</code>, the <code>.get()</code> method will return <code>None</code> even if a default value is supplied.</p>","
","<p>For example, the following returns <code>None</code>, not <code>'alt_value'</code> as may be expected:</p>","
","<pre><code>d = {'key': None}
assert None is d.get('key', 'alt_value')
</code></pre>","
","<p><code>.get()</code>'s second value is only returned if the key supplied is NOT in the dictionary, not if the return value of that call is <code>None</code>.</p>","
"
"
","<p>The purpose is that you can give a default value if the key is not found, which is very useful</p>","
","<pre><code>dictionary.get(""Name"",'harry')
</code></pre>","
"
"
","<blockquote>
<p>For what purpose is this function useful?</p>
</blockquote>","
",<p>One particular usage is counting with a dictionary. Let's assume you want to count the number of occurrences of each element in a given list. The common way to do so is to make a dictionary where keys are elements and values are the number of occurrences.</p>,"
","<pre><code>fruits = ['apple', 'banana', 'peach', 'apple', 'pear']
d = {}
for fruit in fruits:
    if fruit not in d:
        d[fruit] = 0
    d[fruit] += 1
</code></pre>","
","<p>Using the <code>.get()</code> method, you can make this code more compact and clear:</p>","
","<pre><code>for fruit in fruits:
    d[fruit] = d.get(fruit, 0) + 1
</code></pre>","
"
"
","<blockquote>
<p>Why dict.get(key) instead of dict[key]?</p>
</blockquote>","
",<h3>0. Summary</h3>,"
","<p>Comparing to <code>dict[key]</code>, <code>dict.get</code> provides a fallback value when looking up for a key.</p>","
",<h3>1. Definition</h3>,"
","<p>get(key[, default])   <a href=""https://docs.python.org/3/library/stdtypes.html#dict.get"" rel=""noreferrer"">4. Built-in Types â€” Python 3.6.4rc1 documentation</a> </p>","
","<p>Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError.</p>","
","<pre><code>d = {""Name"": ""Harry"", ""Age"": 17}
In [4]: d['gender']
KeyError: 'gender'
In [5]: d.get('gender', 'Not specified, please add it')
Out[5]: 'Not specified, please add it'
</code></pre>","
",<h3>2. Problem it solves.</h3>,"
","<p>If without <code>default value</code>, you have to write cumbersome codes to handle such an exception.</p>","
","<pre><code>def get_harry_info(key):
    try:
        return ""{}"".format(d[key])
    except KeyError:
        return 'Not specified, please add it'
In [9]: get_harry_info('Name')
Out[9]: 'Harry'
In [10]: get_harry_info('Gender')
Out[10]: 'Not specified, please add it'
</code></pre>","
","<p>As a convenient solution, <code>dict.get</code> introduces an optional default value avoiding above unwiedly codes.</p>","
",<h3>3. Conclusion</h3>,"
",<p><code>dict.get</code> has an additional default value option to deal with exception if key is absent from the dictionary</p>,"
"
"
","<p>One difference, that can be an advantage, is that if we are looking for a key that doesn't exist we will get None, not like when we use the brackets notation, in which case we will get an error thrown:</p>","
","<pre><code>print(dictionary.get(""address"")) # None
print(dictionary[""address""]) # throws KeyError: 'address'
</code></pre>","
","<p>Last thing that is cool about the get method, is that it receives an additional optional argument for a default value, that is if we tried to get the score value of a student, but the student doesn't have a score key we can get a 0 instead.</p>","
",<p>So instead of doing this (or something similar):</p>,"
","<pre><code>score = None
try:
    score = dictionary[""score""]
except KeyError:
    score = 0
</code></pre>","
",<p>We can do this:</p>,"
","<pre><code>score = dictionary.get(""score"", 0)
# score = 0
</code></pre>","
"
"
","<p>One other use-case that I do not see mentioned is as the <code>key</code> argument for functions like <code>sorted</code>, <code>max</code> and <code>min</code>. The <code>get</code> method allows for keys to be returned based on their values.</p>","
","<pre><code>&gt;&gt;&gt; ages = {""Harry"": 17, ""Lucy"": 16, ""Charlie"": 18}
&gt;&gt;&gt; print(sorted(ages, key=ages.get))
['Lucy', 'Harry', 'Charlie']
&gt;&gt;&gt; print(max(ages, key=ages.get))
Charlie
&gt;&gt;&gt; print(min(ages, key=ages.get))
Lucy
</code></pre>","
","<p>Thanks to this <a href=""https://stackoverflow.com/a/3282904/8716401"">answer</a> to a different question for providing this use-case!</p>","
"
"
","<p>Other <a href=""https://stackoverflow.com/a/37968524/6243352"">answers</a> have clearly explained the difference between dict bracket keying and <code>.get</code> and <a href=""https://stackoverflow.com/a/57582439/6243352"">mentioned a <em>fairly</em> innocuous pitfall</a> when <code>None</code> or the default value is also a valid key.</p>","
","<p>Given this information, it may be tempting conclude that <code>.get</code> is somehow safer and better than bracket indexing and should always be used instead of bracket lookups, as argued in <a href=""https://medium.com/better-programming/stop-using-square-bracket-notation-to-get-a-dictionarys-value-in-python-c617f6ea15a3"" rel=""nofollow noreferrer""><em>Stop Using Square Bracket Notation to Get a Dictionary's Value in Python</em></a>, even in the common case when they expect the lookup to succeed (i.e. never raise a <code>KeyError</code>).</p>","
","<p>The author of the blog post argues that <code>.get</code> ""safeguards your code"":</p>","
","<blockquote>
<p>Notice how trying to reference a term that doesn't exist causes a <code>KeyError</code>. This can cause major headaches, especially when dealing with unpredictable business data.</p>
<p>While we could wrap our statement in a <code>try</code>/<code>except</code> or <code>if</code> statement, this much care for a dictionary term will quickly pile up.</p>
</blockquote>","
","<p>It's true that in the uncommon case for <a href=""https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions"" rel=""nofollow noreferrer"">null</a> (<code>None</code>)-coalescing or otherwise filling in a missing value to handle unpredictable dynamic data, a judiciously-deployed <code>.get</code> is a useful and Pythonic shorthand tool for ungainly <code>if key in dct:</code> and <code>try</code>/<code>except</code> blocks that only exist to set default values when the key might be missing as part of the behavioral specification for the program.</p>","
","<p>However, replacing <em>all</em> bracket dict lookups, including those that you assert must succeed, with <code>.get</code> is a different matter. This practice effectively downgrades a class of <a href=""https://en.wikipedia.org/wiki/Runtime_error_detection"" rel=""nofollow noreferrer"">runtime errors</a> that help reveal bugs into silent illegal state scenarios that tend to be harder to identify and debug.</p>","
","<p>A common mistake among programmers is to think exceptions <em>cause</em> headaches and attempt to suppress them, using techniques like wrapping code in <a href=""https://wiki.c2.com/?PokemonExceptionHandling"" rel=""nofollow noreferrer""><code>try</code> ... <code>except: pass</code> blocks</a>. They later realize the <em>real</em> headache is never seeing the breach of application logic at the point of failure and deploying a broken application. Better programming practice is to embrace assertions for all program invariants such as keys that must be in a dictionary.</p>","
","<p>The hierarchy of error safety is, broadly:</p>","
","<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Error category</th>
<th>Relative ease of debugging</th>
</tr>
</thead>
<tbody>
<tr>
<td>Compile-time error</td>
<td>Easy; go to the line and fix the problem</td>
</tr>
<tr>
<td>Runtime exception</td>
<td>Medium; control needs to flow to the error and it may be due to unanticipated edge cases or hard-to-reproduce state like a race condition between threads, but at least we get a clear error message and stack trace when it does happen.</td>
</tr>
<tr>
<td>Silent logical error</td>
<td>Difficult; we may not even know it exists, and when we do, tracking down state that caused it can be very challenging due to lack of locality and potential for multiple assertion breaches.</td>
</tr>
</tbody>
</table>
</div>","
","<p>When programming language designers talk about program safety, a major goal is to surface, not suppress, genuine errors by promoting runtime errors to compile-time errors and promote silent logical errors to either runtime exceptions or (ideally) compile-time errors.</p>","
","<p>Python, by design as an interpreted language, relies heavily on runtime exceptions instead of compiler errors. Missing methods or properties, illegal type operations like <code>1 + ""a""</code> and out of bounds or missing indices or keys raise by default.</p>","
","<p>Some languages like JS, Java, Rust and Go use the fallback behavior for their maps by default (and in many cases, don't provide a throw/raise alternative), but Python throws by default, along with other languages like C#. Perl/PHP issue an uninitialized value warning.</p>","
","<p>Indiscriminate application of <code>.get</code> to all dict accesses, even those that aren't expected to fail and have no fallback for dealing with <code>None</code> (or whatever default is used) running amok through the code, pretty much tosses away Python's runtime exception safety net for this class of errors, silencing or adding indirection to potential bugs.</p>","
","<p>Other supporting reasons to prefer bracket lookups (with the occasional, well-placed <code>.get</code> where a default is expected):</p>","
","<ul>
<li>Prefer writing standard, idiomatic code using the tools provided by the language. Python programmers usually (correctly) prefer brackets for the exception safety reasons given above and because it's the default behavior for Python dicts.</li>
<li>Always using <code>.get</code> forfeits intent by making cases when you expect to provide a default <code>None</code> value indistinguishable from a lookup you assert must succeed.</li>
<li>Testing increases in complexity in proportion to the new ""legal"" program paths permitted by <code>.get</code>. Effectively, each lookup is now a branch that can succeed or fail -- both cases must be tested to establish coverage, even if the default path is effectively unreachable by specification (ironically leading to additional <code>if val is not None:</code> or <code>try</code> for all future uses of the retrieved value; unnecessary and confusing for something that should never be <code>None</code> in the first place).</li>
<li><a href=""https://stackoverflow.com/questions/39582115/python-dictionary-lookup-performance-get-vs-in""><code>.get</code> is a bit slower</a>.</li>
<li><code>.get</code> is harder to type and uglier to read (compare Java's tacked-on-feel <code>ArrayList</code> syntax to native-feel C# <code>Lists</code> or C++ vector code). Minor.</li>
</ul>","
","<p>Some languages like C++ and Ruby offer alternate methods (<code>at</code> and <code>fetch</code>, respectively) to opt-in to throwing an error on a bad access, while C# offers opt-in fallback value <code>TryGetValue</code> similar to Python's <code>get</code>.</p>","
","<p>Since JS, Java, Ruby, Go and Rust bake the fallback approach of <code>.get</code> into all hash lookups by default, it can't be that bad, one might think. It's true that this isn't the largest issue facing language designers and there are plenty of use cases for the no-throw access version, so it's unsurprising that there's no consensus across languages.</p>","
","<p>But as I've argued, Python (along with C#) has done better than these languages by making the assert option the default. It's a loss of safety and expressivity to opt-out of using it to report contract violations at the point of failure by indiscriminately using <code>.get</code> across the board.</p>","
"
"
","<p>It allow you to provide a default value, instead of get an error when the value is not found. persuedocode like this :</p>","
","<pre><code>class dictionary():
    def get(self,key,default):
         if self[key] is not found : 
               return default
         else:
               return self[key]
</code></pre>","
"
"
",<p>Based on usage should use this <code>get</code> method.</p>,"
",<p><strong>Example1</strong></p>,"
","<pre><code>In [14]: user_dict = {'type': False}

In [15]: user_dict.get('type', '')

Out[15]: False

In [16]: user_dict.get('type') or ''

Out[16]: ''
</code></pre>","
",<p><strong>Example2</strong></p>,"
","<pre><code>In [17]: user_dict = {'type': ""lead""}

In [18]: user_dict.get('type') or ''

Out[18]: 'lead'

In [19]: user_dict.get('type', '')

Out[19]: 'lead'
</code></pre>","
"
"
","<p>In Django model QuerySets, I see that there is a <code>__gt</code> and <code>__lt</code> for comparative values, but is there a <code>__ne</code> or <code>!=</code> (<strong>not equals</strong>)? I want to filter out using a not equals. For example, for</p>","
","<pre><code>Model:
    bool a;
    int x;
</code></pre>","
",<p>I want to do</p>,"
","<pre><code>results = Model.objects.exclude(a=True, x!=5)
</code></pre>","
",<p>The <code>!=</code> is not correct syntax. I also tried <code>__ne</code>.</p>,"
",<p>I ended up using:</p>,"
","<pre><code>results = Model.objects.exclude(a=True, x__lt=5).exclude(a=True, x__gt=5)
</code></pre>","
"
"
","<p>You can use <a href=""https://docs.djangoproject.com/en/stable/topics/db/queries/#complex-lookups-with-q"" rel=""noreferrer"">Q objects</a> for this. They can be negated with the <code>~</code> operator and combined much like normal Python expressions:</p>","
","<pre><code>from myapp.models import Entry
from django.db.models import Q

Entry.objects.filter(~Q(id=3))
</code></pre>","
",<p>will return all entries except the one(s) with <code>3</code> as their ID:</p>,"
","<pre><code>[&lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, ...]
</code></pre>","
"
"
","<p>Your query appears to have a double negative, you want to exclude all rows where <code>x</code> is not 5, so in other words you want to include all rows where <code>x</code> <em>is</em> 5. I believe this will do the trick:</p>","
","<pre><code>results = Model.objects.filter(x=5).exclude(a=True)
</code></pre>","
","<p>To answer your specific question, there is no ""not equal to"" <a href=""http://docs.djangoproject.com/en/stable/ref/models/querysets/#field-lookups"" rel=""noreferrer"">field lookup</a> but that's probably because Django has both <a href=""https://docs.djangoproject.com/en/stable/ref/models/querysets/#filter"" rel=""noreferrer""><code>filter</code></a> and <a href=""https://docs.djangoproject.com/en/stable/ref/models/querysets/#exclude"" rel=""noreferrer""><code>exclude</code></a> methods available so you can always just switch the logic around to get the desired result.</p>","
"
"
","<p>the <code>field=value</code> syntax in queries is a shorthand for <code>field__exact=value</code>.  That is to say that <a href=""http://docs.djangoproject.com/en/dev/ref/models/querysets/#field-lookups"" rel=""noreferrer"">Django puts query operators on query fields in the identifiers</a>.  Django supports the following operators:</p>","
","<pre><code>exact
iexact
contains
icontains
in
gt
gte
lt
lte
startswith
istartswith
endswith
iendswith
range

date
year
iso_year
month
day
week
week_day
iso_week_day
quarter
time
hour
minute
second

isnull
regex
iregex
</code></pre>","
","<p>I'm sure by combining these with the Q objects as <a href=""https://stackoverflow.com/questions/687295/how-do-i-do-a-not-equal-in-django-queryset-filtering/1154977#1154977"">Dave Vogt suggests</a> and using <code>filter()</code> or <code>exclude()</code> as <a href=""https://stackoverflow.com/questions/687295/how-do-i-do-a-not-equal-in-django-queryset-filtering/687316#687316"">Jason Baker suggests</a> you'll get exactly what you need for just about any possible query.</p>","
"
"
",<p>There are three options:</p>,"
","<ol>
<li><p><a href=""https://docs.djangoproject.com/en/stable/topics/db/queries/#retrieving-specific-objects-with-filters"" rel=""noreferrer"">Chain <code>exclude</code> and <code>filter</code></a></p>
<pre><code>results = Model.objects.exclude(a=True).filter(x=5)
</code></pre>
</li>
<li><p>Use <a href=""https://docs.djangoproject.com/en/stable/ref/models/querysets/#q-objects"" rel=""noreferrer""><code>Q()</code> objects</a> and the <a href=""https://docs.djangoproject.com/en/stable/topics/db/queries/#complex-lookups-with-q-objects"" rel=""noreferrer""><code>~</code> operator</a></p>
<pre><code>from django.db.models import Q
object_list = QuerySet.filter(~Q(a=True), x=5)
</code></pre>
</li>
<li><p>Register a <a href=""https://docs.djangoproject.com/en/stable/howto/custom-lookups/#a-lookup-example"" rel=""noreferrer"">custom lookup function</a></p>
<pre><code>from django.db.models import Lookup
from django.db.models import Field

@Field.register_lookup
class NotEqual(Lookup):
    lookup_name = 'ne'

    def as_sql(self, compiler, connection):
        lhs, lhs_params = self.process_lhs(compiler, connection)
        rhs, rhs_params = self.process_rhs(compiler, connection)
        params = lhs_params + rhs_params
        return '%s &lt;&gt; %s' % (lhs, rhs), params
</code></pre>
<p>Which can the be used as usual:</p>
<pre><code>results = Model.objects.exclude(a=True, x__ne=5)
</code></pre>
</li>
</ol>","
"
"
","<p>It's easy to create a custom lookup, there's an <code>__ne</code> lookup example in <a href=""https://docs.djangoproject.com/en/stable/howto/custom-lookups/#a-lookup-example"" rel=""noreferrer"">Django's official documentation</a>.</p>","
",<p>You need to create the lookup itself first:</p>,"
","<pre><code>from django.db.models import Lookup

class NotEqual(Lookup):
    lookup_name = 'ne'

    def as_sql(self, compiler, connection):
        lhs, lhs_params = self.process_lhs(compiler, connection)
        rhs, rhs_params = self.process_rhs(compiler, connection)
        params = lhs_params + rhs_params
        return '%s &lt;&gt; %s' % (lhs, rhs), params
</code></pre>","
",<p>Then you need to register it:</p>,"
","<pre><code>from django.db.models import Field
Field.register_lookup(NotEqual)
</code></pre>","
",<p>And now you can use the <code>__ne</code> lookup in your queries like this:</p>,"
","<pre><code>results = Model.objects.exclude(a=True, x__ne=5)
</code></pre>","
"
"
","<p>While you can filter Models with <code>=</code>, <code>__gt</code>, <code>__gte</code>, <code>__lt</code>, <code>__lte</code>, you cannot use <code>ne</code> or <code>!=</code>. However, you can achieve better filtering using the Q object.</p>","
","<p>You can avoid chaining <code>QuerySet.filter()</code> and <code>QuerySet.exclude()</code>, and use this:</p>","
","<pre><code>from django.db.models import Q
object_list = QuerySet.filter(~Q(field='not wanted'), field='wanted')
</code></pre>","
"
"
","<h1>Pending design decision. Meanwhile, use <code>exclude()</code></h1>","
","<p>The Django issue tracker has the remarkable <a href=""https://code.djangoproject.com/ticket/5763"">entry #5763</a>,
titled <em>""Queryset doesn't have a ""not equal"" filter operator""</em>.
It is remarkable because (as of April 2016) it was 
""opened 9 years ago"" (in the Django stone age),
""closed 4 years ago"", and 
""last changed 5 months ago"".</p>","
","<p>Read through the discussion, it is interesting.
Basically, some people argue <code>__ne</code> should be added
while others say <code>exclude()</code> is clearer and hence <code>__ne</code>
should <em>not</em> be added.</p>","
","<p>(I agree with the former, because the latter argument is
roughly equivalent to saying Python should not have <code>!=</code> because
it has <code>==</code> and <code>not</code> already...)</p>","
"
"
",<p>Using exclude and filter</p>,"
","<pre><code>results = Model.objects.filter(x=5).exclude(a=true)
</code></pre>","
"
"
",<p>You should use <code>filter</code> and <code>exclude</code> like this</p>,"
","<pre><code>results = Model.objects.exclude(a=true).filter(x=5)
</code></pre>","
"
"
","<p><a href=""https://pypi.org/project/django-model-values/"" rel=""noreferrer"">Django-model-values</a> (disclosure: author) provides an implementation of the <a href=""https://github.com/coady/django-model-values/blob/v0.5.1/model_values.py#L374"" rel=""noreferrer"">NotEqual</a> lookup, as in <a href=""https://stackoverflow.com/a/29227603/36433"">this answer</a>.  It also provides syntactic support for it:</p>","
","<pre><code>from model_values import F
Model.objects.exclude(F.x != 5, a=True)
</code></pre>","
"
"
",<p>This will give your desired result.</p>,"
","<pre><code>from django.db.models import Q
results = Model.objects.exclude(Q(a=True) &amp; ~Q(x=5))
</code></pre>","
","<p>for <strong>not equal</strong> you can use <code>~</code> on an equal query. obviously, <code>Q</code> can be used to reach the equal query.</p>","
"
"
",<p>The last bit of code will exclude all objects where x!=5 and a is True.  Try this:</p>,"
","<pre><code>results = Model.objects.filter(a=False, x=5)
</code></pre>","
","<p>Remember, the = sign in the above line is assigning False to the parameter a and the number 5 to the parameter x.  It's not checking for equality.  Thus, there isn't really any way to use the != symbol in a query call.</p>","
"
"
","<p>What you are looking for are all objects that have either <code>a=false</code> <strong>or</strong> <code>x=5</code>. In Django, <code>|</code> serves as <code>OR</code> operator between querysets:</p>","
","<pre><code>results = Model.objects.filter(a=false)|Model.objects.filter(x=5)
</code></pre>","
"
"
","<p><pre>results = Model.objects.filter(a = True).exclude(x = 5)</pre> Generetes this sql: <pre>select * from tablex where a != 0 and x !=5</pre>The sql depends on how your True/False field is represented, and the database engine. The django code is all you need though. </p>","
"
"
",<p>Watch out for lots of incorrect answers to this question!</p>,"
","<p>Gerard's logic is correct, though it will return a list rather than a queryset (which might not matter).</p>","
","<p>If you need a queryset, use Q:</p>","
","<pre><code>from django.db.models import Q
results = Model.objects.filter(Q(a=false) | Q(x=5))
</code></pre>","
"
"
","<p>If we need to exclude/negate based on the sub queryset we can use,</p>","
","<p><a href=""https://docs.djangoproject.com/en/3.2/ref/models/conditional-expressions/#conditional-filter"" rel=""nofollow noreferrer"">Conditional filter</a>:</p>","
","<p>When a conditional expression returns a boolean value, it is possible to use it directly in filters. Here <code>non_unique_account_type</code> returns a boolean value. But, still, we can use it in the filter.</p>","
","<pre><code>&gt;&gt;&gt; non_unique_account_type = Client.objects.filter(
...     account_type=OuterRef('account_type'),
... ).exclude(pk=OuterRef('pk')).values('pk')
&gt;&gt;&gt; Client.objects.filter(~Exists(non_unique_account_type))
</code></pre>","
","<p>In the SQL terms, it evaluates to:</p>","
","<pre><code>SELECT * FROM client c0
WHERE NOT EXISTS (
  SELECT c1.id
  FROM client c1
  WHERE c1.account_type = c0.account_type AND NOT c1.id = c0.id
)
</code></pre>","
"
"
",<p>I have recently installed tensorflow (Windows CPU version) and received the following message:</p>,"
","<blockquote>
<p>Successfully installed tensorflow-1.4.0 tensorflow-tensorboard-0.4.0rc2</p>
</blockquote>","
",<p>Then when I tried to run</p>,"
","<pre class=""lang-py prettyprint-override""><code>import tensorflow as tf
hello = tf.constant('Hello, TensorFlow!')
sess = tf.Session()
sess.run(hello)
'Hello, TensorFlow!'
a = tf.constant(10)
b = tf.constant(32)
sess.run(a + b)
42
sess.close()
</code></pre>","
","<p>(which I found through <a href=""https://github.com/tensorflow/tensorflow"" rel=""noreferrer"">https://github.com/tensorflow/tensorflow</a>)</p>","
",<p>I received the following message:</p>,"
","<blockquote>
<p>2017-11-02 01:56:21.698935: I C:\tf_jenkins\home\workspace\rel-win\M\windows\PY\36\tensorflow\core\platform\cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX AVX2</p>
</blockquote>","
",<p>But when I ran</p>,"
","<pre class=""lang-py prettyprint-override""><code>import tensorflow as tf
hello = tf.constant('Hello, TensorFlow!')
sess = tf.Session()
print(sess.run(hello))
</code></pre>","
","<p>it ran as it should and output <code>Hello, TensorFlow!</code>, which indicates that the installation was successful indeed but there is something else that is wrong.</p>","
",<p>Do you know what the problem is and how to fix it?</p>,"
"
"
",<h2>What is this warning about?</h2>,"
","<p>Modern CPUs provide a lot of low-level instructions, besides the usual arithmetic and logic, known as extensions, e.g. SSE2, SSE4, AVX, etc. From the <a href=""https://en.wikipedia.org/wiki/Advanced_Vector_Extensions"" rel=""noreferrer"">Wikipedia</a>:</p>","
","<blockquote>
<p><strong>Advanced Vector Extensions</strong> (<strong>AVX</strong>) are extensions to the x86 instruction
set architecture for microprocessors from Intel and AMD proposed by
Intel in March 2008 and first supported by Intel with the Sandy
Bridge processor shipping in Q1 2011 and later on by AMD with the
Bulldozer processor shipping in Q3 2011. AVX provides new features,
new instructions and a new coding scheme.</p>
</blockquote>","
","<p>In particular, AVX introduces <a href=""https://en.wikipedia.org/wiki/Multiply%E2%80%93accumulate_operation#Fused_multiply.E2.80.93add"" rel=""noreferrer"">fused multiply-accumulate</a> (FMA) operations, which speed up linear algebra computation, namely dot-product, matrix multiply, convolution, etc. Almost every machine-learning training involves a great deal of these operations, hence will be faster on a CPU that supports AVX and FMA (up to 300%). The warning states that your CPU does support AVX (hooray!).</p>","
",<p>I'd like to stress here: it's all about <strong>CPU only</strong>.</p>,"
",<h2>Why isn't it used then?</h2>,"
","<p>Because tensorflow default distribution is built <a href=""https://github.com/tensorflow/tensorflow/issues/7778"" rel=""noreferrer"">without CPU extensions</a>, such as SSE4.1, SSE4.2, AVX, AVX2, FMA, etc. The default builds (ones from <code>pip install tensorflow</code>) are intended to be compatible with as many CPUs as possible. Another argument is that even with these extensions CPU is a lot slower than a GPU, and it's expected for medium- and large-scale machine-learning training to be performed on a GPU.</p>","
",<h2>What should you do?</h2>,"
","<p><strong>If you have a GPU</strong>, you shouldn't care about AVX support, because most expensive ops will be dispatched on a GPU device (unless explicitly set not to). In this case, you can simply ignore this warning by</p>","
","<pre><code># Just disables the warning, doesn't take advantage of AVX/FMA to run faster
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
</code></pre>","
","<p>... or by setting <code>export TF_CPP_MIN_LOG_LEVEL=2</code> if you're on Unix. Tensorflow is working fine anyway, but you won't see these annoying warnings.</p>","
",<hr/>,"
","<p><strong>If you don't have a GPU</strong> and want to utilize CPU as much as possible, <strong>you should build tensorflow from the source optimized for <em>your</em> CPU</strong> with AVX, AVX2, and FMA enabled if your CPU supports them. It's been discussed in <a href=""https://stackoverflow.com/q/41293077/712995"">this question</a> and also <a href=""https://github.com/tensorflow/tensorflow/issues/8037"" rel=""noreferrer"">this GitHub issue</a>. Tensorflow uses an ad-hoc build system called <a href=""https://bazel.build/"" rel=""noreferrer"">bazel</a> and building it is not that trivial, but is certainly doable. After this, not only will the warning disappear, tensorflow performance should also improve.</p>","
"
"
",<p>Update the tensorflow binary for your CPU &amp; OS using this command</p>,"
","<pre><code>pip install --ignore-installed --upgrade ""Download URL""
</code></pre>","
",<p>The download url of the whl file can be found here</p>,"
","<p><a href=""https://github.com/lakshayg/tensorflow-build"" rel=""noreferrer"">https://github.com/lakshayg/tensorflow-build</a></p>","
"
"
",<h1>CPU optimization with GPU</h1>,"
",<p>There are performance gains you can get by installing TensorFlow from the source even if you have a GPU and use it for training and inference.  The reason is that some TF operations only have CPU implementation and cannot run on your GPU.</p>,"
","<p>Also, there are some performance enhancement tips that makes good use of your CPU.  <a href=""https://www.tensorflow.org/performance/performance_guide"" rel=""noreferrer"">TensorFlow's performance guide</a> recommends the following:</p>","
","<blockquote>
<p>Placing input pipeline operations on the CPU can significantly improve performance. Utilizing the CPU for the input pipeline frees the GPU to focus on training.</p>
</blockquote>","
","<p>For best performance, you should write your code to utilize your CPU and GPU to work in tandem, and not dump it all on your GPU if you have one. 
 Having your TensorFlow binaries optimized for your CPU could pay off hours of saved running time and you have to do it once.</p>","
"
"
","<p>For Windows, you can check the <a href=""https://software.intel.com/en-us/articles/intel-optimization-for-tensorflow-installation-guide#Anaconda_main_win"" rel=""noreferrer"">official Intel MKL optimization for TensorFlow</a> wheels that are compiled with AVX2. This solution speeds up my inference ~x3.</p>","
","<pre><code>conda install tensorflow-mkl
</code></pre>","
"
"
","<p>For Windows (Thanks to the owner f040225), go to here: <a href=""https://github.com/fo40225/tensorflow-windows-wheel"" rel=""noreferrer"">https://github.com/fo40225/tensorflow-windows-wheel</a> to fetch the url for your environment based on the combination of ""tf + python + cpu_instruction_extension"". Then use this cmd to install:</p>","
","<pre><code>pip install --ignore-installed --upgrade ""URL""
</code></pre>","
","<p>If you encounter the ""File is not a zip file"" error, download the .whl to your local computer, and use this cmd to install:</p>","
","<pre><code>pip install --ignore-installed --upgrade /path/target.whl
</code></pre>","
"
"
","<p>If you use the <strong>pip</strong> version of TensorFlow, it means it's already compiled and you are just installing it. Basically you install TensorFlow-GPU, but when you download it from the repository and trying to build it, you should build it with CPU AVX support. If you ignore it, you will get a warning every time when you run on the CPU. You can take a look at those too.</p>","
","<p><a href=""https://ai-pool.com/d/proper-way-to-compile-tensorflow-with-sse4-2-and-avx"" rel=""nofollow noreferrer"">Proper way to compile Tensorflow with SSE4.2 and AVX</a></p>","
","<p><a href=""https://ai-pool.com/d/what_is_avx_cpu_support_in_tensorflow"" rel=""nofollow noreferrer"">What is AVX Cpu support in tensorflow</a></p>","
"
"
",<p>The easiest way that I found to fix this is to uninstall everything then install a specific version of tensorflow-gpu:</p>,"
","<ol>
<li>uninstall tensorflow: </li>
</ol>","
","<pre><code>    pip uninstall tensorflow
</code></pre>","
","<ol start=""2"">
<li>uninstall tensorflow-gpu: (make sure to run this even if you are not sure if you installed it)</li>
</ol>","
","<pre><code>    pip uninstall tensorflow-gpu
</code></pre>","
","<ol start=""3"">
<li>Install specific tensorflow-gpu version:</li>
</ol>","
","<pre><code>    pip install tensorflow-gpu==2.0.0
    pip install tensorflow_hub
    pip install tensorflow_datasets
</code></pre>","
",<p>You can check if this worked by adding the following code into a python file:</p>,"
","<pre><code>from __future__ import absolute_import, division, print_function, unicode_literals

import numpy as np

import tensorflow as tf
import tensorflow_hub as hub
import tensorflow_datasets as tfds

print(""Version: "", tf.__version__)
print(""Eager mode: "", tf.executing_eagerly())
print(""Hub Version: "", hub.__version__)
print(""GPU is"", ""available"" if tf.config.experimental.list_physical_devices(""GPU"") else ""NOT AVAILABLE"")
</code></pre>","
",<p>Run the file and then the output should be something like this:</p>,"
","<pre><code>Version:  2.0.0
Eager mode:  True
Hub Version:  0.7.0
GPU is available
</code></pre>","
",<p>Hope this helps</p>,"
"
"
",<p>What worked for me tho is this library <code>https://pypi.org/project/silence-tensorflow/</code> </p>,"
","<p>Install this library and do as instructed on the page, it works like a charm!</p>","
"
"
",<p>Try using anaconda. I had the same error. One lone option was to build tensorflow from source which took long time. I tried using conda and it worked.</p>,"
","<ol>
<li>Create a new environment in anaconda.</li>
<li><code>conda -c conda-forge tensorflow</code></li>
</ol>","
","<p>Then, it worked.</p>","
"
"
","<p>Is there a portable way to get the current user's username in Python (i.e., one that works under both Linux and Windows, at least).  It would work like <code>os.getuid</code>:</p>","
","<pre><code>&gt;&gt;&gt; os.getuid()
42
&gt;&gt;&gt; os.getusername()
'slartibartfast'
</code></pre>","
","<p>I googled around and was surprised not to find a definitive answer (although perhaps I was just googling poorly).  The <a href=""http://www.python.org/doc/2.5.2/lib/module-pwd.html"" rel=""noreferrer"">pwd</a> module provides a relatively easy way to achieve this under, say, Linux, but it is not present on Windows.  Some of the search results suggested that getting the username under Windows can be complicated in certain circumstances (e.g., running as a Windows service), although I haven't verified that.</p>","
"
"
","<p>Look at <a href=""http://docs.python.org/library/getpass.html"" rel=""noreferrer"">getpass</a> module</p>","
","<pre><code>import getpass
getpass.getuser()
'kostya'
</code></pre>","
","<p>Availability: Unix, Windows</p>","
",<hr/>,"
","<p>p.s. Per comment below ""<em>this function looks at the values of various environment variables to determine the user name. Therefore, this function should not be relied on for access control purposes (or possibly any other purpose, since it allows any user to impersonate any other).</em>""</p>","
"
"
",<p>You best bet would be to combine <code>os.getuid()</code> with <code>pwd.getpwuid()</code>:</p>,"
","<pre><code>import os
import pwd

def get_username():
    return pwd.getpwuid( os.getuid() )[ 0 ]
</code></pre>","
",<p>Refer to the pwd docs for more details:</p>,"
","<p><a href=""http://docs.python.org/library/pwd.html"" rel=""noreferrer"">http://docs.python.org/library/pwd.html</a></p>","
"
"
",<p>You can also use:</p>,"
","<pre><code> os.getlogin()
</code></pre>","
"
"
",<p>You can probably use:</p>,"
","<pre><code>os.environ.get('USERNAME')
</code></pre>","
",<p>or</p>,"
","<pre><code>os.environ.get('USER')
</code></pre>","
",<p>But it's not going to be safe because environment variables can be changed.</p>,"
"
"
","<p>These might work.  I don't know how they behave when running as a service.  They aren't portable, but that's what <code>os.name</code> and <code>if</code>statements are for.</p>","
","<pre><code>win32api.GetUserName()

win32api.GetUserNameEx(...) 
</code></pre>","
","<p>See:
<a href=""http://timgolden.me.uk/python/win32_how_do_i/get-the-owner-of-a-file.html"" rel=""noreferrer"">http://timgolden.me.uk/python/win32_how_do_i/get-the-owner-of-a-file.html</a></p>","
"
"
","<p>If you are needing this to get user's home dir, below could be considered as portable (win32 and linux at least), part of a standard library.</p>","
","<pre><code>&gt;&gt;&gt; os.path.expanduser('~')
'C:\\Documents and Settings\\johnsmith'
</code></pre>","
",<p>Also you could parse such string to get only last path component (ie. user name).</p>,"
","<p>See: <a href=""http://docs.python.org/2/library/os.path.html#os.path.expanduser"" rel=""noreferrer"">os.path.expanduser</a></p>","
"
"
",<p>To me using <code>os</code> module looks the best for portability: Works best on both Linux and Windows.</p>,"
","<pre><code>import os

# Gives user's home directory
userhome = os.path.expanduser('~')          

print ""User's home Dir: "" + userhome

# Gives username by splitting path based on OS
print ""username: "" + os.path.split(userhome)[-1]           
</code></pre>","
",<p>Output:</p>,"
",<p>Windows:</p>,"
","<blockquote>
<p>User's home Dir: C:\Users\myuser</p>
<p>username: myuser</p>
</blockquote>","
",<p>Linux:</p>,"
","<blockquote>
<p>User's home Dir: /root</p>
<p>username: root</p>
</blockquote>","
",<p>No need of installing any modules or extensions. </p>,"
"
"
","<p>Combined <code>pwd</code> and <code>getpass</code> approach, based on other answers:</p>","
","<pre><code>try:
  import pwd
except ImportError:
  import getpass
  pwd = None

def current_user():
  if pwd:
    return pwd.getpwuid(os.geteuid()).pw_name
  else:
    return getpass.getuser()
</code></pre>","
"
"
","<p><a href=""https://github.com/giampaolo/psutil"" rel=""noreferrer"">psutil</a> provides a portable way that doesn't use environment variables like the <code>getpass</code> solution.  It is less prone to security issues, and should probably be the accepted answer as of today.</p>","
","<pre><code>import psutil

def get_username():
    return psutil.Process().username()
</code></pre>","
","<p>Under the hood, this combines the <code>getpwuid</code> based method for unix and the <code>GetTokenInformation</code> method for Windows.</p>","
"
"
","<p>For UNIX, at least, this works...</p>","
","<pre><code>import commands
username = commands.getoutput(""echo $(whoami)"")
print username
</code></pre>","
","<p><strong>edit:</strong>
I just looked it up and this works on Windows and UNIX:</p>","
","<pre><code>import commands
username = commands.getoutput(""whoami"")
</code></pre>","
","<p>On UNIX it returns your username, but on Windows, it returns your user's group, slash, your username.</p>","
",<p>--</p>,"
",<p>I.E.</p>,"
","<p>UNIX returns: ""username""</p>","
","<p>Windows returns: ""domain/username""</p>","
",<p>--</p>,"
","<p>It's interesting, but probably not ideal unless you are doing something in the terminal anyway... in which case you would probably be using <code>os.system</code> to begin with. For example, a while ago I needed to add my user to a group, so I did (this is in Linux, mind you)</p>","
","<pre><code>import os
os.system(""sudo usermod -aG \""group_name\"" $(whoami)"")
print ""You have been added to \""group_name\""! Please log out for this to take effect""
</code></pre>","
",<p>I feel like that is easier to read <strong>and</strong> you don't have to import pwd or getpass.</p>,"
","<p>I also feel like having ""domain/user"" could be helpful in certain applications in Windows.</p>","
"
"
",<p>Using only standard python libs:</p>,"
","<pre><code>from os import environ,getcwd
getUser = lambda: environ[""USERNAME""] if ""C:"" in getcwd() else environ[""USER""]
user = getUser()
</code></pre>","
","<p>Works on Windows (if you are on drive C), Mac or Linux</p>","
","<p>Alternatively, you could remove one line with an immediate invocation:</p>","
","<pre><code>from os import environ,getcwd
user = (lambda: environ[""USERNAME""] if ""C:"" in getcwd() else environ[""USER""])()
</code></pre>","
"
"
","<p>I wrote the plx module some time ago to get the user name in a portable way on Unix and Windows (among other things):
<a href=""http://www.decalage.info/en/python/plx"" rel=""nofollow noreferrer"">http://www.decalage.info/en/python/plx</a></p>","
",<p>Usage:</p>,"
","<pre><code>import plx

username = plx.get_username()
</code></pre>","
",<p>(it requires win32 extensions on Windows)</p>,"
"
"
","<p>You can get the current username on Windows by going through the Windows API, although it's a bit cumbersome to invoke via the ctypes FFI (<a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms683179"" rel=""nofollow"">GetCurrentProcess</a> â†’ <a href=""http://msdn.microsoft.com/en-us/library/aa379295"" rel=""nofollow"">OpenProcessToken</a> â†’ <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa446671"" rel=""nofollow"">GetTokenInformation</a> â†’ <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa379166"" rel=""nofollow"">LookupAccountSid</a>).</p>","
","<p>I wrote a small module that can do this straight from Python, <a href=""https://gist.github.com/mkropat/7559409"" rel=""nofollow"">getuser.py</a>. Usage:</p>","
","<pre><code>import getuser
print(getuser.lookup_username())
</code></pre>","
",<p>It works on both Windows and *nix (the latter uses the <code>pwd</code> module as described in the other answers).</p>,"
"
"
","<p>None of the above worked in my case (scroll down to the actual solution).<br/>
The problem I'm getting with all solutions is the wrong username when running commands with <code>sudo</code>:</p>","
","<ul>
<li><code>psutil</code> soulution:</li>
</ul>","
","<pre class=""lang-sh prettyprint-override""><code>$ python3
&gt;&gt;&gt; import psutil
&gt;&gt;&gt; psutil.Process().username()
'ubuntu' # OK!

$ sudo su
$ python3
&gt;&gt;&gt; import psutil
&gt;&gt;&gt; psutil.Process().username()
'root' # OK!

$ sudo python3
&gt;&gt;&gt; import psutil
&gt;&gt;&gt; psutil.Process().username()
'root' # WRONG, should be ubuntu!
</code></pre>","
","<ul>
<li><code>getpass</code> solution:</li>
</ul>","
","<pre class=""lang-sh prettyprint-override""><code>$ python3
&gt;&gt;&gt; import getpass
&gt;&gt;&gt; getpass.getuser()
'ubuntu' # OK!

$ sudo su
$ python3
&gt;&gt;&gt; import getpass
&gt;&gt;&gt; getpass.getuser()
'root' # OK!

$ sudo python3
&gt;&gt;&gt; import getpass
&gt;&gt;&gt; getpass.getuser()
'root' # WRONG, should be ubuntu!
</code></pre>","
","<ul>
<li><code>pwd</code> + <code>os.getuid</code> solution:</li>
</ul>","
","<pre class=""lang-sh prettyprint-override""><code>$ python3
&gt;&gt;&gt; import os, pwd
&gt;&gt;&gt; pwd.getpwuid( os.getuid() )[ 0 ]
'ubuntu' # OK!

$ sudo su
$ python3
&gt;&gt;&gt; import os, pwd
&gt;&gt;&gt; pwd.getpwuid( os.getuid() )[ 0 ]
'root' # OK!

$ sudo python3
&gt;&gt;&gt; import getpass
&gt;&gt;&gt; getpass.getuser()
'root' # WRONG, should be ubuntu!
</code></pre>","
","<ul>
<li><code>os.getlogin</code> works a bit different, but still wrong:</li>
</ul>","
","<pre class=""lang-sh prettyprint-override""><code>$ python3
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getlogin()
'ubuntu' # OK!

$ sudo su
$ python3
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getlogin()
'ubuntu' # WRONG, should be root!


$ sudo python3
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getlogin()
'ubuntu' # OK!
</code></pre>","
","<ul>
<li><code>os.getenv</code> gives the same results:</li>
</ul>","
","<pre class=""lang-sh prettyprint-override""><code>$ python3
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getenv('SUDO_USER', os.getenv('USER'))
'ubuntu' # OK!

$ sudo su
$ python3
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getenv('SUDO_USER', os.getenv('USER'))
'ubuntu' # WRONG, should be root!


$ sudo python3
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getenv('SUDO_USER', os.getenv('USER'))
'ubuntu' # OK!
</code></pre>","
",<p>Switching <code>SUDO_USER</code> and <code>USER</code> gives the wrong result in <code>sudo python3</code> case.</p>,"
",<h2>Actual solution (non-portable)</h2>,"
",<p>Solution is a bit tricky and rely on the default root home directory location but works for all cases:</p>,"
","<pre class=""lang-sh prettyprint-override""><code>$ python3
&gt;&gt;&gt; import os
&gt;&gt;&gt; 'root' if os.path.expanduser('~') == '/root' else os.getenv('SUDO_USER', os.getenv('USER'))
'ubuntu' # OK!

$ sudo su
$ python3
&gt;&gt;&gt; import os
&gt;&gt;&gt; 'root' if os.path.expanduser('~') == '/root' else os.getenv('SUDO_USER', os.getenv('USER'))
'root' #  OK!

$ sudo python3
&gt;&gt;&gt; import os
&gt;&gt;&gt; 'root' if os.path.expanduser('~') == '/root' else os.getenv('SUDO_USER', os.getenv('USER'))
'ubuntu' # OK!
</code></pre>","
"
"
",<p>How can I find local IP addresses (i.e. 192.168.x.x or 10.0.x.x) in Python platform independently and using only the standard library?</p>,"
"
"
","<p>I just found this but it seems a bit hackish, however they say tried it on *nix and I did on windows and it worked.</p>","
","<pre><code>import socket
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect((""8.8.8.8"", 80))
print(s.getsockname()[0])
s.close()
</code></pre>","
","<p>This assumes you have an internet access, and that there is no local proxy.</p>","
"
"
","<pre><code>import socket
socket.gethostbyname(socket.gethostname())
</code></pre>","
","<p>This won't work always (returns <code>127.0.0.1</code> on machines having the hostname in <code>/etc/hosts</code> as <code>127.0.0.1</code>), a paliative would be what gimel shows, use <code>socket.getfqdn()</code> instead. Of course your machine needs a resolvable hostname.</p>","
"
"
","<p><strong>This method returns the ""primary"" IP on the local box (the one with a default route)</strong>.</p>","
","<ul>
<li>Does NOT need routable net access or any connection at all.</li>
<li>Works even if all interfaces are unplugged from the network.</li>
<li>Does NOT need or even try to get <em>anywhere else</em>.</li>
<li>Works with NAT, public, private, external, and internal IP's</li>
<li>Pure Python 2 (or 3) with no external dependencies.</li>
<li>Works on Linux, Windows, and OSX.</li>
</ul>","
",<p>Python 3 or 2:</p>,"
","<pre><code>import socket
def get_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.settimeout(0)
    try:
        # doesn't even have to be reachable
        s.connect(('10.255.255.255', 1))
        IP = s.getsockname()[0]
    except Exception:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP
</code></pre>","
","<p>This returns a single IP which is the primary (the one with a default route). If you need instead all IP's attached to all interfaces (including localhost, etc), see something like <a href=""https://stackoverflow.com/questions/166506/finding-local-ip-addresses-using-pythons-stdlib/24564613#24564613"">this answer</a>.</p>","
","<p>If you are behind a NAT firewall like your wifi box at home, then this will not show your public NAT IP, but instead your private IP on the local network which has a default route to your local WIFI router; getting your wifi router's external IP would either require running this on THAT box, or connecting to an external service such as whatismyip.com/whatismyipaddress.com that could reflect back the IP... but that is completely different from the original question. :)</p>","
"
"
",<p><strong>As an alias called <code>myip</code>:</strong></p>,"
","<pre><code>alias myip=""python -c 'import socket; print([l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith(\""127.\"")][:1], [[(s.connect((\""8.8.8.8\"", 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0])'""
</code></pre>","
","<ul>
<li>Works correctly with Python 2.x, Python 3.x, modern and old Linux distros, OSX/macOS and Windows for finding the current IPv4 address.</li>
<li>Will not return the correct result for machines with multiple IP addresses, IPv6, no configured IP address or no internet access.</li>
<li>Reportedly, this does not work on the latest releases of macOS.</li>
</ul>","
","<p><strong>NOTE</strong>: If you intend to use something like this within a Python program, the proper way is to make use of a Python module that has IPv6 support.</p>","
",<hr/>,"
","<p><strong>Same as above, but only the Python code:</strong></p>","
","<pre><code>import socket
print([l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith(""127."")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0])
</code></pre>","
","<ul>
<li>This will throw an exception if no IP address is configured.</li>
</ul>","
",<hr/>,"
",<p><strong>Version that will also work on LANs without an internet connection:</strong></p>,"
","<pre><code>import socket
print((([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith(""127."")] or [[(s.connect((""8.8.8.8"", 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) + [""no IP found""])[0])
</code></pre>","
","<p>(thanks <a href=""https://stackoverflow.com/users/191246/ccpizza"">@ccpizza</a>)</p>","
",<hr/>,"
",<p><strong>Background</strong>:</p>,"
","<p>Using <code>socket.gethostbyname(socket.gethostname())</code> did not work here, because one of the computers I was on had an <code>/etc/hosts</code> with duplicate entries and references to itself. <code>socket.gethostbyname()</code> only returns the last entry in <code>/etc/hosts</code>.</p>","
","<p>This was my initial attempt, which weeds out all addresses starting with <code>""127.""</code>:</p>","
","<pre class=""lang-py prettyprint-override""><code>import socket
print([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith(""127."")][:1])
</code></pre>","
","<p>This works with Python 2 and 3, on Linux and Windows, but does not deal with several network devices or IPv6. However, it stopped working on recent Linux distros, so I tried this alternative technique instead. It tries to connect to the Google DNS server at <code>8.8.8.8</code> at port <code>53</code>:</p>","
","<pre class=""lang-py prettyprint-override""><code>import socket
print([(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1])
</code></pre>","
","<p>Then I combined the two above techniques into a one-liner that should work everywhere, and created the <code>myip</code> alias and Python snippet at the top of this answer.</p>","
","<p>With the increasing popularity of IPv6, and for servers with multiple network interfaces, using a third-party Python module for finding the IP address is probably both more robust and reliable than any of the methods listed here.</p>","
"
"
","<p>You can use the <a href=""http://pypi.python.org/pypi/netifaces"" rel=""noreferrer"">netifaces</a> module. Just type:</p>","
","<pre><code>pip install netifaces
</code></pre>","
",<p>in your command shell and it will install itself on default Python installation.</p>,"
",<p>Then you can use it like this:</p>,"
","<pre><code>from netifaces import interfaces, ifaddresses, AF_INET
for ifaceName in interfaces():
    addresses = [i['addr'] for i in ifaddresses(ifaceName).setdefault(AF_INET, [{'addr':'No IP addr'}] )]
    print '%s: %s' % (ifaceName, ', '.join(addresses))
</code></pre>","
",<p>On my computer it printed:</p>,"
","<pre>{45639BDC-1050-46E0-9BE9-075C30DE1FBC}: 192.168.0.100
{D43A468B-F3AE-4BF9-9391-4863A4500583}: 10.5.9.207</pre>","
","<p>Author of this module claims it should work on Windows, UNIX and Mac OS X.</p>","
"
"
","<p>If the computer has a route to the Internet, this will <em>always</em> work to get the preferred local ip address, even if /etc/hosts is not set correctly.</p>","
","<pre><code>import socket

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect(('8.8.8.8', 1))  # connect() for UDP doesn't send packets
local_ip_address = s.getsockname()[0]
</code></pre>","
"
"
",<p><strong>Socket API method</strong></p>,"
","<p>see <a href=""https://stackoverflow.com/a/28950776/711085"">https://stackoverflow.com/a/28950776/711085</a></p>","
",<p>Downsides:</p>,"
","<ul>
<li><em>Not cross-platform.</em></li>
<li>Requires more fallback code, tied to existence of particular addresses on the internet</li>
<li>This will also not work if you're behind a NAT</li>
<li>Probably creates a UDP connection, not independent of (usually ISP's) DNS availability (see other answers for ideas like using 8.8.8.8: Google's (coincidentally also DNS) server)</li>
<li>Make sure you make the destination address UNREACHABLE, like a numeric IP address that is spec-guaranteed to be unused. Do NOT use some domain like fakesubdomain.google.com or somefakewebsite.com; you'll still be spamming that party (now or in the future), and spamming your own network boxes as well in the process.</li>
</ul>","
",<hr/>,"
",<p><strong>Reflector method</strong></p>,"
","<p>(Do note that this does not answer the OP's question of the local IP address, e.g. 192.168...; it gives you your public IP address, which might be more desirable depending on use case.)</p>","
","<p>You can query some site like whatismyip.com (but with an API), such as:</p>","
","<pre><code>from urllib.request import urlopen
import re
def getPublicIp():
    data = str(urlopen('http://checkip.dyndns.com/').read())
    # data = '&lt;html&gt;&lt;head&gt;&lt;title&gt;Current IP Check&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Current IP Address: 65.96.168.198&lt;/body&gt;&lt;/html&gt;\r\n'

    return re.compile(r'Address: (\d+\.\d+\.\d+\.\d+)').search(data).group(1)
</code></pre>","
",<p>or if using python2:</p>,"
","<pre><code>from urllib import urlopen
import re
def getPublicIp():
    data = str(urlopen('http://checkip.dyndns.com/').read())
    # data = '&lt;html&gt;&lt;head&gt;&lt;title&gt;Current IP Check&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Current IP Address: 65.96.168.198&lt;/body&gt;&lt;/html&gt;\r\n'

    return re.compile(r'Address: (\d+\.\d+\.\d+\.\d+)').search(data).group(1)
</code></pre>","
",<p>Advantages:</p>,"
","<ul>
<li>One upside of this method is it's cross-platform</li>
<li>It works from behind ugly NATs (e.g. your home router).</li>
</ul>","
",<p>Disadvantages (and workarounds):</p>,"
","<ul>
<li>Requires this website to be up, the format to not change (almost certainly won't), and your DNS servers to be working. One can mitigate this issue by also querying other third-party IP address reflectors in case of failure.</li>
<li>Possible attack vector if you don't query multiple reflectors (to prevent a compromised reflector from telling you that your address is something it's not), or if you don't use HTTPS (to prevent a man-in-the-middle attack pretending to be the server)</li>
</ul>","
",<hr/>,"
","<p><em>edit</em>: Though initially I thought these methods were really bad (unless you use many fallbacks, the code may be irrelevant many years from now), it does pose the question ""what is the internet?"". A computer may have many interfaces pointing to many different networks. For a more thorough description of the topic, google for <code>gateways and routes</code>. A computer may be able to access an internal network via an internal gateway, or access the world-wide web via a gateway on for example a router (usually the case). The local IP address that the OP asks about is only well-defined with respect to a single link layer, so you have to specify that (""is it the network card, or the ethernet cable, which we're talking about?""). There may be multiple non-unique answers to this question as posed. However the global IP address on the world-wide web is probably well-defined (in the absence of massive network fragmentation): probably the return path via the gateway which can access the TLDs.</p>","
"
"
",<p>On Linux:</p>,"
","<pre><code>&gt;&gt;&gt; import socket, struct, fcntl
&gt;&gt;&gt; sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&gt;&gt;&gt; sockfd = sock.fileno()
&gt;&gt;&gt; SIOCGIFADDR = 0x8915
&gt;&gt;&gt;
&gt;&gt;&gt; def get_ip(iface = 'eth0'):
...     ifreq = struct.pack('16sH14s', iface, socket.AF_INET, '\x00'*14)
...     try:
...         res = fcntl.ioctl(sockfd, SIOCGIFADDR, ifreq)
...     except:
...         return None
...     ip = struct.unpack('16sH2x4s8x', res)[2]
...     return socket.inet_ntoa(ip)
... 
&gt;&gt;&gt; get_ip('eth0')
'10.80.40.234'
&gt;&gt;&gt; 
</code></pre>","
"
"
",<p>im using following module:</p>,"
","<pre><code>#!/usr/bin/python
# module for getting the lan ip address of the computer

import os
import socket

if os.name != ""nt"":
    import fcntl
    import struct
    def get_interface_ip(ifname):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        return socket.inet_ntoa(fcntl.ioctl(
                s.fileno(),
                0x8915,  # SIOCGIFADDR
                struct.pack('256s', bytes(ifname[:15], 'utf-8'))
                # Python 2.7: remove the second argument for the bytes call
            )[20:24])

def get_lan_ip():
    ip = socket.gethostbyname(socket.gethostname())
    if ip.startswith(""127."") and os.name != ""nt"":
        interfaces = [""eth0"",""eth1"",""eth2"",""wlan0"",""wlan1"",""wifi0"",""ath0"",""ath1"",""ppp0""]
        for ifname in interfaces:
            try:
                ip = get_interface_ip(ifname)
                break;
            except IOError:
                pass
    return ip
</code></pre>","
","<p>Tested with windows and linux (and doesnt require additional modules for those)
intended for use on systems which are in a single IPv4 based LAN.</p>","
","<p>The fixed list of interface names does not work for recent linux versions, which have adopted the systemd v197 change regarding predictable interface names as pointed out by <a href=""https://stackoverflow.com/questions/166506/finding-local-ip-addresses-using-pythons-stdlib/1947766?noredirect=1#comment35654143_1947766"">Alexander</a>.
In such cases, you need to manually replace the list with the interface names on your system, or use another solution like <a href=""http://alastairs-place.net/projects/netifaces/"" rel=""noreferrer"">netifaces</a>.</p>","
"
"
","<p><strong>[Windows only]</strong> If you don't want to use external packages and don't want to rely on outside Internet servers, this might help. It's a code sample that I found on <a href=""http://www.google.com/codesearch?hl=en&amp;lr=&amp;q=getMACAddrWin&amp;sbtn=Search"" rel=""nofollow noreferrer"">Google Code Search</a> and modified to return required information:</p>","
","<pre><code>def getIPAddresses():
    from ctypes import Structure, windll, sizeof
    from ctypes import POINTER, byref
    from ctypes import c_ulong, c_uint, c_ubyte, c_char
    MAX_ADAPTER_DESCRIPTION_LENGTH = 128
    MAX_ADAPTER_NAME_LENGTH = 256
    MAX_ADAPTER_ADDRESS_LENGTH = 8
    class IP_ADDR_STRING(Structure):
        pass
    LP_IP_ADDR_STRING = POINTER(IP_ADDR_STRING)
    IP_ADDR_STRING._fields_ = [
        (""next"", LP_IP_ADDR_STRING),
        (""ipAddress"", c_char * 16),
        (""ipMask"", c_char * 16),
        (""context"", c_ulong)]
    class IP_ADAPTER_INFO (Structure):
        pass
    LP_IP_ADAPTER_INFO = POINTER(IP_ADAPTER_INFO)
    IP_ADAPTER_INFO._fields_ = [
        (""next"", LP_IP_ADAPTER_INFO),
        (""comboIndex"", c_ulong),
        (""adapterName"", c_char * (MAX_ADAPTER_NAME_LENGTH + 4)),
        (""description"", c_char * (MAX_ADAPTER_DESCRIPTION_LENGTH + 4)),
        (""addressLength"", c_uint),
        (""address"", c_ubyte * MAX_ADAPTER_ADDRESS_LENGTH),
        (""index"", c_ulong),
        (""type"", c_uint),
        (""dhcpEnabled"", c_uint),
        (""currentIpAddress"", LP_IP_ADDR_STRING),
        (""ipAddressList"", IP_ADDR_STRING),
        (""gatewayList"", IP_ADDR_STRING),
        (""dhcpServer"", IP_ADDR_STRING),
        (""haveWins"", c_uint),
        (""primaryWinsServer"", IP_ADDR_STRING),
        (""secondaryWinsServer"", IP_ADDR_STRING),
        (""leaseObtained"", c_ulong),
        (""leaseExpires"", c_ulong)]
    GetAdaptersInfo = windll.iphlpapi.GetAdaptersInfo
    GetAdaptersInfo.restype = c_ulong
    GetAdaptersInfo.argtypes = [LP_IP_ADAPTER_INFO, POINTER(c_ulong)]
    adapterList = (IP_ADAPTER_INFO * 10)()
    buflen = c_ulong(sizeof(adapterList))
    rc = GetAdaptersInfo(byref(adapterList[0]), byref(buflen))
    if rc == 0:
        for a in adapterList:
            adNode = a.ipAddressList
            while True:
                ipAddr = adNode.ipAddress
                if ipAddr:
                    yield ipAddr
                adNode = adNode.next
                if not adNode:
                    break
</code></pre>","
",<p>Usage:</p>,"
","<pre><code>&gt;&gt;&gt; for addr in getIPAddresses():
&gt;&gt;&gt;    print addr
192.168.0.100
10.5.9.207
</code></pre>","
","<p>As it relies on <code>windll</code>, this will work only on Windows.</p>","
"
"
",<p>I use this on my ubuntu machines:</p>,"
","<pre><code>import commands
commands.getoutput(""/sbin/ifconfig"").split(""\n"")[1].split()[1][5:]
</code></pre>","
",<p>This doesn't work.</p>,"
"
"
",<p>Variation on ninjagecko's answer. This should work on any LAN that allows UDP broadcast and doesn't require access to an address on the LAN or internet.</p>,"
","<pre><code>import socket
def getNetworkIp():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    s.connect(('&lt;broadcast&gt;', 0))
    return s.getsockname()[0]

print (getNetworkIp())
</code></pre>","
"
"
","<p>A version I do not believe that has been posted yet. 
I tested with python 2.7 on Ubuntu 12.04.</p>","
","<p>Found this solution at : <a href=""http://code.activestate.com/recipes/439094-get-the-ip-address-associated-with-a-network-inter/"" rel=""noreferrer"">http://code.activestate.com/recipes/439094-get-the-ip-address-associated-with-a-network-inter/</a></p>","
","<pre><code>import socket
import fcntl
import struct

def get_ip_address(ifname):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return socket.inet_ntoa(fcntl.ioctl(
        s.fileno(),
        0x8915,  # SIOCGIFADDR
        struct.pack('256s', ifname[:15])
    )[20:24])
</code></pre>","
",<p>Example Result:</p>,"
","<pre><code>&gt;&gt;&gt; get_ip_address('eth0')
'38.113.228.130'
</code></pre>","
"
"
",<p>On Debian (tested) and I suspect most Linux's..</p>,"
","<pre><code>import commands

RetMyIP = commands.getoutput(""hostname -I"")
</code></pre>","
",<p>On MS Windows (tested) </p>,"
","<pre><code>import socket

socket.gethostbyname(socket.gethostname())
</code></pre>","
"
"
","<p>This is a variant of UnkwnTech's answer -- it provides a <code>get_local_addr()</code> function, which returns the primary LAN ip address of the host. I'm posting it because this adds a number of things: ipv6 support, error handling, ignoring localhost/linklocal addrs, and uses a TESTNET addr (rfc5737) to connect to.</p>","
","<pre><code># imports
import errno
import socket
import logging

# localhost prefixes
_local_networks = (""127."", ""0:0:0:0:0:0:0:1"")

# ignore these prefixes -- localhost, unspecified, and link-local
_ignored_networks = _local_networks + (""0."", ""0:0:0:0:0:0:0:0"", ""169.254."", ""fe80:"")

def detect_family(addr):
    if ""."" in addr:
        assert "":"" not in addr
        return socket.AF_INET
    elif "":"" in addr:
        return socket.AF_INET6
    else:
        raise ValueError(""invalid ipv4/6 address: %r"" % addr)

def expand_addr(addr):
    """"""convert address into canonical expanded form --
    no leading zeroes in groups, and for ipv6: lowercase hex, no collapsed groups.
    """"""
    family = detect_family(addr)
    addr = socket.inet_ntop(family, socket.inet_pton(family, addr))
    if ""::"" in addr:
        count = 8-addr.count("":"")
        addr = addr.replace(""::"", ("":0"" * count) + "":"")
        if addr.startswith("":""):
            addr = ""0"" + addr
    return addr

def _get_local_addr(family, remote):
    try:
        s = socket.socket(family, socket.SOCK_DGRAM)
        try:
            s.connect((remote, 9))
            return s.getsockname()[0]
        finally:
            s.close()
    except socket.error:
        # log.info(""trapped error connecting to %r via %r"", remote, family, exc_info=True)
        return None

def get_local_addr(remote=None, ipv6=True):
    """"""get LAN address of host

    :param remote:
        return  LAN address that host would use to access that specific remote address.
        by default, returns address it would use to access the public internet.

    :param ipv6:
        by default, attempts to find an ipv6 address first.
        if set to False, only checks ipv4.

    :returns:
        primary LAN address for host, or ``None`` if couldn't be determined.
    """"""
    if remote:
        family = detect_family(remote)
        local = _get_local_addr(family, remote)
        if not local:
            return None
        if family == socket.AF_INET6:
            # expand zero groups so the startswith() test works.
            local = expand_addr(local)
        if local.startswith(_local_networks):
            # border case where remote addr belongs to host
            return local
    else:
        # NOTE: the two addresses used here are TESTNET addresses,
        #       which should never exist in the real world.
        if ipv6:
            local = _get_local_addr(socket.AF_INET6, ""2001:db8::1234"")
            # expand zero groups so the startswith() test works.
            if local:
                local = expand_addr(local)
        else:
            local = None
        if not local:
            local = _get_local_addr(socket.AF_INET, ""192.0.2.123"")
            if not local:
                return None
    if local.startswith(_ignored_networks):
        return None
    return local
</code></pre>","
"
"
","<p>I'm afraid there aren't any good platform independent ways to do this other than connecting to another computer and having it send you your IP address.  For example:  <a href=""http://www.findmyipaddress.info/locateipaddresses.html"" rel=""noreferrer"">findmyipaddress</a>.  Note that this won't work if you need an IP address that's behind NAT unless the computer you're connecting to is behind NAT as well.</p>","
","<p>Here's one solution that works in Linux:  <a href=""http://code.activestate.com/recipes/439094/"" rel=""noreferrer"">get the IP address associated with a network interface</a>.</p>","
"
"
",<p>FYI I can verify that the method:</p>,"
","<pre><code>import socket
addr = socket.gethostbyname(socket.gethostname())
</code></pre>","
","<p>Works in OS X (10.6,10.5), Windows XP, and on a well administered RHEL department server.  It did not work on a very minimal CentOS VM that I just do some kernel hacking on.  So for that instance you can just check for a 127.0.0.1 address and in that case do the following:</p>","
","<pre><code>if addr == ""127.0.0.1"":
     import commands
     output = commands.getoutput(""/sbin/ifconfig"")
     addr = parseaddress(output)
</code></pre>","
",<p>And then parse the ip address from the output.  It should be noted that ifconfig is not in a normal user's PATH by default and that is why I give the full path in the command.  I hope this helps.</p>,"
"
"
","<p>One simple way to produce ""clean"" output via command line utils:</p>","
","<pre><code>import commands
ips = commands.getoutput(""/sbin/ifconfig | grep -i \""inet\"" | grep -iv \""inet6\"" | "" +
                         ""awk {'print $2'} | sed -ne 's/addr\:/ /p'"")
print ips
</code></pre>","
",<p>It will show all IPv4 addresses on the system.</p>,"
"
"
","<p>For linux, you can just use <code>check_output</code> of the <code>hostname -I</code> system command like so:</p>","
","<pre><code>from subprocess import check_output
check_output(['hostname', '-I'])
</code></pre>","
"
"
",<p>This will work on most linux boxes:</p>,"
","<pre><code>import socket, subprocess, re
def get_ipv4_address():
    """"""
    Returns IP address(es) of current machine.
    :return:
    """"""
    p = subprocess.Popen([""ifconfig""], stdout=subprocess.PIPE)
    ifc_resp = p.communicate()
    patt = re.compile(r'inet\s*\w*\S*:\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
    resp = patt.findall(ifc_resp[0])
    print resp

get_ipv4_address()
</code></pre>","
"
"
","<p>This answer is my personal attempt to solve the problem of getting the LAN IP, since <code>socket.gethostbyname(socket.gethostname())</code> also returned 127.0.0.1. This method does not require Internet just a LAN connection. Code is for Python 3.x but could easily be converted for 2.x. Using UDP Broadcast:</p>","
","<pre><code>import select
import socket
import threading
from queue import Queue, Empty

def get_local_ip():
        def udp_listening_server():
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.bind(('&lt;broadcast&gt;', 8888))
            s.setblocking(0)
            while True:
                result = select.select([s],[],[])
                msg, address = result[0][0].recvfrom(1024)
                msg = str(msg, 'UTF-8')
                if msg == 'What is my LAN IP address?':
                    break
            queue.put(address)

        queue = Queue()
        thread = threading.Thread(target=udp_listening_server)
        thread.queue = queue
        thread.start()
        s2 = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s2.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        waiting = True
        while waiting:
            s2.sendto(bytes('What is my LAN IP address?', 'UTF-8'), ('&lt;broadcast&gt;', 8888))
            try:
                address = queue.get(False)
            except Empty:
                pass
            else:
                waiting = False
        return address[0]

if __name__ == '__main__':
    print(get_local_ip())
</code></pre>","
"
"
","<pre><code>import socket
[i[4][0] for i in socket.getaddrinfo(socket.gethostname(), None)]
</code></pre>","
"
"
","<p>If you're looking for an IPV4 address different from your localhost IP address <code>127.0.0.1</code>, here is a neat piece of python codes:</p>","
","<pre><code>import subprocess
address = subprocess.check_output(['hostname', '-s', '-I'])
address = address.decode('utf-8') 
address=address[:-1]
</code></pre>","
",<p>Which can also be written in a single line:</p>,"
","<pre><code>address = subprocess.check_output(['hostname', '-s', '-I']).decode('utf-8')[:-1]
</code></pre>","
","<p>Even if you put <code>localhost</code> in <code>/etc/hostname</code>, the code will still give your local IP address.</p>","
"
"
","<p><code>127.0.1.1</code> <em>is</em> your real IP address. More generally speaking, a computer can have any number of IP addresses. You can filter them for private networks - 127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16.</p>","
","<p>However, there is no cross-platform way to get all IP addresses. On Linux, you can use the <a href=""http://linux.die.net/man/7/netdevice"" rel=""nofollow""><code>SIOCGIFCONF</code></a> ioctl.</p>","
"
"
","<p>A slight refinement of the commands version that uses the IP command, and returns IPv4 and IPv6 addresses:</p>","
","<pre><code>import commands,re,socket

#A generator that returns stripped lines of output from ""ip address show""
iplines=(line.strip() for line in commands.getoutput(""ip address show"").split('\n'))

#Turn that into a list of IPv4 and IPv6 address/mask strings
addresses1=reduce(lambda a,v:a+v,(re.findall(r""inet ([\d.]+/\d+)"",line)+re.findall(r""inet6 ([\:\da-f]+/\d+)"",line) for line in iplines))
#addresses1 now looks like ['127.0.0.1/8', '::1/128', '10.160.114.60/23', 'fe80::1031:3fff:fe00:6dce/64']

#Get a list of IPv4 addresses as (IPstring,subnetsize) tuples
ipv4s=[(ip,int(subnet)) for ip,subnet in (addr.split('/') for addr in addresses1 if '.' in addr)]
#ipv4s now looks like [('127.0.0.1', 8), ('10.160.114.60', 23)]

#Get IPv6 addresses
ipv6s=[(ip,int(subnet)) for ip,subnet in (addr.split('/') for addr in addresses1 if ':' in addr)]
</code></pre>","
"
"
","<p>Well you can use the command ""ip route"" on GNU/Linux to know your current IP address.</p>","
","<p>This shows the IP given to the interface by the DHCP server running on the router/modem. Usually ""192.168.1.1/24"" is the IP for local network where ""24"" means the range of posible IP addresses given by the DHCP server within the mask range.</p>","
",<p>Here's an example: Note that PyNotify is just an addition to get my point straight and is not required at all</p>,"
","<pre><code>#! /usr/bin/env python

import sys , pynotify

if sys.version_info[1] != 7:
   raise RuntimeError('Python 2.7 And Above Only')       

from subprocess import check_output # Available on Python 2.7+ | N/A 

IP = check_output(['ip', 'route'])
Split_Result = IP.split()

# print Split_Result[2] # Remove ""#"" to enable

pynotify.init(""image"")
notify = pynotify.Notification(""Ip"", ""Server Running At:"" + Split_Result[2] , ""/home/User/wireless.png"")    
notify.show()    
</code></pre>","
",<p>The advantage of this is that you don't need to specify the network interface. That's pretty useful when running a socket server</p>,"
",<p>You can install PyNotify using easy_install or even Pip:</p>,"
","<pre><code>easy_install py-notify
</code></pre>","
",<p>or</p>,"
","<pre><code>pip install py-notify
</code></pre>","
",<p>or within python script/interpreter</p>,"
","<pre><code>from pip import main

main(['install', 'py-notify'])
</code></pre>","
"
"
",<p>To get the ip address you can use a <em>shell command</em> directly in <strong>python</strong>:</p>,"
","<pre><code>import socket, subprocess

def get_ip_and_hostname():
    hostname =  socket.gethostname()

    shell_cmd = ""ifconfig | awk '/inet addr/{print substr($2,6)}'""
    proc = subprocess.Popen([shell_cmd], stdout=subprocess.PIPE, shell=True)
    (out, err) = proc.communicate()

    ip_list = out.split('\n')
    ip = ip_list[0]

    for _ip in ip_list:
        try:
            if _ip != ""127.0.0.1"" and _ip.split(""."")[3] != ""1"":
                ip = _ip
        except:
            pass
    return ip, hostname

ip_addr, hostname = get_ip_and_hostname()
</code></pre>","
"
"
","<p>For a list of IP addresses on *nix systems,</p>","
","<pre><code>import subprocess
co = subprocess.Popen(['ifconfig'], stdout = subprocess.PIPE)
ifconfig = co.stdout.read()
ip_regex = re.compile('((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-4]|2[0-5][0-9]|[01]?[0-9][0-9]?))')
[match[0] for match in ip_regex.findall(ifconfig, re.MULTILINE)]
</code></pre>","
","<p>Though it's a bit late for this answer, I thought someone else may find it useful :-)</p>","
",<p>PS : It'll return Broadcast addresses and Netmask as well.</p>,"
"
"
","<p>Note: This is not using the standard library, but quite simple.</p>","
",<p>$ pip install pif</p>,"
","<pre><code>from pif import get_public_ip
get_public_ip()
</code></pre>","
"
"
","<p>netifaces is available via pip and easy_install.  (I know, it's not in base, but it could be worth the install.)</p>","
",<p>netifaces does have some oddities across platforms:</p>,"
","<ul>
<li>The localhost/loop-back interface may not always be included (Cygwin).</li>
<li>Addresses are listed per-protocol (e.g., IPv4, IPv6) and protocols are listed per-interface. On some systems (Linux) each protocol-interface pair has its own associated interface (using the interface_name:n notation) while on other systems (Windows) a single interface will have a list of addresses for each protocol.  In both cases there is a protocol list, but it may contain only a single element.</li>
</ul>","
",<p>Here's some netifaces code to play with:</p>,"
","<pre><code>import netifaces

PROTO = netifaces.AF_INET   # We want only IPv4, for now at least

# Get list of network interfaces
# Note: Can't filter for 'lo' here because Windows lacks it.
ifaces = netifaces.interfaces()

# Get all addresses (of all kinds) for each interface
if_addrs = [netifaces.ifaddresses(iface) for iface in ifaces]

# Filter for the desired address type
if_inet_addrs = [addr[PROTO] for addr in if_addrs if PROTO in addr]

iface_addrs = [s['addr'] for a in if_inet_addrs for s in a if 'addr' in s]
# Can filter for '127.0.0.1' here.
</code></pre>","
",<p>The above code doesn't map an address back to its interface name (useful for generating ebtables/iptables rules on the fly).  So here's a version that keeps the above information with the interface name in a tuple:</p>,"
","<pre><code>import netifaces

PROTO = netifaces.AF_INET   # We want only IPv4, for now at least

# Get list of network interfaces
ifaces = netifaces.interfaces()

# Get addresses for each interface
if_addrs = [(netifaces.ifaddresses(iface), iface) for iface in ifaces]

# Filter for only IPv4 addresses
if_inet_addrs = [(tup[0][PROTO], tup[1]) for tup in if_addrs if PROTO in tup[0]]

iface_addrs = [(s['addr'], tup[1]) for tup in if_inet_addrs for s in tup[0] if 'addr' in s]
</code></pre>","
","<p>And, no, I'm not in love with list comprehensions.  It's just the way my brain works these days.</p>","
",<p>The following snippet will print it all out:</p>,"
","<pre><code>from __future__ import print_function  # For 2.x folks
from pprint import pprint as pp

print('\nifaces = ', end='')
pp(ifaces)

print('\nif_addrs = ', end='')
pp(if_addrs)

print('\nif_inet_addrs = ', end='')
pp(if_inet_addrs)

print('\niface_addrs = ', end='')
pp(iface_addrs)
</code></pre>","
",<p>Enjoy!</p>,"
"
"
",<p>How do I get a list of all files (and directories) in a given directory in Python?</p>,"
"
"
",<p>This is a way to traverse every file and directory in a directory tree:</p>,"
","<pre><code>import os

for dirname, dirnames, filenames in os.walk('.'):
    # print path to all subdirectories first.
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))

    # print path to all filenames.
    for filename in filenames:
        print(os.path.join(dirname, filename))

    # Advanced usage:
    # editing the 'dirnames' list will stop os.walk() from recursing into there.
    if '.git' in dirnames:
        # don't go into any .git directories.
        dirnames.remove('.git')
</code></pre>","
"
"
",<p>You can use</p>,"
","<pre><code>os.listdir(path)
</code></pre>","
",<p>For reference and more os functions look here:</p>,"
","<ul>
<li>Python 2 docs: <a href=""https://docs.python.org/2/library/os.html#os.listdir"" rel=""noreferrer"">https://docs.python.org/2/library/os.html#os.listdir</a></li>
<li>Python 3 docs: <a href=""https://docs.python.org/3/library/os.html#os.listdir"" rel=""noreferrer"">https://docs.python.org/3/library/os.html#os.listdir</a></li>
</ul>","
"
"
",<p>Here's a helper function I use quite often:</p>,"
","<pre><code>import os

def listdir_fullpath(d):
    return [os.path.join(d, f) for f in os.listdir(d)]
</code></pre>","
"
"
","<pre><code>import os

for filename in os.listdir(""C:\\temp""):
    print  filename
</code></pre>","
"
"
","<p>If you need globbing abilities, there's a module for that as well. For example:</p>","
","<pre><code>import glob
glob.glob('./[0-9].*')
</code></pre>","
",<p>will return something like:</p>,"
","<pre><code>['./1.gif', './2.txt']
</code></pre>","
","<p>See the documentation <a href=""http://docs.python.org/library/glob.html"">here</a>.</p>","
"
"
",<p>For files in current working directory without specifying a path</p>,"
",<p><strong>Python 2.7:</strong></p>,"
","<pre><code>import os
os.listdir('.')
</code></pre>","
",<p><strong>Python 3.x:</strong></p>,"
","<pre><code>import os
os.listdir()
</code></pre>","
"
"
",<p>Try this:</p>,"
","<pre><code>import os
for top, dirs, files in os.walk('./'):
    for nm in files:       
        print os.path.join(top, nm)
</code></pre>","
"
"
",<p>A recursive implementation</p>,"
","<pre><code>import os

def scan_dir(dir):
    for name in os.listdir(dir):
        path = os.path.join(dir, name)
        if os.path.isfile(path):
            print path
        else:
            scan_dir(path)
</code></pre>","
"
"
","<p>I wrote a long version, with all the options I might need: <a href=""http://sam.nipl.net/code/python/find.py"" rel=""nofollow"">http://sam.nipl.net/code/python/find.py</a></p>","
",<p>I guess it will fit here too:</p>,"
","<pre><code>#!/usr/bin/env python

import os
import sys

def ls(dir, hidden=False, relative=True):
    nodes = []
    for nm in os.listdir(dir):
        if not hidden and nm.startswith('.'):
            continue
        if not relative:
            nm = os.path.join(dir, nm)
        nodes.append(nm)
    nodes.sort()
    return nodes

def find(root, files=True, dirs=False, hidden=False, relative=True, topdown=True):
    root = os.path.join(root, '')  # add slash if not there
    for parent, ldirs, lfiles in os.walk(root, topdown=topdown):
        if relative:
            parent = parent[len(root):]
        if dirs and parent:
            yield os.path.join(parent, '')
        if not hidden:
            lfiles   = [nm for nm in lfiles if not nm.startswith('.')]
            ldirs[:] = [nm for nm in ldirs  if not nm.startswith('.')]  # in place
        if files:
            lfiles.sort()
            for nm in lfiles:
                nm = os.path.join(parent, nm)
                yield nm

def test(root):
    print ""* directory listing, with hidden files:""
    print ls(root, hidden=True)
    print
    print ""* recursive listing, with dirs, but no hidden files:""
    for f in find(root, dirs=True):
        print f
    print

if __name__ == ""__main__"":
    test(*sys.argv[1:])
</code></pre>","
"
"
",<p>Here is another option.</p>,"
","<pre><code>os.scandir(path='.')
</code></pre>","
",<p>It returns an iterator of os.DirEntry objects corresponding to the entries (along with file attribute information) in the directory given by path. </p>,"
",<p><em>Example:</em></p>,"
","<pre><code>with os.scandir(path) as it:
    for entry in it:
        if not entry.name.startswith('.'):
            print(entry.name)
</code></pre>","
","<p><strong>Using scandir() instead of listdir() can significantly increase the performance of code that also needs file type or file attribute information</strong>, because os.DirEntry objects expose this information if the operating system provides it when scanning a directory. All os.DirEntry methods may perform a system call, but is_dir() and is_file() usually only require a system call for symbolic links; os.DirEntry.stat() always requires a system call on Unix but only requires one for symbolic links on Windows.</p>","
","<p><a href=""https://docs.python.org/3/library/os.html#os.scandir"" rel=""nofollow noreferrer"">Python Docs</a></p>","
"
"
","<p>While <code>os.listdir()</code> is fine for generating a list of file and dir names, frequently you want to do more once you have those names - and in Python3, <a href=""https://docs.python.org/3/library/pathlib.html"" rel=""nofollow noreferrer"">pathlib</a> makes those other chores simple. Let's take a look and see if you like it as much as I do.</p>","
","<p>To list dir contents, construct a Path object and grab the iterator:</p>","
","<pre><code>In [16]: Path('/etc').iterdir()
Out[16]: &lt;generator object Path.iterdir at 0x110853fc0&gt;
</code></pre>","
",<p>If we want just a list of names of things:</p>,"
","<pre><code>In [17]: [x.name for x in Path('/etc').iterdir()]
Out[17]:
['emond.d',
 'ntp-restrict.conf',
 'periodic',
</code></pre>","
",<p>If you want just the dirs: </p>,"
","<pre><code>In [18]: [x.name for x in Path('/etc').iterdir() if x.is_dir()]
Out[18]:
['emond.d',
 'periodic',
 'mach_init.d',
</code></pre>","
",<p>If you want the names of all conf files in that tree:</p>,"
","<pre><code>In [20]: [x.name for x in Path('/etc').glob('**/*.conf')]
Out[20]:
['ntp-restrict.conf',
 'dnsextd.conf',
 'syslog.conf',
</code></pre>","
",<p>If you want a list of conf files in the tree &gt;= 1K:</p>,"
","<pre><code>In [23]: [x.name for x in Path('/etc').glob('**/*.conf') if x.stat().st_size &gt; 1024]
Out[23]:
['dnsextd.conf',
 'pf.conf',
 'autofs.conf',
</code></pre>","
",<p>Resolving relative paths become easy:</p>,"
","<pre><code>In [32]: Path('../Operational Metrics.md').resolve()
Out[32]: PosixPath('/Users/starver/code/xxxx/Operational Metrics.md')
</code></pre>","
",<p>Navigating with a Path is pretty clear (although unexpected):</p>,"
","<pre><code>In [10]: p = Path('.')

In [11]: core = p / 'web' / 'core'

In [13]: [x for x in core.iterdir() if x.is_file()]
Out[13]:
[PosixPath('web/core/metrics.py'),
 PosixPath('web/core/services.py'),
 PosixPath('web/core/querysets.py'),
</code></pre>","
"
"
",<p>The one worked with me is kind of a modified version from Saleh's answer elsewhere on this page.</p>,"
",<p>The code is as follows:</p>,"
","<pre class=""lang-py prettyprint-override""><code>dir = 'given_directory_name'
filenames = [os.path.abspath(os.path.join(dir,i)) for i in os.listdir(dir)]
</code></pre>","
"
"
",<p>A nice one liner to list only the files recursively.  I used this in my setup.py package_data directive:</p>,"
","<pre><code>import os

[os.path.join(x[0],y) for x in os.walk('&lt;some_directory&gt;') for y in x[2]]
</code></pre>","
","<p>I know it's not the answer to the question, but may come in handy</p>","
"
"
",<h1>For Python 2</h1>,"
","<pre><code>#!/bin/python2

import os

def scan_dir(path):
    print map(os.path.abspath, os.listdir(pwd))
</code></pre>","
",<h1>For Python 3</h1>,"
","<p>For filter and map, you need wrap them with list()</p>","
","<pre><code>#!/bin/python3

import os

def scan_dir(path):
    print(list(map(os.path.abspath, os.listdir(pwd))))
</code></pre>","
",<p>The recommendation now is that you replace your usage of map and filter with generators expressions or list comprehensions:</p>,"
","<pre><code>#!/bin/python

import os

def scan_dir(path):
    print([os.path.abspath(f) for f in os.listdir(path)])
</code></pre>","
"
"
","<pre><code>#import modules
import os

_CURRENT_DIR = '.'


def rec_tree_traverse(curr_dir, indent):
    ""recurcive function to traverse the directory""
    #print ""[traverse_tree]""

    try :
        dfList = [os.path.join(curr_dir, f_or_d) for f_or_d in os.listdir(curr_dir)]
    except:
        print ""wrong path name/directory name""
        return

    for file_or_dir in dfList:

        if os.path.isdir(file_or_dir):
            #print ""dir  : "",
            print indent, file_or_dir,""\\""
            rec_tree_traverse(file_or_dir, indent*2)

        if os.path.isfile(file_or_dir):
            #print ""file : "",
            print indent, file_or_dir

    #end if for loop
#end of traverse_tree()

def main():

    base_dir = _CURRENT_DIR

    rec_tree_traverse(base_dir,"" "")

    raw_input(""enter any key to exit...."")
#end of main()


if __name__ == '__main__':
    main()
</code></pre>","
"
"
","<p>FYI Add a filter of extension or ext file
    import os</p>","
","<pre><code>path = '.'
for dirname, dirnames, filenames in os.walk(path):
    # print path to all filenames with extension py.
    for filename in filenames:
        fname_path = os.path.join(dirname, filename)
        fext = os.path.splitext(fname_path)[1]
        if fext == '.py':
            print fname_path
        else:
            continue
</code></pre>","
"
"
",<p>If figured I'd throw this in.  Simple and dirty way to do wildcard searches.</p>,"
","<pre><code>import re
import os

[a for a in os.listdir(""."") if re.search(""^.*\.py$"",a)]
</code></pre>","
"
"
",<p>Below code will list directories and the files within the dir</p>,"
","<pre><code>def print_directory_contents(sPath):
        import os                                       
        for sChild in os.listdir(sPath):                
            sChildPath = os.path.join(sPath,sChild)
            if os.path.isdir(sChildPath):
                print_directory_contents(sChildPath)
            else:
                print(sChildPath)
</code></pre>","
"
"
",<p>Here is a one line Pythonic version:</p>,"
","<pre><code>import os
dir = 'given_directory_name'
filenames = [os.path.join(os.path.dirname(os.path.abspath(__file__)),dir,i) for i in os.listdir(dir)]
</code></pre>","
",<p>This code lists the full path of all files and directories in the given directory name. </p>,"
"
"
",<p>I know this is an old question. This is a neat way I came across if you are on a liunx machine. </p>,"
","<pre><code>import subprocess
print(subprocess.check_output([""ls"", ""/""]).decode(""utf8""))
</code></pre>","
"
"
","<p>If a <code>mydict</code> is not empty, I access an arbitrary element as:</p>","
","<pre><code>mydict[mydict.keys()[0]]
</code></pre>","
",<p>Is there any better way to do this?</p>,"
"
"
","<p>On Python 3, non-destructively and iteratively:</p>","
","<pre><code>next(iter(mydict.values()))
</code></pre>","
","<p>On Python 2, non-destructively and iteratively:</p>","
","<pre><code>mydict.itervalues().next()
</code></pre>","
","<p>If you want it to work in both Python 2 and 3, you can use the <code>six</code> package:</p>","
","<pre><code>six.next(six.itervalues(mydict))
</code></pre>","
",<p>though at this point it is quite cryptic and I'd rather prefer your code.</p>,"
","<p>If you want to remove any item, do:</p>","
","<pre><code>key, value = mydict.popitem()
</code></pre>","
","<p>Note that ""first"" may not be an appropriate term here because <code>dict</code> is not an ordered type in Python &lt; 3.6. Python 3.6+ <code>dicts</code> are ordered.</p>","
"
"
","<p>If you only need to access one element (being the first by chance, since dicts do not guarantee ordering) you can simply do this in <em>Python 2</em>:</p>","
","<pre><code>my_dict.keys()[0]     -&gt; key of ""first"" element
my_dict.values()[0]   -&gt; value of ""first"" element
my_dict.items()[0]    -&gt; (key, value) tuple of ""first"" element
</code></pre>","
",<p>Please note that (at best of my knowledge) Python does not guarantee that 2 successive calls to any of these methods will return list with the same ordering. This is not supported with Python3.</p>,"
",<p>in <em>Python 3</em>:</p>,"
","<pre><code>list(my_dict.keys())[0]     -&gt; key of ""first"" element
list(my_dict.values())[0]   -&gt; value of ""first"" element
list(my_dict.items())[0]    -&gt; (key, value) tuple of ""first"" element
</code></pre>","
"
"
","<p>In python3, The way :</p>","
","<pre><code>dict.keys() 
</code></pre>","
","<p>return a value in type : dict_keys(), we'll got an error when got 1st member of keys of dict by this way:</p>","
","<pre><code>dict.keys()[0]
TypeError: 'dict_keys' object does not support indexing
</code></pre>","
","<p>Finally, I convert dict.keys() to list @1st, and got 1st member by list splice method:</p>","
","<pre><code>list(dict.keys())[0]
</code></pre>","
"
"
",<h3>to get a key</h3>,"
","<pre><code>next(iter(mydict))
</code></pre>","
",<h3>to get a value</h3>,"
","<pre><code>next(iter(mydict.values()))
</code></pre>","
",<h3>to get both</h3>,"
","<pre><code>next(iter(mydict.items())) # or next(iter(mydict.viewitems())) in python 2
</code></pre>","
","<p>The first two are Python 2 and 3. The last two are lazy in Python 3, but not in Python 2.</p>","
"
"
","<p>As others mentioned, there is no ""first item"", since dictionaries have no guaranteed order (they're implemented as hash tables).  If you want, for example, the value corresponding to the smallest key, <code>thedict[min(thedict)]</code> will do that.  If you care about the order in which the keys were inserted, i.e., by ""first"" you mean ""inserted earliest"", then in Python 3.1 you can use <a href=""http://docs.python.org/py3k/library/collections.html?highlight=collections#collections.OrderedDict"" rel=""nofollow noreferrer"">collections.OrderedDict</a>, which is also in the forthcoming Python 2.7; for older versions of Python, download, install, and use the ordered dict backport (2.4 and later) which you can find <a href=""http://pypi.python.org/pypi/ordereddict/1.1"" rel=""nofollow noreferrer"">here</a>.</p>","
","<p><strong>Python 3.7</strong>
<a href=""https://docs.python.org/3/whatsnew/3.7.html#summary-release-highlights"" rel=""nofollow noreferrer"">Now</a> dicts are insertion ordered.</p>","
"
"
","<p>Ignoring issues surrounding dict ordering, this might be better:</p>","
","<pre><code>next(dict.itervalues())
</code></pre>","
",<p>This way we avoid item lookup and generating a list of keys that we don't use.</p>,"
",<h2>Python3</h2>,"
","<pre><code>next(iter(dict.values()))
</code></pre>","
"
"
","<p>How about, this. Not mentioned here yet.</p>","
",<p><strong>py 2 &amp; 3</strong></p>,"
","<pre><code>a = {""a"":2,""b"":3}
a[list(a)[0]] # the first element is here
&gt;&gt;&gt; 2
</code></pre>","
"
"
",<p>In python3 </p>,"
","<pre><code>list(dict.values())[0]
</code></pre>","
"
"
",<p>You can always do:</p>,"
","<pre><code>for k in sorted(d.keys()):
    print d[k]
</code></pre>","
",<p>This will give you a consistently sorted (with respect to <strong>builtin</strong>.hash() I guess) set of keys you can process on if the sorting has any meaning to you. That means for example numeric types are sorted consistently even if you expand the dictionary.</p>,"
",<p>EXAMPLE</p>,"
","<pre><code># lets create a simple dictionary
d = {1:1, 2:2, 3:3, 4:4, 10:10, 100:100}
print d.keys()
print sorted(d.keys())

# add some other stuff
d['peter'] = 'peter'
d['parker'] = 'parker'
print d.keys()
print sorted(d.keys())

# some more stuff, numeric of different type, this will ""mess up"" the keys set order
d[0.001] = 0.001
d[3.14] = 'pie'
d[2.71] = 'apple pie'
print d.keys()
print sorted(d.keys())
</code></pre>","
",<p>Note that the dictionary is sorted when printed. But the key set is essentially a hashmap!</p>,"
"
"
",<p>For both Python 2 and 3:</p>,"
","<pre><code>import six

six.next(six.itervalues(d))
</code></pre>","
"
"
","<pre><code>first_key, *rest_keys = mydict
</code></pre>","
"
"
","<p>No external libraries, works on both Python 2.7 and 3.x:</p>","
","<pre><code>&gt;&gt;&gt; list(set({""a"":1, ""b"": 2}.values()))[0]
1
</code></pre>","
",<p>For aribtrary key just leave out .values()</p>,"
","<pre><code>&gt;&gt;&gt; list(set({""a"":1, ""b"": 2}))[0]
'a'
</code></pre>","
"
"
","<p>Subclassing <code>dict</code> is one method, though not efficient. Here if you supply an integer it will return <code>d[list(d)[n]]</code>, otherwise access the dictionary as expected:</p>","
","<pre><code>class mydict(dict):
    def __getitem__(self, value):
        if isinstance(value, int):
            return self.get(list(self)[value])
        else:
            return self.get(value)

d = mydict({'a': 'hello', 'b': 'this', 'c': 'is', 'd': 'a',
            'e': 'test', 'f': 'dictionary', 'g': 'testing'})

d[0]    # 'hello'
d[1]    # 'this'
d['c']  # 'is'
</code></pre>","
"
"
",<p>I've tried to find a comprehensive guide on whether it is best to use <code>import module</code> or <code>from module import</code>. I've just started with Python and I'm trying to start off with best practices in mind.</p>,"
","<p>Basically, I was hoping if anyone could share their experiences, what preferences other developers have and what's the best way to avoid any <em>gotchas</em> down the road?</p>","
"
"
",<p>The difference between <code>import module</code> and <code>from module import foo</code> is mainly subjective.  Pick the one you like best and be consistent in your use of it.  Here are some points to help you decide.</p>,"
",<p><code>import module</code></p>,"
","<ul>
<li><strong>Pros:</strong>
<ul>
<li>Less maintenance of your <code>import</code> statements. Don't need to add any additional imports to start using another item from the module</li>
</ul></li>
<li><strong>Cons:</strong>
<ul>
<li>Typing <code>module.foo</code> in your code can be tedious and redundant (tedium can be minimized by using <code>import module as mo</code> then typing <code>mo.foo</code>)</li>
</ul></li>
</ul>","
",<p><code>from module import foo</code></p>,"
","<ul>
<li><strong>Pros:</strong>
<ul>
<li>Less typing to use <code>foo</code></li>
<li>More control over which items of a module can be accessed</li>
</ul></li>
<li><strong>Cons:</strong>
<ul>
<li>To use a new item from the module you have to update your <code>import</code> statement</li>
<li>You lose context about <code>foo</code>. For example, it's less clear what <code>ceil()</code> does compared to <code>math.ceil()</code></li>
</ul></li>
</ul>","
","<p>Either method is acceptable, but <strong>don't</strong> use <code>from module import *</code>.  </p>","
","<p>For any reasonable large set of code, if you <code>import *</code> you will likely be cementing it into the module, unable to be removed.  This is because it is difficult to determine what items used in the code are coming from 'module', making it easy to get to the point where you think you don't use the <code>import</code> any more but it's extremely difficult to be sure.</p>","
"
"
","<p>There's another detail here, not mentioned, related to writing to a module. Granted this may not be very common, but I've needed it from time to time.</p>","
","<p>Due to the way references and name binding works in Python, if you want to update some symbol in a module, say foo.bar, from outside that module, and have other importing code ""see"" that change, you have to import foo a certain way. For example:</p>","
",<p>module foo:</p>,"
","<pre><code>bar = ""apples""
</code></pre>","
",<p>module a:</p>,"
","<pre><code>import foo
foo.bar = ""oranges""   # update bar inside foo module object
</code></pre>","
",<p>module b:</p>,"
","<pre><code>import foo           
print foo.bar        # if executed after a's ""foo.bar"" assignment, will print ""oranges""
</code></pre>","
","<p>However, if you import symbol names instead of module names, this will not work.</p>","
","<p>For example, if I do this in module a:</p>","
","<pre><code>from foo import bar
bar = ""oranges""
</code></pre>","
","<p>No code outside of <code>a</code> will see <code>bar</code> as ""oranges"" because my setting of <code>bar</code> merely affected the name ""bar"" inside module <code>a</code>, it did not ""reach into"" the <code>foo</code> module object and update its <code>bar</code>.</p>","
"
"
","<p>Even though many people already explained about <code>import</code> vs <code>import from</code>, I want to try to explain a bit more about what happens under the hood, and where all the places it changes are.</p>","
",<hr/>,"
",<h2><code>import foo</code>:</h2>,"
","<p>Imports <code>foo</code>, and creates a reference to that module in the current namespace. Then you need to define completed module path to access a particular attribute or method from inside the module.</p>","
",<p>E.g. <code>foo.bar</code> but not <code>bar</code></p>,"
",<h2><code>from foo import bar</code>:</h2>,"
","<p>Imports <code>foo</code>, and creates references to all the members listed (<code>bar</code>). Does not set the variable <code>foo</code>.</p>","
",<p>E.g. <code>bar</code> but not <code>baz</code> or <code>foo.baz</code></p>,"
",<h2><code>from foo import *</code>:</h2>,"
","<p>Imports <code>foo</code>, and creates references to all public objects defined by that module in the current namespace (everything listed in <code>__all__</code> if <code>__all__</code> exists, otherwise everything that doesn't start with <code>_</code>). Does not set the variable <code>foo</code>.</p>","
",<p>E.g. <code>bar</code> and <code>baz</code> but not <code>_qux</code> or <code>foo._qux</code>.</p>,"
",<hr/>,"
",<p>Now letâ€™s see when we do <code>import X.Y</code>:</p>,"
","<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import os.path
</code></pre>","
",<p>Check <code>sys.modules</code> with name <code>os</code> and <code>os.path</code>:</p>,"
","<pre><code>&gt;&gt;&gt; sys.modules['os']
&lt;module 'os' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'&gt;
&gt;&gt;&gt; sys.modules['os.path']
&lt;module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'&gt;
</code></pre>","
",<p>Check <code>globals()</code> and <code>locals()</code> namespace dicts with <code>os</code> and <code>os.path</code>:</p>,"
","<pre><code>&gt;&gt;&gt; globals()['os']
&lt;module 'os' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'&gt;
&gt;&gt;&gt; locals()['os']
&lt;module 'os' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'&gt;
&gt;&gt;&gt; globals()['os.path']
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
KeyError: 'os.path'
&gt;&gt;&gt;
</code></pre>","
","<p>From the above example we found that only <code>os</code> is inserted in the local and global namespace.
So, we should be able to use:</p>","
","<pre><code>&gt;&gt;&gt; os
&lt;module 'os' from
  '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'&gt;
&gt;&gt;&gt; os.path
&lt;module 'posixpath' from
 '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'&gt;
&gt;&gt;&gt;
</code></pre>","
",<p>But not <code>path</code>.</p>,"
","<pre><code>&gt;&gt;&gt; path
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
NameError: name 'path' is not defined
&gt;&gt;&gt;
</code></pre>","
","<p>Once you delete the <code>os</code> from locals() namespace, you won't be able to access <code>os</code> as well as <code>os.path</code> even though they exist in sys.modules:</p>","
","<pre><code>&gt;&gt;&gt; del locals()['os']
&gt;&gt;&gt; os
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
NameError: name 'os' is not defined
&gt;&gt;&gt; os.path
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
NameError: name 'os' is not defined
&gt;&gt;&gt;
</code></pre>","
",<h1>Now let's talk about <code>import from</code>:</h1>,"
",<h2><code>from</code>:</h2>,"
","<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; from os import path
</code></pre>","
",<h2>Check <code>sys.modules</code> with <code>os</code> and <code>os.path</code>:</h2>,"
","<pre><code>&gt;&gt;&gt; sys.modules['os']
&lt;module 'os' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'&gt;
&gt;&gt;&gt; sys.modules['os.path']
&lt;module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'&gt;
</code></pre>","
",<p>We found that in <code>sys.modules</code> we found as same as we did before by using <code>import name</code></p>,"
","<p>OK, let's check how it looks like in <code>locals()</code> and <code>globals()</code> namespace dicts:</p>","
","<pre><code>&gt;&gt;&gt; globals()['path']
&lt;module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'&gt;
&gt;&gt;&gt; locals()['path']
&lt;module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'&gt;
&gt;&gt;&gt; globals()['os']
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
KeyError: 'os'
&gt;&gt;&gt;
</code></pre>","
",<p>You can access by using name <code>path</code> not by <code>os.path</code>:</p>,"
","<pre><code>&gt;&gt;&gt; path
&lt;module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'&gt;
&gt;&gt;&gt; os.path
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
NameError: name 'os' is not defined
&gt;&gt;&gt;
</code></pre>","
",<p>Let's delete 'path' from <code>locals()</code>:</p>,"
","<pre><code>&gt;&gt;&gt; del locals()['path']
&gt;&gt;&gt; path
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
NameError: name 'path' is not defined
&gt;&gt;&gt;
</code></pre>","
",<p>One final example using an alias:</p>,"
","<pre><code>&gt;&gt;&gt; from os import path as HELL_BOY
&gt;&gt;&gt; locals()['HELL_BOY']
&lt;module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'&gt;
&gt;&gt;&gt; globals()['HELL_BOY']
&lt;module 'posixpath' from /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/posixpath.pyc'&gt;
&gt;&gt;&gt;
</code></pre>","
",<p>And no path defined:</p>,"
","<pre><code>&gt;&gt;&gt; globals()['path']
Traceback (most recent call last):
 File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
KeyError: 'path'
&gt;&gt;&gt;
</code></pre>","
"
"
",<p>Both ways are supported for a reason: there are times when one is more appropriate than the other.</p>,"
","<ul>
<li><p><code>import module</code>: nice when you are using many bits from the module. drawback is that you'll need to qualify each reference with the module name.</p></li>
<li><p><code>from module import ...</code>: nice that imported items are usable directly without module name prefix. The drawback is that you must list each thing you use, and that it's not clear in code where something came from.</p></li>
</ul>","
","<p>Which to use depends on which makes the code clear and readable, and has more than a little to do with personal preference. I lean toward <code>import module</code> generally because in the code it's very clear where an object or function came from. I use <code>from module import ...</code> when I'm using some object/function a <em>lot</em> in the code.</p>","
"
"
",<p>I personally always use </p>,"
","<pre><code>from package.subpackage.subsubpackage import module
</code></pre>","
",<p>and then access everything as</p>,"
","<pre><code>module.function
module.modulevar
</code></pre>","
","<p>etc. The reason is that at the same time you have short invocation, and you clearly define the module namespace of each routine, something that is very useful if you have to search for usage of a given module in your source.</p>","
","<p>Needless to say, do not use the import *, because it pollutes your namespace and it does not tell you where a given function comes from (from which module)</p>","
","<p>Of course, you can run in trouble if you have the same module name for two different modules in two different packages, like</p>","
","<pre><code>from package1.subpackage import module
from package2.subpackage import module
</code></pre>","
","<p>in this case, of course you run into troubles, but then there's a strong hint that your package layout is flawed, and you have to rethink it.</p>","
"
"
","<pre><code>import module
</code></pre>","
",<p>Is best when you will use many functions from the module.</p>,"
","<pre><code>from module import function
</code></pre>","
",<p>Is best when you want to avoid polluting the global namespace with all the functions and types from a module when you only need <code>function</code>.</p>,"
"
"
",<p>I've just discovered one more subtle difference between these two methods.</p>,"
",<p>If module <code>foo</code> uses a following import:</p>,"
","<pre><code>from itertools import count
</code></pre>","
","<p>Then module <code>bar</code> can by mistake use <code>count</code> as though it was defined in <code>foo</code>, not in <code>itertools</code>:</p>","
","<pre><code>import foo
foo.count()
</code></pre>","
",<p>If <code>foo</code> uses:</p>,"
","<pre><code>import itertools
</code></pre>","
","<p>the mistake is still possible, but less likely to be made. <code>bar</code> needs to:</p>","
","<pre><code>import foo
foo.itertools.count()
</code></pre>","
","<p>This caused some troubles to me. I had a module that by mistake imported an exception from a module that did not define it, only imported it from other module (using <code>from module import SomeException</code>). When the import was no longer needed and removed, the offending module was broken.</p>","
"
"
","<p>Here is another difference not mentioned.  This is copied verbatim from <a href=""http://docs.python.org/2/tutorial/modules.html"" rel=""noreferrer"">http://docs.python.org/2/tutorial/modules.html</a></p>","
",<p>Note that when using </p>,"
","<pre><code>from package import item
</code></pre>","
","<p>the item can be either a submodule (or subpackage) of the package, or some other name defined in the package, like a function, class or variable. The import statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it. If it fails to find it, an ImportError exception is raised.</p>","
","<p>Contrarily, when using syntax like </p>","
","<pre><code>import item.subitem.subsubitem
</code></pre>","
",<p>each item except for the last must be a package; the last item can be a module or a package but canâ€™t be a class or function or variable defined in the previous item.</p>,"
"
"
","<p>Since I am also a beginner, I will be trying to explain this in a simple way:
In Python, we have three types of <code>import</code> statements which are:</p>","
",<p><strong>1. Generic imports:</strong></p>,"
","<pre><code>import math
</code></pre>","
","<p><em>this type of import is my personal favorite, the only downside to this import technique is that if you need use any module's function you must use the following syntax:</em></p>","
","<pre><code>math.sqrt(4)
</code></pre>","
","<p><em>of course, it increases the typing effort but as a beginner, it will help you to keep track of module and function associated with it, (a good text editor will reduce the typing effort significantly and is recommended).</em></p>","
",<p><em><strong>Typing effort can be further reduced by using this import statement:</strong></em></p>,"
","<pre><code>import math as m
</code></pre>","
","<p><em>now, instead of using <code>math.sqrt()</code> you can use <code>m.sqrt()</code>.</em></p>","
",<p><strong>2. Function imports:</strong></p>,"
","<pre><code>from math import sqrt
</code></pre>","
","<p><em>this type of import is best suited if your code only needs to access single or few functions from the module, but for using any new item from the module you have to update import statement.</em></p>","
",<p><strong>3. Universal imports:</strong></p>,"
","<pre><code>from math import * 
</code></pre>","
","<p><em>Although it reduces typing effort significantly but is not recommended because it will fill your code with various functions from the module and their name could conflict with the name of user-defined functions.</em>
<strong>example:</strong></p>","
","<h3>If you have a function of your very own named sqrt and you import math, your function is safe: there is your sqrt and there is math.sqrt. If you do from math import *, however, you have a problem: namely, two different functions with the exact same name. Source: <a href=""https://www.codecademy.com"" rel=""nofollow noreferrer"">Codecademy</a></h3>","
"
"
","<pre><code>import package
import module
</code></pre>","
","<p>With <code>import</code>, the token must be a module (a file containing Python commands) or a package (a folder in the <code>sys.path</code> containing a file <code>__init__.py</code>.)</p>","
",<p>When there are subpackages:</p>,"
","<pre><code>import package1.package2.package
import package1.package2.module
</code></pre>","
","<p>the requirements for folder (package) or file (module) are the same, but the folder or file must be inside <code>package2</code> which must be inside <code>package1</code>, and both <code>package1</code> and <code>package2</code> must contain <code>__init__.py</code> files. <a href=""https://docs.python.org/2/tutorial/modules.html"" rel=""noreferrer"">https://docs.python.org/2/tutorial/modules.html</a></p>","
",<p>With the <code>from</code> style of import:</p>,"
","<pre><code>from package1.package2 import package
from package1.package2 import module
</code></pre>","
",<p>the package or module enters the namespace of the file containing the <code>import</code> statement as <code>module</code> (or <code>package</code>) instead of <code>package1.package2.module</code>. You can always bind to a more convenient name:</p>,"
","<pre><code>a = big_package_name.subpackage.even_longer_subpackage_name.function
</code></pre>","
",<p>Only the <code>from</code> style of import permits you to name a particular function or variable:</p>,"
","<pre><code>from package3.module import some_function
</code></pre>","
","<p>is allowed, but</p>","
","<pre><code>import package3.module.some_function 
</code></pre>","
",<p>is not allowed.</p>,"
"
"
","<p>To add to what people have said about <code>from x import *</code>: besides making it more difficult to tell where names came from, this throws off code checkers like Pylint.  They will report those names as undefined variables.</p>","
"
"
",<p>This is my directory structure of my current directory:</p>,"
","<blockquote>
<pre><code>.  
â””â”€a  
   â””â”€b  
     â””â”€c
</code></pre>
</blockquote>","
","<ol>
<li><p>The <code>import</code> statement remembers <strong>all intermediate names</strong>.<br/>
These names <strong>have to be</strong> qualified:</p>
<pre><code>In[1]: import a.b.c

In[2]: a
Out[2]: &lt;module 'a' (namespace)&gt;

In[3]: a.b
Out[3]: &lt;module 'a.b' (namespace)&gt;

In[4]: a.b.c
Out[4]: &lt;module 'a.b.c' (namespace)&gt;
</code></pre></li>
<li><p>The <code>from ... import ...</code> statement remembers <strong>only the imported name</strong>.<br/>
This name <strong>must not</strong> be qualified:</p>
<pre><code>In[1]: from a.b import c

In[2]: a
NameError: name 'a' is not defined

In[2]: a.b
NameError: name 'a' is not defined

In[3]: a.b.c
NameError: name 'a' is not defined

In[4]: c
Out[4]: &lt;module 'a.b.c' (namespace)&gt;
</code></pre></li>
</ol>","
",<hr/>,"
","<ul>
<li><em>Note:</em> Of course, I restarted my Python console between steps 1 and 2.</li>
</ul>","
"
"
","<p>My own answer to this depends mostly on first, how many different modules I'll be using.  If i'm only going to use one or two, I'll often use <strong><code>from</code></strong> ... <strong><code>import</code></strong> since it makes for fewer keystrokes in the rest of the file, but if I'm going to make use of many different modules, I prefer just <strong><code>import</code></strong> because that means that each module reference is self-documenting.  I can see where each symbol comes from without having to hunt around.</p>","
","<p>Usuaully I prefer the self documenting style of plain import and only change to from.. import when the number of times I have to type the module name grows above 10 to 20, even if there's only one module being imported.</p>","
"
"
","<p>One of the significant difference I found out which <em>surprisingly</em> no-one has talked about is that using plain <em>import</em> you can access <code>private variable</code> and <code>private functions</code> from the imported module, which isn't possible with <em>from-import</em> statement. </p>","
","<p><a href=""https://i.stack.imgur.com/1fqOd.png"" rel=""nofollow noreferrer""><img alt=""enter image description here"" src=""https://i.stack.imgur.com/1fqOd.png""/></a></p>","
",<p>Code in image:</p>,"
",<h1>setting.py</h1>,"
","<pre><code>public_variable = 42
_private_variable = 141
def public_function():
    print(""I'm a public function! yay!"")
def _private_function():
    print(""Ain't nobody accessing me from another module...usually"")
</code></pre>","
",<h1>plain_importer.py</h1>,"
","<pre><code>import settings
print (settings._private_variable)
print (settings.public_variable)
settings.public_function()
settings._private_function()

# Prints:
# 141
# 42
# I'm a public function! yay!
# Ain't nobody accessing me from another module...usually
</code></pre>","
",<h1>from_importer.py</h1>,"
","<pre><code>from settings import *
#print (_private_variable) #doesn't work
print (public_variable)
public_function()
#_private_function()   #doesn't work
</code></pre>","
"
"
",<p>I would like to add to this. It can be useful to understand how Python handles imported modules as attributes if you run into circular imports.</p>,"
",<p>I have the following structure:</p>,"
","<pre><code>mod/
    __init__.py
    main.py
    a.py
    b.py
    c.py
    d.py
</code></pre>","
",<p>From main.py I will import the other modules using differnt import methods</p>,"
",<p>main.py:</p>,"
","<pre><code>import mod.a
import mod.b as b
from mod import c
import d
</code></pre>","
","<p>dis.dis shows the difference (note module names, a b c d):</p>","
","<pre><code>  1           0 LOAD_CONST               0 (-1)
              3 LOAD_CONST               1 (None)
              6 IMPORT_NAME              0 (mod.a)
              9 STORE_NAME               1 (mod)

  2          12 LOAD_CONST               0 (-1)
             15 LOAD_CONST               1 (None)
             18 IMPORT_NAME              2 (b)
             21 STORE_NAME               2 (b)

  3          24 LOAD_CONST               0 (-1)
             27 LOAD_CONST               2 (('c',))
             30 IMPORT_NAME              1 (mod)
             33 IMPORT_FROM              3 (c)
             36 STORE_NAME               3 (c)
             39 POP_TOP

  4          40 LOAD_CONST               0 (-1)
             43 LOAD_CONST               1 (None)
             46 IMPORT_NAME              4 (mod.d)
             49 LOAD_ATTR                5 (d)
             52 STORE_NAME               5 (d)
             55 LOAD_CONST               1 (None)
</code></pre>","
","<p>In the end they look the same (STORE_NAME is result in each example), but this is worth noting if you need to consider the following four circular imports:</p>","
",<h2>example1</h2>,"
","<pre><code>foo/
   __init__.py
   a.py
   b.py
</code></pre>","
","<pre><code>a.py:
import foo.b 
</code></pre>","
","<pre><code>b.py:
import foo.a
</code></pre>","
","<pre><code>&gt;&gt;&gt; import foo.a
&gt;&gt;&gt;
</code></pre>","
",<p>This works</p>,"
",<h2>example2</h2>,"
","<pre><code>bar/
   __init__.py
   a.py
   b.py
</code></pre>","
","<pre><code>a.py:
import bar.b as b
</code></pre>","
","<pre><code>b.py:
import bar.a as a
</code></pre>","
","<pre><code>&gt;&gt;&gt; import bar.a
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""bar\a.py"", line 1, in &lt;module&gt;
    import bar.b as b
  File ""bar\b.py"", line 1, in &lt;module&gt;
    import bar.a as a
AttributeError: 'module' object has no attribute 'a'
</code></pre>","
",<p>No dice</p>,"
",<h2>example3</h2>,"
","<pre><code>baz/
   __init__.py
   a.py
   b.py
</code></pre>","
","<pre><code>a.py:
from baz import b
</code></pre>","
","<pre><code>b.py:
from baz import a
</code></pre>","
","<pre><code>&gt;&gt;&gt; import baz.a
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""baz\a.py"", line 1, in &lt;module&gt;
    from baz import b
  File ""baz\b.py"", line 1, in &lt;module&gt;
    from baz import a
ImportError: cannot import name a
</code></pre>","
",<p>Similar issue... but clearly from x import y is not the same as import import x.y as y</p>,"
",<h2>example4</h2>,"
","<pre><code>qux/
   __init__.py
   a.py
   b.py
</code></pre>","
","<pre><code>a.py:
import b 
</code></pre>","
","<pre><code>b.py:
import a
</code></pre>","
","<pre><code>&gt;&gt;&gt; import qux.a
&gt;&gt;&gt;
</code></pre>","
",<p>This one also works</p>,"
"
"
","<p>As <em>Jan Wrobel</em> mentions, one aspect of the different imports is in which way the imports are disclosed.</p>","
",<p>Module <strong>mymath</strong></p>,"
","<pre class=""lang-py prettyprint-override""><code>from math import gcd
...
</code></pre>","
",<p>Use of <strong>mymath</strong>:</p>,"
","<pre><code>import mymath
mymath.gcd(30, 42)  # will work though maybe not expected
</code></pre>","
","<p>If I imported <code>gcd</code> only for internal use, not to disclose it to users of <code>mymath</code>, this can be inconvenient. I have this pretty often, and in most cases I want to ""keep my modules clean"".</p>","
","<p>Apart from the proposal of <em>Jan Wrobel</em> to obscure this a bit more by using <code>import math</code> instead, I have started to hide imports from disclosure by using a leading underscore:</p>","
","<pre><code># for instance...
from math import gcd as _gcd
# or...
import math as _math
</code></pre>","
","<p>In larger projects this ""best practice"" allows my to exactly control what is disclosed to subsequent imports and what isn't. This keeps my modules clean and pays back at a certain size of project.</p>","
"
"
",<p>since many people answered here but i am just trying my best :)</p>,"
","<ol>
<li><p><code>import module</code> is best when you don't know which item you have to import from <code>module</code>. In this way it may be difficult to debug when problem raises because
you don't know which item have problem.</p>
</li>
<li><p><code>form module import &lt;foo&gt;</code> is best when you know which item you require to import and also helpful in more controlling using importing specific item according to your need. Using this way debugging may be easy because you know which item you imported.</p>
</li>
</ol>","
"
"
",<p>Import Module - You don't need additional efforts to fetch another thing from module. It has disadvantages such as redundant typing </p>,"
",<p>Module Import From - Less typing &amp;More control over which items of a module can be accessed.To use a new item from the module you have to update your import statement.</p>,"
"
"
","<p>There are some builtin modules that contain mostly bare functions (<a href=""https://docs.python.org/3/library/base64.html"" rel=""nofollow noreferrer"">base64</a>, <a href=""https://docs.python.org/3/library/math.html"" rel=""nofollow noreferrer"">math</a>, <a href=""https://docs.python.org/3/library/os.html"" rel=""nofollow noreferrer"">os</a>, <a href=""https://docs.python.org/3/library/shutil.html"" rel=""nofollow noreferrer"">shutil</a>, <a href=""https://docs.python.org/3/library/sys.html"" rel=""nofollow noreferrer"">sys</a>, <a href=""https://docs.python.org/3/library/time.html"" rel=""nofollow noreferrer"">time</a>, ...) and it is definitely a good practice to have these bare functions <em>bound</em> to some namespace and thus improve the readability of your code. Consider how more difficult is to understand the meaning of these functions without their namespace:</p>","
","<pre class=""lang-py prettyprint-override""><code>copysign(foo, bar)
monotonic()
copystat(foo, bar)
</code></pre>","
",<p>than when they are bound to some module:</p>,"
","<pre class=""lang-py prettyprint-override""><code>math.copysign(foo, bar)
time.monotonic()
shutil.copystat(foo, bar)
</code></pre>","
","<p>Sometimes you even need the namespace to avoid conflicts between different modules (<a href=""https://docs.python.org/3/library/json.html#json.load"" rel=""nofollow noreferrer"">json.load</a> vs. <a href=""https://docs.python.org/3/library/pickle.html#pickle.load"" rel=""nofollow noreferrer"">pickle.load</a>)
<hr/>
On the other hand there are some modules that contain mostly classes (<a href=""https://docs.python.org/3/library/configparser.html"" rel=""nofollow noreferrer"">configparser</a>, <a href=""https://docs.python.org/3/library/datetime.html"" rel=""nofollow noreferrer"">datetime</a>, <a href=""https://docs.python.org/3/library/tempfile.html"" rel=""nofollow noreferrer"">tempfile</a>, <a href=""https://docs.python.org/3/library/zipfile.html"" rel=""nofollow noreferrer"">zipfile</a>, ...) and many of them make their class names self-explanatory enough:</p>","
","<pre class=""lang-py prettyprint-override""><code>configparser.RawConfigParser()
datetime.DateTime()
email.message.EmailMessage()
tempfile.NamedTemporaryFile()
zipfile.ZipFile()
</code></pre>","
",<p>so there can be a debate whether using these classes with the additional module namespace in your code adds some new information or just lengthens the code.</p>,"
"
"
",<p>I was answering a similar question post but the poster deleted it before i could post. Here is one example to illustrate the differences.</p>,"
","<p>Python libraries may have one or more files (modules). For exmaples,</p>","
","<pre><code>package1
  |-- __init__.py
</code></pre>","
",<p>or</p>,"
","<pre><code>package2
  |-- __init__.py
  |-- module1.py
  |-- module2.py
</code></pre>","
",<p>We can define python functions or classes inside <em>any</em> of the files based design requirements.</p>,"
",<p>Let's define</p>,"
","<ol>
<li><code>func1()</code> in  <code>__init__.py</code> under <code>mylibrary1</code>, and</li>
<li><code>foo()</code> in <code>module2.py</code> under <code>mylibrary2</code>.</li>
</ol>","
",<p>We can access <code>func1()</code> using one of these methods</p>,"
","<pre><code>import package1

package1.func1()
</code></pre>","
",<p>or</p>,"
","<pre><code>import package1 as my

my.func1()
</code></pre>","
",<p>or</p>,"
","<pre><code>from package1 import func1

func1()
</code></pre>","
",<p>or</p>,"
","<pre><code>from package1 import *

func1()
</code></pre>","
",<p>We can use one of these methods to access <code>foo()</code>:</p>,"
","<pre><code>import package2.module2

package2.module2.foo()
</code></pre>","
",<p>or</p>,"
","<pre><code>import package2.module2 as mod2

mod2.foo()
</code></pre>","
",<p>or</p>,"
","<pre><code>from package2 import module2

module2.foo()
</code></pre>","
",<p>or</p>,"
","<pre><code>from package2 import module2 as mod2

mod2.foo()
</code></pre>","
",<p>or</p>,"
","<pre><code>from package2.module2 import *

foo()
</code></pre>","
"
"
","<p>There have been many answers, but none have mentioned testing (with <code>unittest</code> or <code>pytest</code>).</p>","
",<h1>tl;dr</h1>,"
",<p>Use <code>import foo</code> for external modules to simplify testing.</p>,"
",<h1>The Hard Way</h1>,"
","<p>Importing classes/functions (<code>from foo import bar</code>) individually from a module makes red-green-refactor cycles tedious. For example, if my file looks like</p>","
","<pre><code># my_module.py

from foo import bar


class Thing:
    def do_thing(self):
        bar('do a thing')
</code></pre>","
",<p>and my test is</p>,"
","<pre><code># test_my_module.py

from unittest.mock import patch
import my_module


patch.object(my_module, 'bar')
def test_do_thing(mock_bar):
    my_module.Thing().do_thing()
    mock_bar.assert_called_with('do a thing')
</code></pre>","
","<p>At first glance, this seems great. But what happens if I want to implement <code>Thing</code> class in a different file? My structure would have to change like this...</p>","
","<pre><code># my_module.py

from tools import Thing


def do_thing():
    Thing().do_thing()


# tools.py

from foo import bar


class Thing:
    def do_thing(self):
        bar('do a thing')


# test_my_module.py

from unittest.mock import patch
import my_module
import tools  # Had to import implementation file...


patch.object(tools, 'bar')  # Changed patch
def test_do_thing(mock_bar):
    my_module.do_thing()  # Changed test (expected)
    mock_bar.assert_called_with('do a thing')
</code></pre>","
","<p>Unfortunately, since I used <code>from foo import bar</code>, I need to update my patch to reference the <code>tools</code> module. Essentially, since my test knows too much about implementation, much more than expected needs to be changed to do this refactor.</p>","
",<h1>The Better Approach</h1>,"
","<p>Using <code>import foo</code>, my tests can ignore how the module is implemented and simply patch the whole module.</p>","
","<pre><code># my_module.py

from tools import Thing


def do_thing():
    Thing().do_thing()


# tools.py

import foo


class Thing:
    def do_thing(self):
        foo.bar('do a thing')  # Specify 'bar' is from 'foo' module


# test_my_module.py

from unittest.mock import patch
import my_module


patch('foo')  # Patch entire foo module
def test_do_thing(mock_foo):
    my_module.do_thing()  # Changed test (expected)
    mock_foo.bar.assert_called_with('do a thing')
</code></pre>","
","<p>The less implementation details your tests know, the better. That way, if you come up with a better solution (use classes instead of functions, use additional files to separate ideas, etc.), less needs to be changed in your tests to accommodate the refactor.</p>","
"
"
","<p>I'm using Python's logging module to log some debug strings to a file which works pretty well. Now in addition, I'd like to use this module to also print the strings out to stdout. How do I do this? In order to log my strings to a file I use following code:</p>","
","<pre><code>import logging
import logging.handlers
logger = logging.getLogger("""")
logger.setLevel(logging.DEBUG)
handler = logging.handlers.RotatingFileHandler(
    LOGFILE, maxBytes=(1048576*5), backupCount=7
)
formatter = logging.Formatter(""%(asctime)s - %(name)s - %(levelname)s - %(message)s"")
handler.setFormatter(formatter)
logger.addHandler(handler)
</code></pre>","
",<p>and then call a logger function like</p>,"
","<pre><code>logger.debug(""I am written to the file"")
</code></pre>","
",<p>Thank you for some help here!</p>,"
"
"
","<p>Just get a handle to the root logger and add the <code>StreamHandler</code>. The <code>StreamHandler</code> writes to stderr. Not sure if you really need stdout over stderr, but this is what I use when I setup the Python logger and I also add the <code>FileHandler</code> as well. Then all my logs go to both places (which is what it sounds like you want).</p>","
","<pre><code>import logging
logging.getLogger().addHandler(logging.StreamHandler())
</code></pre>","
","<p>If you want to output to <code>stdout</code> instead of <code>stderr</code>, you just need to specify it to the <code>StreamHandler</code> constructor.</p>","
","<pre><code>import sys
# ...
logging.getLogger().addHandler(logging.StreamHandler(sys.stdout))
</code></pre>","
",<p>You could also add a <code>Formatter</code> to it so all your log lines have a common header.</p>,"
",<p>ie:</p>,"
","<pre><code>import logging
logFormatter = logging.Formatter(""%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s"")
rootLogger = logging.getLogger()

fileHandler = logging.FileHandler(""{0}/{1}.log"".format(logPath, fileName))
fileHandler.setFormatter(logFormatter)
rootLogger.addHandler(fileHandler)

consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
rootLogger.addHandler(consoleHandler)
</code></pre>","
",<p>Prints to the format of:</p>,"
","<pre><code>2012-12-05 16:58:26,618 [MainThread  ] [INFO ]  my message
</code></pre>","
"
"
","<p><a href=""https://docs.python.org/3/library/logging.html#logging.basicConfig"" rel=""noreferrer""><code>logging.basicConfig()</code></a> can take a keyword argument <code>handlers</code> since Python 3.3, which simplifies logging setup a lot, especially when setting up multiple handlers with the same formatter:</p>","
","<blockquote>
<p><strong><code>handlers</code></strong> â€“ If specified, this should be an iterable of already created handlers to add to the root logger. Any handlers which donâ€™t already have a formatter set will be assigned the default formatter created in this function.</p>
</blockquote>","
",<p>The whole setup can therefore be done with a single call like this:</p>,"
","<pre class=""lang-py prettyprint-override""><code>import logging

logging.basicConfig(
    level=logging.INFO,
    format=""%(asctime)s [%(levelname)s] %(message)s"",
    handlers=[
        logging.FileHandler(""debug.log""),
        logging.StreamHandler()
    ]
)
</code></pre>","
","<p>(Or with <code>import sys</code> + <code>StreamHandler(sys.stdout)</code> per original question's requirements â€“ the default for StreamHandler is to write to stderr. Look at <a href=""https://docs.python.org/3/library/logging.html#logrecord-attributes"" rel=""noreferrer"">LogRecord attributes</a> if you want to customize the log format and add things like filename/line, thread info etc.)</p>","
",<p>The setup above needs to be done only once near the beginning of the script. You can use the logging from all other places in the codebase later like this:</p>,"
","<pre class=""lang-py prettyprint-override""><code>logging.info('Useful message')
logging.error('Something bad happened')
...
</code></pre>","
","<p>Note: If it doesn't work, someone else has probably already initialized the logging system differently. Comments suggest doing <code>logging.root.handlers = []</code> before the call to <code>basicConfig()</code>.</p>","
"
"
","<p>Adding a StreamHandler without arguments goes to stderr instead of stdout. If some other process has a dependency on the stdout dump (i.e. when writing an NRPE plugin), then make sure to specify stdout explicitly or you might run into some unexpected troubles.</p>","
",<p>Here's a quick example reusing the assumed values and LOGFILE from the question:</p>,"
","<pre><code>import logging
from logging.handlers import RotatingFileHandler
from logging import handlers
import sys

log = logging.getLogger('')
log.setLevel(logging.DEBUG)
format = logging.Formatter(""%(asctime)s - %(name)s - %(levelname)s - %(message)s"")

ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(format)
log.addHandler(ch)

fh = handlers.RotatingFileHandler(LOGFILE, maxBytes=(1048576*5), backupCount=7)
fh.setFormatter(format)
log.addHandler(fh)
</code></pre>","
"
"
","<p>Here is a complete, nicely wrapped solution based on <a href=""https://stackoverflow.com/a/13733863/1976617"">Waterboy's answer</a> and various other sources. It supports logging to both console and log file, allows for different log level settings, provides colorized output and is easily configurable (also available as <a href=""https://gist.github.com/fonic/7e5ab76d951a2ab2d5f526a7db3e2004"" rel=""noreferrer"">Gist</a>):</p>","
","<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# -------------------------------------------------------------------------------
#                                                                               -
#  Python dual-logging setup (console and log file),                            -
#  supporting different log levels and colorized output                         -
#                                                                               -
#  Created by Fonic &lt;https://github.com/fonic&gt;                                  -
#  Date: 04/05/20                                                               -
#                                                                               -
#  Based on:                                                                    -
#  https://stackoverflow.com/a/13733863/1976617                                 -
#  https://uran198.github.io/en/python/2016/07/12/colorful-python-logging.html  -
#  https://en.wikipedia.org/wiki/ANSI_escape_code#Colors                        -
#                                                                               -
# -------------------------------------------------------------------------------

# Imports
import os
import sys
import logging

# Logging formatter supporting colorized output
class LogFormatter(logging.Formatter):

    COLOR_CODES = {
        logging.CRITICAL: ""\033[1;35m"", # bright/bold magenta
        logging.ERROR:    ""\033[1;31m"", # bright/bold red
        logging.WARNING:  ""\033[1;33m"", # bright/bold yellow
        logging.INFO:     ""\033[0;37m"", # white / light gray
        logging.DEBUG:    ""\033[1;30m""  # bright/bold black / dark gray
    }

    RESET_CODE = ""\033[0m""

    def __init__(self, color, *args, **kwargs):
        super(LogFormatter, self).__init__(*args, **kwargs)
        self.color = color

    def format(self, record, *args, **kwargs):
        if (self.color == True and record.levelno in self.COLOR_CODES):
            record.color_on  = self.COLOR_CODES[record.levelno]
            record.color_off = self.RESET_CODE
        else:
            record.color_on  = """"
            record.color_off = """"
        return super(LogFormatter, self).format(record, *args, **kwargs)

# Setup logging
def setup_logging(console_log_output, console_log_level, console_log_color, logfile_file, logfile_log_level, logfile_log_color, log_line_template):

    # Create logger
    # For simplicity, we use the root logger, i.e. call 'logging.getLogger()'
    # without name argument. This way we can simply use module methods for
    # for logging throughout the script. An alternative would be exporting
    # the logger, i.e. 'global logger; logger = logging.getLogger(""&lt;name&gt;"")'
    logger = logging.getLogger()

    # Set global log level to 'debug' (required for handler levels to work)
    logger.setLevel(logging.DEBUG)

    # Create console handler
    console_log_output = console_log_output.lower()
    if (console_log_output == ""stdout""):
        console_log_output = sys.stdout
    elif (console_log_output == ""stderr""):
        console_log_output = sys.stderr
    else:
        print(""Failed to set console output: invalid output: '%s'"" % console_log_output)
        return False
    console_handler = logging.StreamHandler(console_log_output)

    # Set console log level
    try:
        console_handler.setLevel(console_log_level.upper()) # only accepts uppercase level names
    except:
        print(""Failed to set console log level: invalid level: '%s'"" % console_log_level)
        return False

    # Create and set formatter, add console handler to logger
    console_formatter = LogFormatter(fmt=log_line_template, color=console_log_color)
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)

    # Create log file handler
    try:
        logfile_handler = logging.FileHandler(logfile_file)
    except Exception as exception:
        print(""Failed to set up log file: %s"" % str(exception))
        return False

    # Set log file log level
    try:
        logfile_handler.setLevel(logfile_log_level.upper()) # only accepts uppercase level names
    except:
        print(""Failed to set log file log level: invalid level: '%s'"" % logfile_log_level)
        return False

    # Create and set formatter, add log file handler to logger
    logfile_formatter = LogFormatter(fmt=log_line_template, color=logfile_log_color)
    logfile_handler.setFormatter(logfile_formatter)
    logger.addHandler(logfile_handler)

    # Success
    return True

# Main function
def main():

    # Setup logging
    script_name = os.path.splitext(os.path.basename(sys.argv[0]))[0]
    if (not setup_logging(console_log_output=""stdout"", console_log_level=""warning"", console_log_color=True,
                        logfile_file=script_name + "".log"", logfile_log_level=""debug"", logfile_log_color=False,
                        log_line_template=""%(color_on)s[%(created)d] [%(threadName)s] [%(levelname)-8s] %(message)s%(color_off)s"")):
        print(""Failed to setup logging, aborting."")
        return 1

    # Log some messages
    logging.debug(""Debug message"")
    logging.info(""Info message"")
    logging.warning(""Warning message"")
    logging.error(""Error message"")
    logging.critical(""Critical message"")

# Call main function
if (__name__ == ""__main__""):
    sys.exit(main())
</code></pre>","
",<hr/>,"
","<p><strong>NOTE regarding Microsoft Windows:</strong><br/>
For colors to actually appear on Microsoft Windows, additional steps are necessary. There are two options (both successfully tested on Microsoft Windows 10):</p>","
","<p>1) Enable ANSI terminal mode using the following code (enables terminal to interpret escape sequences by setting flag <code>ENABLE_VIRTUAL_TERMINAL_PROCESSING</code>; more info on this <a href=""https://stackoverflow.com/a/36760881/1976617"">here</a>, <a href=""https://stackoverflow.com/a/37505496/1976617"">here</a>, <a href=""https://docs.microsoft.com/en-us/windows/console/setconsolemode"" rel=""noreferrer"">here</a> and <a href=""https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences"" rel=""noreferrer"">here</a>):</p>","
","<pre><code># Enable ANSI terminal mode on Microsoft Windows
def windows_enable_ansi_terminal_mode():
    if (sys.platform != ""win32""):
        return None
    try:
        import ctypes
        kernel32 = ctypes.windll.kernel32
        result = kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7)
        if (result == 0): raise Exception
        return True
    except:
        return False
</code></pre>","
","<p>2) Use Python package <a href=""https://pypi.org/project/colorama/"" rel=""noreferrer"">colorama</a> (filters output sent to <em>stdout</em> and <em>stderr</em> and translates escape sequences to native Windows API calls):</p>","
","<pre><code>import colorama
colorama.init()
</code></pre>","
"
"
","<p>Either run <code>basicConfig</code> with <code>stream=sys.stdout</code> as the argument prior to setting up any other handlers or logging any messages, or manually add a <code>StreamHandler</code> that pushes messages to stdout to the root logger (or any other logger you want, for that matter).</p>","
"
"
",<p>Logging to <code>stdout</code> and <code>rotating file</code> with different levels and formats:</p>,"
","<pre><code>import logging
import logging.handlers
import sys

if __name__ == ""__main__"":

    # Change root logger level from WARNING (default) to NOTSET in order for all messages to be delegated.
    logging.getLogger().setLevel(logging.NOTSET)

    # Add stdout handler, with level INFO
    console = logging.StreamHandler(sys.stdout)
    console.setLevel(logging.INFO)
    formater = logging.Formatter('%(name)-13s: %(levelname)-8s %(message)s')
    console.setFormatter(formater)
    logging.getLogger().addHandler(console)

    # Add file rotating handler, with level DEBUG
    rotatingHandler = logging.handlers.RotatingFileHandler(filename='rotating.log', maxBytes=1000, backupCount=5)
    rotatingHandler.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    rotatingHandler.setFormatter(formatter)
    logging.getLogger().addHandler(rotatingHandler)

    log = logging.getLogger(""app."" + __name__)

    log.debug('Debug message, should only appear in the file.')
    log.info('Info message, should appear in file and stdout.')
    log.warning('Warning message, should appear in file and stdout.')
    log.error('Error message, should appear in file and stdout.')
</code></pre>","
"
"
","<p>After having used Waterboy's code over and over in multiple Python packages, I finally cast it into a tiny standalone Python package, which you can find here:</p>","
","<p><a href=""https://github.com/acschaefer/duallog"" rel=""noreferrer"">https://github.com/acschaefer/duallog</a></p>","
","<p>The code is well documented and easy to use. Simply download the <code>.py</code> file and include it in your project, or install the whole package via <code>pip install duallog</code>. </p>","
"
"
","<p>For 2.7, try the following:  </p>","
","<pre><code>fh = logging.handlers.RotatingFileHandler(LOGFILE, maxBytes=(1048576*5), backupCount=7)
</code></pre>","
"
"
",<p>What do these python file extensions mean?</p>,"
","<ul>
<li>.pyc</li>
<li>.pyd</li>
<li>.pyo</li>
</ul>","
",<p>What are the differences between them and how are they generated from a *.py file?</p>,"
"
"
","<ol>
<li><code>.py</code>: This is normally the input source code that you've written.</li>
<li><code>.pyc</code>: This is the compiled bytecode. If you import a module, python will build a <code>*.pyc</code> file that contains the bytecode to make importing it again later easier (and faster).</li>
<li><code>.pyo</code>:  This was a file format used before Python 3.5 for <code>*.pyc</code> files that were created with optimizations (<code>-O</code>) flag. (see the note below)</li>
<li><code>.pyd</code>: This is basically a windows dll file. <a href=""http://docs.python.org/faq/windows.html#is-a-pyd-file-the-same-as-a-dll"" rel=""noreferrer"">http://docs.python.org/faq/windows.html#is-a-pyd-file-the-same-as-a-dll</a></li>
</ol>","
","<p>Also for some further discussion on <code>.pyc</code> vs <code>.pyo</code>, take a look at: <a href=""https://web.archive.org/web/20160130165632/http://www.network-theory.co.uk/docs/pytut/CompiledPythonfiles.html"" rel=""noreferrer"">http://www.network-theory.co.uk/docs/pytut/CompiledPythonfiles.html</a> (I've copied the important part below)</p>","
","<blockquote>
<ul>
<li>When the Python interpreter is invoked with the -O flag, optimized code is generated and stored in â€˜.pyoâ€™ files. The optimizer currently doesn't help much; it only removes assert statements. When -O is used, all bytecode is optimized; .pyc files are ignored and .py files are compiled to optimized bytecode.</li>
<li>Passing two -O flags to the Python interpreter (-OO) will cause the bytecode compiler to perform optimizations that could in some rare cases result in malfunctioning programs. Currently only <code>__doc__</code> strings are removed from the bytecode, resulting in more compact â€˜.pyoâ€™ files. Since some programs may rely on having these available, you should only use this option if you know what you're doing.</li>
<li>A program doesn't run any faster when it is read from a â€˜.pycâ€™ or â€˜.pyoâ€™ file than when it is read from a â€˜.pyâ€™ file; the only thing that's faster about â€˜.pycâ€™ or â€˜.pyoâ€™ files is the speed with which they are loaded.</li>
<li>When a script is run by giving its name on the command line, the bytecode for the script is never written to a â€˜.pycâ€™ or â€˜.pyoâ€™ file. Thus, the startup time of a script may be reduced by moving most of its code to a module and having a small bootstrap script that imports that module. It is also possible to name a â€˜.pycâ€™ or â€˜.pyoâ€™ file directly on the command line.</li>
</ul>
</blockquote>","
",<p><strong>Note:</strong> </p>,"
","<p>On 2015-09-15 the <a href=""https://docs.python.org/3/whatsnew/3.5.html#pep-488-elimination-of-pyo-files"" rel=""noreferrer"">Python 3.5 release</a> implemented PEP-488 and eliminated <code>.pyo</code> files. 
This means that <code>.pyc</code> files represent both unoptimized and optimized bytecode.</p>","
"
"
","<ul>
<li><strong>.py</strong> - Regular script</li>
<li><strong>.py3</strong> - (rarely used) Python3 script. Python3 scripts usually end with "".py"" not "".py3"", but I have seen that a few times</li>
<li><strong>.pyc</strong> - compiled script (Bytecode)</li>
<li><strong>.pyo</strong> - optimized pyc file (As of Python3.5, Python will only use pyc rather than pyo and pyc)</li>
<li><strong>.pyw</strong> - Python script to run in Windowed mode, without a console; executed with pythonw.exe</li>
<li><strong>.pyx</strong> - Cython src to be converted to C/C++</li>
<li><strong>.pyd</strong> - Python script made as a Windows DLL</li>
<li><strong>.pxd</strong> - Cython script which is equivalent to a C/C++ header</li>
<li><strong>.pxi</strong> - MyPy stub</li>
<li><strong>.pyi</strong> - Stub file (<a href=""https://www.python.org/dev/peps/pep-0484/#stub-files"" rel=""noreferrer"">PEP 484</a>)</li>
<li><strong>.pyz</strong> - Python script archive (<a href=""https://www.python.org/dev/peps/pep-0441/"" rel=""noreferrer"">PEP 441</a>); this is a script containing compressed Python scripts (ZIP) in binary form after the standard Python script header</li>
<li><strong>.pywz</strong> - Python script archive for MS-Windows (<a href=""https://www.python.org/dev/peps/pep-0441/"" rel=""noreferrer"">PEP 441</a>); this is a script containing compressed Python scripts (ZIP) in binary form after the standard Python script header</li>
<li><strong>.py[cod]</strong> - wildcard notation in "".gitignore"" that means the file may be "".pyc"", "".pyo"", or "".pyd"".</li>
<li><strong>.pth</strong> - a path configuration file; its contents are additional items (one per line) to be added to <code>sys.path</code>. See <a href=""https://docs.python.org/3/library/site.html#module-site"" rel=""noreferrer""><code>site</code></a> module.</li>
</ul>","
","<p>A larger list of additional Python file-extensions (mostly rare and unofficial) can be found at <a href=""http://dcjtech.info/topic/python-file-extensions/"" rel=""noreferrer"">http://dcjtech.info/topic/python-file-extensions/</a></p>","
"
"
","<pre><code>r = {'is_claimed': 'True', 'rating': 3.5}
r = json.dumps(r)
file.write(str(r['rating']))
</code></pre>","
",<p>I am not able to access my data in the JSON. What am I doing wrong?</p>,"
","<pre><code>TypeError: string indices must be integers, not str
</code></pre>","
"
"
","<p><code>json.dumps()</code> converts a dictionary to <code>str</code> object, not a <code>json(dict)</code> object! So you have to load your <code>str</code> into a <code>dict</code> to use it by using <a href=""https://docs.python.org/2/library/json.html#json.loads"" rel=""noreferrer""><strong><code>json.loads()</code></strong></a> method</p>","
",<p>See <code>json.dumps()</code> as a save method and <code>json.loads()</code> as a retrieve method.</p>,"
",<p>This is the code sample which might help you understand it more:</p>,"
","<pre><code>import json

r = {'is_claimed': 'True', 'rating': 3.5}
r = json.dumps(r)
loaded_r = json.loads(r)
loaded_r['rating'] #Output 3.5
type(r) #Output str
type(loaded_r) #Output dict
</code></pre>","
"
"
","<p><code>json.dumps()</code> returns the JSON string representation of the python dict. <a href=""https://docs.python.org/2/library/json.html#json.dumps"" rel=""noreferrer"">See the docs</a></p>","
","<p>You can't do <code>r['rating']</code> because r is a string, not a dict anymore</p>","
",<p>Perhaps you meant something like</p>,"
","<pre><code>r = {'is_claimed': 'True', 'rating': 3.5}
json = json.dumps(r) # note i gave it a different name
file.write(str(r['rating']))
</code></pre>","
"
"
","<h3><a href=""https://docs.python.org/3/library/json.html#module-json"" rel=""noreferrer""><code>json.dumps()</code></a> is used to decode JSON data</h3>","
","<ul>
<li><code>json.loads</code> take a string as input and returns a dictionary as output.</li>
<li><code>json.dumps</code> take a dictionary as input and returns a string as output.</li>
</ul>","
","<pre class=""lang-py prettyprint-override""><code>import json

# initialize different data
str_data = 'normal string'
int_data = 1
float_data = 1.50
list_data = [str_data, int_data, float_data]
nested_list = [int_data, float_data, list_data]
dictionary = {
    'int': int_data,
    'str': str_data,
    'float': float_data,
    'list': list_data,
    'nested list': nested_list
}

# convert them to JSON data and then print it
print('String :', json.dumps(str_data))
print('Integer :', json.dumps(int_data))
print('Float :', json.dumps(float_data))
print('List :', json.dumps(list_data))
print('Nested List :', json.dumps(nested_list, indent=4))
print('Dictionary :', json.dumps(dictionary, indent=4))  # the json data will be indented
</code></pre>","
",<p>output:</p>,"
","<pre class=""lang-sh prettyprint-override""><code>String : ""normal string""
Integer : 1
Float : 1.5
List : [""normal string"", 1, 1.5]
Nested List : [
    1,
    1.5,
    [
        ""normal string"",
        1,
        1.5
    ]
]
Dictionary : {
    ""int"": 1,
    ""str"": ""normal string"",
    ""float"": 1.5,
    ""list"": [
        ""normal string"",
        1,
        1.5
    ],
    ""nested list"": [
        1,
        1.5,
        [
            ""normal string"",
            1,
            1.5
        ]
    ]
}
</code></pre>","
","<ul>
<li>Python Object to JSON Data Conversion</li>
</ul>","
","<pre class=""lang-sh prettyprint-override""><code>|                 Python                 |  JSON  |
|:--------------------------------------:|:------:|
|                  dict                  | object |
|               list, tuple              |  array |
|                   str                  | string |
| int, float, int- &amp; float-derived Enums | number |
|                  True                  |  true  |
|                  False                 |  false |
|                  None                  |  null  |
</code></pre>","
",<h2>UPDATE</h2>,"
",<h3>In the JSON file</h3>,"
","<pre class=""lang-py prettyprint-override""><code>nested_dictionary = {
    'one': nested_list,
    'two': dictionary,

}

json_dict = {'Nested Dictionary': nested_dictionary,
             'Multiple':[nested_dictionary, nested_dictionary, nested_dictionary]
            }

with open(""test_nested.json"", ""w"") as outfile:
    json.dump(json_dict, outfile, indent=4, sort_keys=False)

</code></pre>","
",<p>chart response</p>,"
","<p><a href=""https://i.stack.imgur.com/KoAVo.png"" rel=""noreferrer""><img alt=""enter image description here"" src=""https://i.stack.imgur.com/KoAVo.png""/></a></p>","
",<p>output into <code>test_nested.json</code></p>,"
","<pre class=""lang-sh prettyprint-override""><code>{
    ""Nested Dictionary"": {
        ""one"": [
            1,
            1.5,
            [
                ""normal string"",
                1,
                1.5
            ]
        ],
        ""two"": {
            ""int"": 1,
            ""str"": ""normal string"",
            ""float"": 1.5,
            ""list"": [
                ""normal string"",
                1,
                1.5
            ],
            ""nested list"": [
                1,
                1.5,
                [
                    ""normal string"",
                    1,
                    1.5
                ]
            ]
        }
    },
    ""Multiple"": [
        {
            ""one"": [
                1,
                1.5,
                [
                    ""normal string"",
                    1,
                    1.5
                ]
            ],
            ""two"": {
                ""int"": 1,
                ""str"": ""normal string"",
                ""float"": 1.5,
                ""list"": [
                    ""normal string"",
                    1,
                    1.5
                ],
                ""nested list"": [
                    1,
                    1.5,
                    [
                        ""normal string"",
                        1,
                        1.5
                    ]
                ]
            }
        },
        {
            ""one"": [
                1,
                1.5,
                [
                    ""normal string"",
                    1,
                    1.5
                ]
            ],
            ""two"": {
                ""int"": 1,
                ""str"": ""normal string"",
                ""float"": 1.5,
                ""list"": [
                    ""normal string"",
                    1,
                    1.5
                ],
                ""nested list"": [
                    1,
                    1.5,
                    [
                        ""normal string"",
                        1,
                        1.5
                    ]
                ]
            }
        },
        {
            ""one"": [
                1,
                1.5,
                [
                    ""normal string"",
                    1,
                    1.5
                ]
            ],
            ""two"": {
                ""int"": 1,
                ""str"": ""normal string"",
                ""float"": 1.5,
                ""list"": [
                    ""normal string"",
                    1,
                    1.5
                ],
                ""nested list"": [
                    1,
                    1.5,
                    [
                        ""normal string"",
                        1,
                        1.5
                    ]
                ]
            }
        }
    ]
}
</code></pre>","
",<h3><code>class</code> instance to JSON</h3>,"
","<ul>
<li>A simple solution:</li>
</ul>","
","<pre class=""lang-py prettyprint-override""><code>class Foo(object):
    def __init__(
            self,
            data_str,
            data_int,
            data_float,
            data_list,
            data_n_list,
            data_dict,
            data_n_dict):
        self.str_data = data_str
        self.int_data = data_int
        self.float_data = data_float
        self.list_data = data_list
        self.nested_list = data_n_list
        self.dictionary = data_dict
        self.nested_dictionary = data_n_dict


foo = Foo(
    str_data,
    int_data,
    float_data,
    list_data,
    nested_list,
    dictionary,
    nested_dictionary)

# Because the JSON object is a Python dictionary. 
result = json.dumps(foo.__dict__, indent=4)
# See table above.

# or with built-in function that accesses .__dict__ for you, called vars()
# result = json.dumps(vars(foo), indent=4)

print(result) # same as before
</code></pre>","
","<ul>
<li>Even simpler</li>
</ul>","
","<pre class=""lang-py prettyprint-override""><code>class Bar:
    def toJSON(self):
        return json.dumps(self, default=lambda o: o.__dict__,
                          sort_keys=False, indent=4)


bar = Bar()
bar.web = ""Stackoverflow""
bar.type = ""Knowledge""
bar.is_the_best = True
bar.user = Bar()
bar.user.name = ""Milovan""
bar.user.age = 34

print(bar.toJSON())
</code></pre>","
",<p>chart response</p>,"
","<p><a href=""https://i.stack.imgur.com/kksty.png"" rel=""noreferrer""><img alt=""enter image description here"" src=""https://i.stack.imgur.com/kksty.png""/></a></p>","
",<p>output:</p>,"
","<pre class=""lang-sh prettyprint-override""><code>{
    ""web"": ""Stackoverflow"",
    ""type"": ""Knowledge"",
    ""is_the_best"": true,
    ""user"": {
        ""name"": ""Milovan"",
        ""age"": 34
    }
}
</code></pre>","
"
"
",<p>No need to convert it in a string by using <code>json.dumps()</code></p>,"
","<pre><code>r = {'is_claimed': 'True', 'rating': 3.5}
file.write(r['is_claimed'])
file.write(str(r['rating']))
</code></pre>","
",<p>You can get the values directly from the dict object.</p>,"
"
"
",<p>Defining r as a dictionary should do the trick:</p>,"
","<pre><code>&gt;&gt;&gt; r: dict = {'is_claimed': 'True', 'rating': 3.5}
&gt;&gt;&gt; print(r['rating'])
3.5
&gt;&gt;&gt; type(r)
&lt;class 'dict'&gt;
</code></pre>","
"
"
",<p>You can create a nested dictionary in the above example by declaring a new dictionary inside the default dictionary.</p>,"
","<pre><code>import json 
dictionary = {
'fruit':{""Grapes"": ""10"",""color"": ""green""},
'vegetable':{""chilli"": ""4"",""color"": ""red""},
}
result = json.dumps(dictionary, indent = 3)
</code></pre>","
",<p>print(result)</p>,"
","<p>Here, I have used indent=3</p>","
","<p>Reference: <a href=""https://favtutor.com/blogs/dict-to-json-python"" rel=""nofollow noreferrer"">https://favtutor.com/blogs/dict-to-json-python</a></p>","
"
"
","<p>When I try to use a <code>print</code> statement in Python, it gives me this error:</p>","
","<pre><code>&gt;&gt;&gt; print ""Hello, World!""
  File ""&lt;stdin&gt;"", line 1
    print ""Hello, World!""
                        ^
SyntaxError: Missing parentheses in call to 'print'
</code></pre>","
",<p>What does that mean?</p>,"
"
"
",<p>This error message means that you are attempting to use Python 3 to follow an example or run a program that uses the Python 2 <code>print</code> statement:</p>,"
",<p><s></s></p>,"
","<pre><code>print ""Hello, World!""
</code></pre>","
",<p></p>
"
","<p>Unfortunately, the old <a href=""http://xkcd.com/353/"" rel=""noreferrer"">xkcd comic</a> isn't completely up to date anymore.</p>","
","<p><a href=""http://xkcd.com/353/"" rel=""noreferrer""><img alt=""https://imgs.xkcd.com/comics/python.png"" src=""https://imgs.xkcd.com/comics/python.png"" title=""I wrote 20 short programs in Python yesterday. It was wonderful. Perl, I'm leaving you.""/></a></p>","
",<p>Since Python 3.0 you have to write:</p>,"
","<pre><code>print(""Hello, World!"")
</code></pre>","
",<p>And someone has still to write that <code>antigravity</code> library :(</p>,"
"
"
","<p>There is a change in syntax from Python 2 to Python 3.
In Python 2,</p>","
","<pre><code>print ""Hello, World!"" 
</code></pre>","
","<p>will work but in Python 3, use parentheses as </p>","
","<pre><code>print(""Hello, World!"")
</code></pre>","
",<p>This is equivalent syntax to Scala and near to Java.</p>,"
"
"
","<p>Basically, since Python 3.x you need to use <code>print</code> with parenthesis.</p>","
","<p><strong>Python 2.x</strong>: print ""Lord of the Rings""</p>","
","<p><strong>Python 3.x</strong>: print(""Lord of the Rings"")</p>","
","<hr>
<h1>Explanation</h1>
<p><strong><code>print</code></strong> was a <strong>statement</strong> in <strong>2.x</strong>, but it's a <strong>function</strong> in <strong>3.x</strong>. Now, there are a number of good reasons for this.</p>
<ol>
<li>With function format of Python 3.x, more flexibility comes when printing multiple items with comma separated.</li>
<li>You can't use argument splatting with a statement. In 3.x if you have a list of items that you want to print with a separator, you can do this:</li>
</ol>
<pre><code>&gt;&gt;&gt; items = ['foo', 'bar', 'baz']
&gt;&gt;&gt; print(*items, sep='+')
foo+bar+baz
</code></pre>
<ol start=""3"">
<li>You can't override a statement. If you want to change the behavior of print, you can do that when it's a function but not when it's a statement.</li>
</ol>
</hr>"
"
","<p>If your code should work in both Python 2 and 3, you can achieve this by loading this at the beginning of your program:</p>","
","<pre><code>from __future__ import print_function   # If code has to work in Python 2 and 3!
</code></pre>","
",<p>Then you can print in the Python 3 way:</p>,"
","<pre><code>print(""python"")
</code></pre>","
",<p>If you want to print something without creating a new line - you can do this:</p>,"
","<pre><code>for number in range(0, 10):
    print(number, end=', ')
</code></pre>","
"
"
","<p>In Python 3, you can only print as:</p>","
","<pre><code>print(""STRING"")
</code></pre>","
","<p>But in Python 2, the parentheses are not necessary.</p>","
"
"
","<p>I could also just add that I knew everything about the syntax change between <code>Python2.7</code> and <code>Python3</code>, and my code was correctly written as <code>print(""string"")</code> and even 
<code>print(f""string"")</code>... </p>","
",<p>But after some time of debugging I realized that my bash script was calling python like: </p>,"
","<blockquote>
<p>python file_name.py</p>
</blockquote>","
",<p>which had the effect of calling my python script by default using <code>python2.7</code> which gave the error. So I changed my bash script to:</p>,"
","<blockquote>
<p>python3 file_name.py</p>
</blockquote>","
",<p>which of coarse uses python3 to run the script which fixed the error.</p>,"
"
"
","<p>Outside of the direct answers here, one should note the other key difference between python 2 and 3. The <a href=""https://wiki.python.org/moin/Python2orPython3"" rel=""nofollow noreferrer"">official python wiki</a> goes into almost all of the major differences and focuses on when you should use either of the versions. <a href=""https://learntocodewith.me/programming/python/python-2-vs-python-3/"" rel=""nofollow noreferrer"">This blog post</a> also does a fine job of explaining the current python universe and the somehow unsolved puzzle of moving to python 3.</p>","
","<p>As far as I can tell, you are beginning to learn the python language. You should consider the aforementioned articles before you continue down the python 3 route. Not only will you have to change some of your syntax, you will also need to think about which packages will be available to you (an advantage of python 2) and potential optimizations that could be made in your code (an advantage of python 3).</p>","
"
"
","<p><code>print('Hello, World!')</code></p>","
","<p>You're using python 3, where you need brackets when printing.</p>","
"
"
",<p>So I was getting this error</p>,"
","<pre><code>from trp import BoundingBox, Document
File ""C:\Users\Kshitij Agarwal\AppData\Roaming\Python\Python39\site-packages\trp\__init__.py"", line 31
print ip
      ^ 
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(ip)?
</code></pre>","
","<p>This is a Python package error, in which Python2 has been used and you are probably running this on Python3.</p>","
","<p>One solution could be to convert Python2 <code>print something</code> to Python3 <code>print(something)</code> for every line in each file in the package folder, which is not a good ideaðŸ˜…. I mean, you can do it but still there are better ways.</p>","
","<p>To perform the same task, there is a package named <strong>2to3</strong> in Python which converts Python2 scripts to Python3 scripts. To install it, execute the ðŸ‘‡ command in terminal..</p>","
","<pre><code>pip install 2to3
</code></pre>","
","<p>Then change the directory in terminal to the location where the package files are present, in my case - <strong>C:\Users\Kshitij Agarwal\AppData\Roaming\Python\Python39\site-packages\trp</strong></p>","
",<p>Now execute the command ðŸ‘‡</p>,"
","<pre><code>2to3 . -w
</code></pre>","
","<p>and <strong>voila</strong>, all the <em>Python2</em> files in that directory will be converted to <em>Python3</em>.</p>","
",<p><strong>Note</strong>:- The above commands hold true for other operating systems as well. Only Python package path will vary as per the system.</p>,"
"
"
",<p>I want to build a query for sunburnt(solr interface) using class inheritance and therefore adding key - value pairs together. The sunburnt interface takes keyword arguments. How can I transform a dict <code>({'type':'Event'})</code> into keyword arguments <code>(type='Event')</code>?</p>,"
"
"
","<p>Use the <a href=""http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists"" rel=""noreferrer"">double-star</a> (aka <a href=""https://stackoverflow.com/questions/2322355/proper-name-for-python-operator/2322384#2322384"">double-splat?</a>) operator:</p>","
","<pre><code>func(**{'type':'Event'})
</code></pre>","
",<p>is equivalent to</p>,"
","<pre><code>func(type='Event')
</code></pre>","
"
"
",<p><code>**</code> operator would be helpful here. </p>,"
",<p><code>**</code> operator will unpack the dict elements and thus <code>**{'type':'Event'}</code> would be treated as <code>type='Event'</code></p>,"
",<p><code>func(**{'type':'Event'})</code> is same as <code>func(type='Event')</code> i.e the dict elements would be converted to the <code>keyword arguments</code>. </p>,"
",<p>FYI</p>,"
",<p><code>*</code> will unpack the list elements and they would be treated as <code>positional arguments</code>.</p>,"
","<p><code>func(*['one', 'two'])</code> is same as <code>func('one', 'two')</code></p>","
"
"
",<p>Here is a complete example showing how to use the <code>**</code> operator to pass values from a dictionary as keyword arguments.</p>,"
","<pre><code>&gt;&gt;&gt; def f(x=2):
...     print(x)
... 
&gt;&gt;&gt; new_x = {'x': 4}
&gt;&gt;&gt; f()        #    default value x=2
2
&gt;&gt;&gt; f(x=3)     #   explicit value x=3
3
&gt;&gt;&gt; f(**new_x) # dictionary value x=4 
4
</code></pre>","
"
"
","<div>
<aside class=""s-notice s-notice__info post-notice js-post-notice mb16"" role=""status"">
<div class=""d-flex fd-column fw-nowrap"">
<div class=""d-flex fw-nowrap"">
<div class=""flex--item wmn0 fl1 lh-lg"">
<div class=""flex--item fl1 lh-lg"">
<b>This question already has answers here</b>:
                        
                    </div>
</div>
</div>
<div class=""flex--item mb0 mt4"">
<a dir=""ltr"" href=""/questions/1186789/what-is-the-best-way-to-call-a-script-from-another-script"">What is the best way to call a script from another script?</a>
<span class=""question-originals-answer-count"">
                                (15 answers)
                            </span>
</div>
<div class=""flex--item mb0 mt8"">Closed <span class=""relativetime"" title=""2015-02-26 14:05:25Z"">7 years ago</span>.</div>
</div>
</aside>
</div>","
",<p>I want to run a Python script from another Python script. I want to pass variables like I would using the command line.</p>,"
","<p>For example, I would run my first script that would iterate through a list of values (0,1,2,3) and pass those to the 2nd script <code>script2.py 0</code> then <code>script2.py 1</code>, etc.</p>","
","<p>I found <a href=""https://stackoverflow.com/questions/1186789/what-is-the-best-way-to-call-a-python-script-from-another-python-script"">StackÂ Overflow question 1186789</a> which is a similar question, but ars's answer calls a function, where as I want to run the whole script, not just a function, and balpha's answer calls the script but with no arguments. I changed this to something like the below as a test:</p>","
","<pre><code>execfile(""script2.py 1"")
</code></pre>","
","<p>But it is not accepting variables properly. When I print out the <code>sys.argv</code> in script2.py it is the original command call to first script ""['C:\script1.py'].</p>","
",<p>I don't really want to change the original script (i.e. script2.py in my example) since I don't own it.</p>,"
",<p>I figure there must be a way to do this; I am just confused how you do it.</p>,"
"
"
","<p>Try using <a href=""http://docs.python.org/library/os.html#os.system""><code>os.system</code></a>:</p>","
","<pre><code>os.system(""script2.py 1"")
</code></pre>","
",<p><code>execfile</code> is different because it is designed to run a sequence of Python statements in the <em>current</em> execution context. That's why <code>sys.argv</code> didn't change for you.</p>,"
"
"
","<p>This is inherently the wrong thing to do. If you are running a Python script from another Python script, you should communicate through Python instead of through the OS:</p>","
","<pre><code>import script1
</code></pre>","
","<p>In an ideal world, you will be able to call a function inside <code>script1</code> directly:</p>","
","<pre><code>for i in range(whatever):
    script1.some_function(i)
</code></pre>","
","<p>If necessary, you can hack <code>sys.argv</code>. There's a neat way of doing this using a context manager to ensure that you don't make any permanent changes.</p>","
","<pre><code>import contextlib
@contextlib.contextmanager
def redirect_argv(num):
    sys._argv = sys.argv[:]
    sys.argv=[str(num)]
    yield
    sys.argv = sys._argv

with redirect_argv(1):
    print(sys.argv)
</code></pre>","
",<p>I think this is preferable to passing all your data to the OS and back; that's just silly.</p>,"
"
"
","<p>Ideally, the Python script you want to run will be set up with code like this near the end:</p>","
","<pre><code>def main(arg1, arg2, etc):
    # do whatever the script does


if __name__ == ""__main__"":
    main(sys.argv[1], sys.argv[2], sys.argv[3])
</code></pre>","
","<p>In other words, <em>if</em> the module is called from the command line, it parses the command line options and then calls another function, <code>main()</code>, to do the actual work. (The actual arguments will vary, and the parsing may be more involved.)</p>","
","<p>If you want to call such a script from another Python script, however, you can simply <code>import</code> it and call <code>modulename.main()</code> directly, rather than going through the operating system.</p>","
","<p><code>os.system</code> will work, but it is the roundabout (read ""slow"") way to do it, as you are starting a whole new Python interpreter process each time for no raisin.</p>","
"
"
",<p>I think the good practice may be something like this; </p>,"
","<pre><code>import subprocess
cmd = 'python script.py'

p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
out, err = p.communicate() 
result = out.split('\n')
for lin in result:
    if not lin.startswith('#'):
        print(lin)
</code></pre>","
","<p>according to documentation 
The subprocess module allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes. This module intends to replace several older modules and functions:</p>","
","<pre><code>os.system
os.spawn*
os.popen*
popen2.*
commands.*
</code></pre>","
","<p>Use communicate() rather than .stdin.write, .stdout.read or .stderr.read to avoid deadlocks due to any of the other OS pipe buffers filling up and blocking the child process.
<a href=""https://docs.python.org/2/library/subprocess.html#replacing-os-system"" rel=""noreferrer"">Read Here</a></p>","
"
"
","<p>SubProcess module:<br/>
<a href=""http://docs.python.org/dev/library/subprocess.html#using-the-subprocess-module"" rel=""noreferrer"">http://docs.python.org/dev/library/subprocess.html#using-the-subprocess-module</a></p>","
","<pre><code>import subprocess
subprocess.Popen(""script2.py 1"", shell=True)
</code></pre>","
","<p>With this, you can also redirect stdin, stdout, and stderr.</p>","
"
"
","<pre><code>import subprocess
subprocess.call("" python script2.py 1"", shell=True)
</code></pre>","
"
"
",<p>I want to perform my own complex operations on financial data in dataframes in a sequential manner.</p>,"
","<p>For example I am using the following MSFT CSV file taken from <a href=""http://finance.yahoo.com/q/hp?s=MSFT"">Yahoo Finance</a>:</p>","
","<pre><code>Date,Open,High,Low,Close,Volume,Adj Close
2011-10-19,27.37,27.47,27.01,27.13,42880000,27.13
2011-10-18,26.94,27.40,26.80,27.31,52487900,27.31
2011-10-17,27.11,27.42,26.85,26.98,39433400,26.98
2011-10-14,27.31,27.50,27.02,27.27,50947700,27.27

....
</code></pre>","
",<p>I then do the following:</p>,"
","<pre><code>#!/usr/bin/env python
from pandas import *

df = read_csv('table.csv')

for i, row in enumerate(df.values):
    date = df.index[i]
    open, high, low, close, adjclose = row
    #now perform analysis on open/close based on date, etc..
</code></pre>","
","<p>Is that the most efficient way? Given the focus on speed in pandas, I would assume there must be some special function to iterate through the  values in a manner that one also retrieves the index (possibly through a generator to be memory efficient)? <code>df.iteritems</code> unfortunately only iterates column by column.</p>","
"
"
",<p>The newest versions of pandas now include a built-in function for iterating over rows. </p>,"
","<pre><code>for index, row in df.iterrows():

    # do some logic here
</code></pre>","
","<p>Or, if you want it faster use <code>itertuples()</code></p>","
","<p>But, unutbu's suggestion to use numpy functions to avoid iterating over rows will produce the fastest code. </p>","
"
"
","<p>Pandas is based on NumPy arrays.
The key to speed with NumPy arrays is to perform your operations on the whole array at once, never row-by-row or item-by-item.</p>","
","<p>For example, if <code>close</code> is a 1-d array, and you want the day-over-day percent change,</p>","
","<pre><code>pct_change = close[1:]/close[:-1]
</code></pre>","
","<p>This computes the entire array of percent changes as one statement, instead of </p>","
","<pre><code>pct_change = []
for row in close:
    pct_change.append(...)
</code></pre>","
","<p>So try to avoid the Python loop <code>for i, row in enumerate(...)</code> entirely, and
think about how to perform your calculations with operations on the entire array (or dataframe) as a whole, rather than row-by-row.</p>","
"
"
","<p>Like what has been mentioned before, pandas object is most efficient when process the whole array at once. However for those who really need to loop through a pandas DataFrame to perform something, like me, I found at least three ways to do it. I have done a short test to see which one of the three is the least time consuming.</p>","
","<pre><code>t = pd.DataFrame({'a': range(0, 10000), 'b': range(10000, 20000)})
B = []
C = []
A = time.time()
for i,r in t.iterrows():
    C.append((r['a'], r['b']))
B.append(time.time()-A)

C = []
A = time.time()
for ir in t.itertuples():
    C.append((ir[1], ir[2]))    
B.append(time.time()-A)

C = []
A = time.time()
for r in zip(t['a'], t['b']):
    C.append((r[0], r[1]))
B.append(time.time()-A)

print B
</code></pre>","
",<p>Result:</p>,"
","<pre><code>[0.5639059543609619, 0.017839908599853516, 0.005645036697387695]
</code></pre>","
",<p>This is probably not the best way to measure the time consumption but it's quick for me.</p>,"
",<p>Here are some pros and cons IMHO:</p>,"
","<ul>
<li>.iterrows(): return index and row items in separate variables, but significantly slower</li>
<li>.itertuples(): faster than .iterrows(), but return index together with row items, ir[0] is the index</li>
<li>zip: quickest, but no access to index of the row</li>
</ul>","
",<h2>EDIT 2020/11/10</h2>,"
","<p>For what it is worth, here is an updated benchmark with some other alternatives (perf with MacBookPro 2,4 GHz Intel Core i9 8 cores 32 Go 2667 MHz DDR4)</p>","
","<pre class=""lang-py prettyprint-override""><code>import sys
import tqdm
import time
import pandas as pd

B = []
t = pd.DataFrame({'a': range(0, 10000), 'b': range(10000, 20000)})
for _ in tqdm.tqdm(range(10)):
    C = []
    A = time.time()
    for i,r in t.iterrows():
        C.append((r['a'], r['b']))
    B.append({""method"": ""iterrows"", ""time"": time.time()-A})

    C = []
    A = time.time()
    for ir in t.itertuples():
        C.append((ir[1], ir[2]))
    B.append({""method"": ""itertuples"", ""time"": time.time()-A})

    C = []
    A = time.time()
    for r in zip(t['a'], t['b']):
        C.append((r[0], r[1]))
    B.append({""method"": ""zip"", ""time"": time.time()-A})

    C = []
    A = time.time()
    for r in zip(*t.to_dict(""list"").values()):
        C.append((r[0], r[1]))
    B.append({""method"": ""zip + to_dict('list')"", ""time"": time.time()-A})

    C = []
    A = time.time()
    for r in t.to_dict(""records""):
        C.append((r[""a""], r[""b""]))
    B.append({""method"": ""to_dict('records')"", ""time"": time.time()-A})

    A = time.time()
    t.agg(tuple, axis=1).tolist()
    B.append({""method"": ""agg"", ""time"": time.time()-A})

    A = time.time()
    t.apply(tuple, axis=1).tolist()
    B.append({""method"": ""apply"", ""time"": time.time()-A})

print(f'Python {sys.version} on {sys.platform}')
print(f""Pandas version {pd.__version__}"")
print(
    pd.DataFrame(B).groupby(""method"").agg([""mean"", ""std""]).xs(""time"", axis=1).sort_values(""mean"")
)

## Output

Python 3.7.9 (default, Oct 13 2020, 10:58:24) 
[Clang 12.0.0 (clang-1200.0.32.2)] on darwin
Pandas version 1.1.4
                           mean       std
method                                   
zip + to_dict('list')  0.002353  0.000168
zip                    0.003381  0.000250
itertuples             0.007659  0.000728
to_dict('records')     0.025838  0.001458
agg                    0.066391  0.007044
apply                  0.067753  0.006997
iterrows               0.647215  0.019600
</code></pre>","
"
"
",<p>You can loop through the rows by transposing and then calling iteritems:</p>,"
","<pre><code>for date, row in df.T.iteritems():
   # do some logic here
</code></pre>","
","<p>I am not certain about efficiency in that case. To get the best possible performance in an iterative algorithm, you might want to explore writing it in <a href=""http://cython.org"">Cython</a>, so you could do something like:</p>","
","<pre><code>def my_algo(ndarray[object] dates, ndarray[float64_t] open,
            ndarray[float64_t] low, ndarray[float64_t] high,
            ndarray[float64_t] close, ndarray[float64_t] volume):
    cdef:
        Py_ssize_t i, n
        float64_t foo
    n = len(dates)

    for i from 0 &lt;= i &lt; n:
        foo = close[i] - open[i] # will be extremely fast
</code></pre>","
","<p>I would recommend writing the algorithm in pure Python first, make sure it works and see how fast it is-- if it's not fast enough, convert things to Cython like this with minimal work to get something that's about as fast as hand-coded C/C++.</p>","
"
"
",<p>You have three options:</p>,"
","<p>By <a href=""https://www.neural-networks.io/en/python/dataframes.php#iterate-over-rows-by-index"" rel=""noreferrer"">index</a> (simplest):</p>","
","<pre><code>&gt;&gt;&gt; for index in df.index:
...     print (""df["" + str(index) + ""]['B']="" + str(df['B'][index]))
</code></pre>","
","<p>With <a href=""https://www.neural-networks.io/en/python/dataframes.php#iterate-over-rows-with-iterrows"" rel=""noreferrer"">iterrows</a> (most used):</p>","
","<pre><code>&gt;&gt;&gt; for index, row in df.iterrows():
...     print (""df["" + str(index) + ""]['B']="" + str(row['B']))
</code></pre>","
","<p>With <a href=""https://www.neural-networks.io/en/python/dataframes.php#iterate-over-rows-with-itertuples"" rel=""noreferrer"">itertuples</a> (fastest):</p>","
","<pre><code>&gt;&gt;&gt; for row in df.itertuples():
...     print (""df["" + str(row.Index) + ""]['B']="" + str(row.B))
</code></pre>","
",<p>Three options display something like:</p>,"
","<pre><code>df[0]['B']=125
df[1]['B']=415
df[2]['B']=23
df[3]['B']=456
df[4]['B']=189
df[5]['B']=456
df[6]['B']=12
</code></pre>","
","<p>Source: <a href=""https://alphons.io/2101/what-is-the-most-efficient-way-to-loop-through-dataframes-with-pandas/"" rel=""noreferrer"">alphons.io</a></p>","
"
"
","<p>I checked out <code>iterrows</code> after noticing <a href=""https://stackoverflow.com/users/475872/nick-crawford"">Nick Crawford's</a> answer, but found that it yields (index, Series) tuples. Not sure which would work best for you, but I ended up using the <code>itertuples</code> method for my problem, which yields (index, row_value1...) tuples.</p>","
","<p>There's also <code>iterkv</code>, which iterates through (column, series) tuples.</p>","
"
"
","<p>Just as a small addition, you can also do an apply if you have a complex function that you apply to a single column:</p>","
","<p><a href=""http://pandas.pydata.org/pandas-docs/dev/generated/pandas.DataFrame.apply.html"">http://pandas.pydata.org/pandas-docs/dev/generated/pandas.DataFrame.apply.html</a></p>","
","<pre><code>df[b] = df[a].apply(lambda col: do stuff with col here)
</code></pre>","
"
"
","<p>As <a href=""https://stackoverflow.com/users/653364/joris"">@joris</a> pointed out, <code>iterrows</code> is much slower than <code>itertuples</code> and <code>itertuples</code> is approximately 100 times fater than <code>iterrows</code>, and I tested speed of both methods in a DataFrame with 5027505 records the result is for <code>iterrows</code>, it is 1200it/s, and  <code>itertuples</code> is 120000it/s.</p>","
","<p>If you use <code>itertuples</code>, note that every element in the for loop is a namedtuple, so to get the value in each column, you can refer to the following example code</p>","
","<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'col1': [1, 2], 'col2': [0.1, 0.2]},
                      index=['a', 'b'])
&gt;&gt;&gt; df
   col1  col2
a     1   0.1
b     2   0.2
&gt;&gt;&gt; for row in df.itertuples():
...     print(row.col1, row.col2)
...
1, 0.1
2, 0.2
</code></pre>","
"
"
","<p>For sure, the fastest way to iterate over a dataframe is to access the underlying numpy ndarray either via <code>df.values</code> (as you do) or by accessing each column separately <code>df.column_name.values</code>. Since you want to have access to the index too, you can use <code>df.index.values</code> for that.</p>","
","<pre><code>index = df.index.values
column_of_interest1 = df.column_name1.values
...
column_of_interestk = df.column_namek.values

for i in range(df.shape[0]):
   index_value = index[i]
   ...
   column_value_k = column_of_interest_k[i]
</code></pre>","
",<p>Not pythonic? Sure. But fast.</p>,"
","<p>If you want to squeeze more juice out of the loop you will want to look into <a href=""http://cython.org/"" rel=""noreferrer"">cython</a>. Cython will let you gain huge speedups (think 10x-100x). For maximum performance check <a href=""http://cython.readthedocs.io/en/latest/src/userguide/memoryviews.html"" rel=""noreferrer"">memory views for cython</a>.</p>","
"
"
",<p>Another suggestion would be to combine groupby with vectorized calculations if subsets of the rows shared characteristics which allowed you to do so. </p>,"
"
"
",<p>look at last one</p>,"
","<pre><code>t = pd.DataFrame({'a': range(0, 10000), 'b': range(10000, 20000)})
B = []
C = []
A = time.time()
for i,r in t.iterrows():
    C.append((r['a'], r['b']))
B.append(round(time.time()-A,5))

C = []
A = time.time()
for ir in t.itertuples():
    C.append((ir[1], ir[2]))    
B.append(round(time.time()-A,5))

C = []
A = time.time()
for r in zip(t['a'], t['b']):
    C.append((r[0], r[1]))
B.append(round(time.time()-A,5))

C = []
A = time.time()
for r in range(len(t)):
    C.append((t.loc[r, 'a'], t.loc[r, 'b']))
B.append(round(time.time()-A,5))

C = []
A = time.time()
[C.append((x,y)) for x,y in zip(t['a'], t['b'])]
B.append(round(time.time()-A,5))
B

0.46424
0.00505
0.00245
0.09879
0.00209
</code></pre>","
"
"
","<p>I believe the most simple and efficient way to loop through DataFrames is using numpy and numba.  In that case, looping can be approximately as fast as vectorized operations in many cases.  If numba is not an option, plain numpy is likely to be the next best option.  As has been noted many times, your default should be vectorization, but this answer merely considers efficient looping, given the decision to loop, for whatever reason.</p>","
","<p>For a test case, let's use the example from @DSM's answer of calculating a percentage change.  This is a very simple situation and as a practical matter you would not write a loop to calculate it, but as such it provides a reasonable baseline for timing vectorized approaches vs loops.</p>","
","<p>Let's set up the 4 approaches with a small DataFrame, and we'll time them on a larger dataset below.</p>","
","<pre><code>import pandas as pd
import numpy as np
import numba as nb

df = pd.DataFrame( { 'close':[100,105,95,105] } )

pandas_vectorized = df.close.pct_change()[1:]

x = df.close.to_numpy()
numpy_vectorized = ( x[1:] - x[:-1] ) / x[:-1]
        
def test_numpy(x):
    pct_chng = np.zeros(len(x))
    for i in range(1,len(x)):
        pct_chng[i] = ( x[i] - x[i-1] ) / x[i-1]
    return pct_chng

numpy_loop = test_numpy(df.close.to_numpy())[1:]

@nb.jit(nopython=True)
def test_numba(x):
    pct_chng = np.zeros(len(x))
    for i in range(1,len(x)):
        pct_chng[i] = ( x[i] - x[i-1] ) / x[i-1]
    return pct_chng
    
numba_loop = test_numba(df.close.to_numpy())[1:]
</code></pre>","
","<p>And here are the timings on a DataFrame with 100,000 rows (timings performed with Jupyter's <code>%timeit</code> function, collapsed to a summary table for readability):</p>","
","<pre><code>pandas/vectorized   1,130 micro-seconds
numpy/vectorized      382 micro-seconds
numpy/looped       72,800 micro-seconds
numba/looped          455 micro-seconds
</code></pre>","
","<p>Summary:  for simple cases, like this one, you would go with (vectorized) pandas for simplicity and readability, and (vectorized) numpy for speed.  If you really need to use a loop, do it in numpy.  If numba is available, combine it with numpy for additional speed.  In this case, numpy + numba is almost as fast as vectorized numpy code.</p>","
",<p>Other details:</p>,"
","<ul>
<li>Not shown are various options like iterrows, itertuples, etc. which are orders of magnitude slower and really should never be used.</li>
<li>The timings here are fairly typical: numpy is faster than pandas and vectorized is faster than loops, but adding numba to numpy will often speed numpy up dramatically.</li>
<li>Everything except the pandas option requires converting the DataFrame column to a numpy array.  That conversion is included in the timings.</li>
<li>The time to define/compile the numpy/numba functions was not included in the timings, but would generally be a negligible component of the timing for any large dataframe.</li>
</ul>","
"
"
","<p>I am trying to make a scatter plot and annotate data points with different numbers from a list.
So, for example, I want to plot <code>y</code> vs <code>x</code> and annotate with corresponding numbers from <code>n</code>.</p>","
","<pre><code>y = [2.56422, 3.77284, 3.52623, 3.51468, 3.02199]
z = [0.15, 0.3, 0.45, 0.6, 0.75]
n = [58, 651, 393, 203, 123]
ax = fig.add_subplot(111)
ax1.scatter(z, y, fmt='o')
</code></pre>","
",<p>Any ideas?</p>,"
"
"
",<p>I'm not aware of any plotting method which takes arrays or lists but you could use <code>annotate()</code> while iterating over the values in <code>n</code>.</p>,"
","<pre><code>y = [2.56422, 3.77284, 3.52623, 3.51468, 3.02199]
z = [0.15, 0.3, 0.45, 0.6, 0.75]
n = [58, 651, 393, 203, 123]

fig, ax = plt.subplots()
ax.scatter(z, y)

for i, txt in enumerate(n):
    ax.annotate(txt, (z[i], y[i]))
</code></pre>","
","<p>There are a lot of formatting options for <code>annotate()</code>, see the <a href=""https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.annotate.html"" rel=""noreferrer"">matplotlib website:</a></p>","
","<p><img alt=""enter image description here"" src=""https://i.stack.imgur.com/6g4Et.png""/></p>","
"
"
","<p>In case anyone is trying to apply the above solutions to a .scatter() instead of a .subplot(),   </p>","
",<p>I tried running the following code</p>,"
","<pre><code>y = [2.56422, 3.77284, 3.52623, 3.51468, 3.02199]
z = [0.15, 0.3, 0.45, 0.6, 0.75]
n = [58, 651, 393, 203, 123]

fig, ax = plt.scatter(z, y)

for i, txt in enumerate(n):
    ax.annotate(txt, (z[i], y[i]))
</code></pre>","
","<p>But ran into errors stating ""cannot unpack non-iterable PathCollection object"", with the error specifically pointing at codeline fig, ax = plt.scatter(z, y)</p>","
",<p>I eventually solved the error using the following code</p>,"
","<pre><code>plt.scatter(z, y)

for i, txt in enumerate(n):
    plt.annotate(txt, (z[i], y[i]))
</code></pre>","
","<p>I didn't expect there to be a difference between .scatter() and .subplot()
I should have known better. </p>","
"
"
","<p>In versions earlier than matplotlib 2.0, <code>ax.scatter</code> is not necessary to plot text without markers. In version 2.0 you'll need <code>ax.scatter</code> to set the proper range and markers for text.</p>","
","<pre><code>y = [2.56422, 3.77284, 3.52623, 3.51468, 3.02199]
z = [0.15, 0.3, 0.45, 0.6, 0.75]
n = [58, 651, 393, 203, 123]

fig, ax = plt.subplots()

for i, txt in enumerate(n):
    ax.annotate(txt, (z[i], y[i]))
</code></pre>","
","<p>And in this <a href=""http://matplotlib.org/examples/mplot3d/text3d_demo.html"" rel=""noreferrer"">link</a> you can find an example in 3d.</p>","
"
"
","<p>You may also use <code>pyplot.text</code> (see <a href=""https://matplotlib.org/api/_as_gen/matplotlib.pyplot.text.html"" rel=""noreferrer"">here</a>).</p>","
","<pre><code>def plot_embeddings(M_reduced, word2Ind, words):
    """""" 
        Plot in a scatterplot the embeddings of the words specified in the list ""words"".
        Include a label next to each point.
    """"""
    for word in words:
        x, y = M_reduced[word2Ind[word]]
        plt.scatter(x, y, marker='x', color='red')
        plt.text(x+.03, y+.03, word, fontsize=9)
    plt.show()

M_reduced_plot_test = np.array([[1, 1], [-1, -1], [1, -1], [-1, 1], [0, 0]])
word2Ind_plot_test = {'test1': 0, 'test2': 1, 'test3': 2, 'test4': 3, 'test5': 4}
words = ['test1', 'test2', 'test3', 'test4', 'test5']
plot_embeddings(M_reduced_plot_test, word2Ind_plot_test, words)
</code></pre>","
","<p><a href=""https://i.stack.imgur.com/2WD5m.png"" rel=""noreferrer""><img alt=""enter image description here"" src=""https://i.stack.imgur.com/2WD5m.png""/></a></p>","
"
"
",<p>I would love to add that you can even use arrows /text boxes to annotate the labels. Here is what I mean:</p>,"
","<pre><code>import random
import matplotlib.pyplot as plt


y = [2.56422, 3.77284, 3.52623, 3.51468, 3.02199]
z = [0.15, 0.3, 0.45, 0.6, 0.75]
n = [58, 651, 393, 203, 123]

fig, ax = plt.subplots()
ax.scatter(z, y)

ax.annotate(n[0], (z[0], y[0]), xytext=(z[0]+0.05, y[0]+0.3), 
    arrowprops=dict(facecolor='red', shrink=0.05))

ax.annotate(n[1], (z[1], y[1]), xytext=(z[1]-0.05, y[1]-0.3), 
    arrowprops = dict(  arrowstyle=""-&gt;"",
                        connectionstyle=""angle3,angleA=0,angleB=-90""))

ax.annotate(n[2], (z[2], y[2]), xytext=(z[2]-0.05, y[2]-0.3), 
    arrowprops = dict(arrowstyle=""wedge,tail_width=0.5"", alpha=0.1))

ax.annotate(n[3], (z[3], y[3]), xytext=(z[3]+0.05, y[3]-0.2), 
    arrowprops = dict(arrowstyle=""fancy""))

ax.annotate(n[4], (z[4], y[4]), xytext=(z[4]-0.1, y[4]-0.2),
    bbox=dict(boxstyle=""round"", alpha=0.1), 
    arrowprops = dict(arrowstyle=""simple""))

plt.show()
</code></pre>","
","<p>Which will generate the following graph:
<a href=""https://i.stack.imgur.com/IM6fl.png"" rel=""noreferrer""><img alt=""enter image description here"" src=""https://i.stack.imgur.com/IM6fl.png""/></a></p>","
"
"
",<p>For limited set of values matplotlib is fine. But when you have lots of values the tooltip starts to overlap over other data points. But with limited space you can't ignore the values. Hence it's better to zoom out or zoom in.</p>,"
",<p>Using plotly</p>,"
","<pre><code>import plotly.express as px
df = px.data.tips()

df = px.data.gapminder().query(""year==2007 and continent=='Americas'"")


fig = px.scatter(df, x=""gdpPercap"", y=""lifeExp"", text=""country"", log_x=True, size_max=100, color=""lifeExp"")
fig.update_traces(textposition='top center')
fig.update_layout(title_text='Life Expectency', title_x=0.5)
fig.show()
</code></pre>","
","<p><a href=""https://i.stack.imgur.com/qRTv0.gif"" rel=""noreferrer""><img alt=""enter image description here"" src=""https://i.stack.imgur.com/qRTv0.gif""/></a></p>","
"
"
",<p>Python 3.6+:</p>,"
","<pre><code>coordinates = [('a',1,2), ('b',3,4), ('c',5,6)]
for x in coordinates: plt.annotate(x[0], (x[1], x[2]))
</code></pre>","
"
"
",<p>As a one liner using list comprehension and numpy: </p>,"
","<p><code>[ax.annotate(x[0], (x[1], x[2])) for x in np.array([n,z,y]).T]</code></p>","
",<p>setup is ditto to Rutger's answer.</p>,"
"
"
","<p>This might be useful when you need individually annotate in different time (I mean, not in a single for loop)</p>","
","<pre><code>ax = plt.gca()
ax.annotate('your_lable', (x,y)) 
</code></pre>","
",<p>where <code>x</code> and <code>y</code> are the your <em>target coordinate</em> and type is float/int.</p>,"
"
"
",<p>I have a small python project that has the following structure - </p>,"
","<pre><code>Project 
 -- pkg01
   -- test01.py
 -- pkg02
   -- test02.py
 -- logging.conf
</code></pre>","
","<p>I plan to use the default logging module to print messages to stdout and a log file.
To use the logging module, some initialization is required - </p>","
","<pre><code>import logging.config

logging.config.fileConfig('logging.conf')
logger = logging.getLogger('pyApp')

logger.info('testing')
</code></pre>","
","<p>At present, I perform this initialization in every module before I start logging messages. Is it possible to perform this initialization only once in one place such that the same settings are reused by logging all over the project?</p>","
"
"
","<p>Best practice is, in each module, to have a logger defined like this:</p>","
","<pre><code>import logging
logger = logging.getLogger(__name__)
</code></pre>","
","<p>near the top of the module, and then in other code in the module do e.g.</p>","
","<pre><code>logger.debug('My message with %s', 'variable data')
</code></pre>","
","<p>If you need to subdivide logging activity inside a module, use e.g.</p>","
","<pre><code>loggerA = logging.getLogger(__name__ + '.A')
loggerB = logging.getLogger(__name__ + '.B')
</code></pre>","
",<p>and log to <code>loggerA</code> and <code>loggerB</code> as appropriate.</p>,"
","<p>In your main program or programs, do e.g.:</p>","
","<pre><code>def main():
    ""your program code""

if __name__ == '__main__':
    import logging.config
    logging.config.fileConfig('/path/to/logging.conf')
    main()
</code></pre>","
",<p>or </p>,"
","<pre><code>def main():
    import logging.config
    logging.config.fileConfig('/path/to/logging.conf')
    # your program code

if __name__ == '__main__':
    main()
</code></pre>","
","<p>See <a href=""http://docs.python.org/howto/logging.html#logging-from-multiple-modules"">here</a> for logging from multiple modules, and <a href=""http://docs.python.org/howto/logging.html#configuring-logging-for-a-library"">here</a> for logging configuration for code which will be used as a library module by other code.</p>","
","<p><strong>Update:</strong> When calling <code>fileConfig()</code>, you may want to specify <code>disable_existing_loggers=False</code> if you're using Python 2.6 or later (see <a href=""http://docs.python.org/2/library/logging.config.html#logging.config.fileConfig"">the docs</a> for more information). The default value is <code>True</code> for backward compatibility, which causes all existing loggers to be disabled by <code>fileConfig()</code> unless they or their ancestor are explicitly named in the configuration. With the value set to <code>False</code>, existing loggers are left alone. If using Python 2.7/Python 3.2 or later, you may wish to consider the <code>dictConfig()</code> API which is better than <code>fileConfig()</code> as it gives more control over the configuration.</p>","
"
"
","<p>Actually every logger is a child of the parent's package logger (i.e. <code>package.subpackage.module</code> inherits configuration from <code>package.subpackage)</code>, so all you need to do is just to configure the root logger. This can be achieved by <a href=""https://docs.python.org/3/library/logging.config.html#logging.config.fileConfig"" rel=""noreferrer""><code>logging.config.fileConfig</code></a> (your own config for loggers) or <a href=""https://docs.python.org/3/library/logging.html#logging.basicConfig"" rel=""noreferrer""><code>logging.basicConfig</code></a> (sets the root logger). Setup logging in your entry module (<code>__main__.py</code> or whatever you want to run, for example <code>main_script.py</code>. <code>__init__.py</code> works as well)</p>","
",<p>using basicConfig:</p>,"
","<pre><code># package/__main__.py
import logging
import sys

logging.basicConfig(stream=sys.stdout, level=logging.INFO)
</code></pre>","
",<p>using fileConfig:</p>,"
","<pre><code># package/__main__.py
import logging
import logging.config

logging.config.fileConfig('logging.conf')
</code></pre>","
",<p>and then create every logger using:</p>,"
","<pre><code># package/submodule.py
# or
# package/subpackage/submodule.py
import logging
log = logging.getLogger(__name__)

log.info(""Hello logging!"")
</code></pre>","
","<p>For more information see <a href=""https://docs.python.org/3/howto/logging.html#advanced-logging-tutorial"" rel=""noreferrer"">Advanced Logging Tutorial</a>.</p>","
"
"
",<p>A simple way of using one instance of logging library in multiple modules for me was following solution:</p>,"
",<h3>base_logger.py</h3>,"
","<pre><code>import logging

logger = logging
logger.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)
</code></pre>","
",<h3>Other files</h3>,"
","<pre><code>from base_logger import logger

if __name__ == '__main__':
    logger.info(""This is an info message"")
</code></pre>","
"
"
",<p>I always do it as below.</p>,"
",<p>Use a single python file to config my log as singleton pattern which named '<code>log_conf.py</code>'</p>,"
","<pre><code>#-*-coding:utf-8-*-

import logging.config

def singleton(cls):
    instances = {}
    def get_instance():
        if cls not in instances:
            instances[cls] = cls()
        return instances[cls]
    return get_instance()

@singleton
class Logger():
    def __init__(self):
        logging.config.fileConfig('logging.conf')
        self.logr = logging.getLogger('root')
</code></pre>","
","<p>In another module, just import the config.</p>","
","<pre><code>from log_conf import Logger

Logger.logr.info(""Hello World"")
</code></pre>","
","<p>This is a singleton pattern to log, simply and efficiently.</p>","
"
"
",<p>Throwing in another solution. </p>,"
",<p>In my module's <strong>init</strong>.py I have something like:</p>,"
","<pre><code># mymodule/__init__.py
import logging

def get_module_logger(mod_name):
  logger = logging.getLogger(mod_name)
  handler = logging.StreamHandler()
  formatter = logging.Formatter(
        '%(asctime)s %(name)-12s %(levelname)-8s %(message)s')
  handler.setFormatter(formatter)
  logger.addHandler(handler)
  logger.setLevel(logging.DEBUG)
  return logger
</code></pre>","
","<p>Then in each module I need a logger, I do:</p>","
","<pre><code># mymodule/foo.py
from [modname] import get_module_logger
logger = get_module_logger(__name__)
</code></pre>","
","<p>When the logs are missed, you can differentiate their source by the module they came from. </p>","
"
"
",<p>Several of these answers suggest that at the top of a module you you do </p>,"
","<pre><code>import logging
logger = logging.getLogger(__name__)
</code></pre>","
",<p>It is my understanding that this is considered <strong>very bad practice</strong>. The reason is that the file config will disable all existing loggers by default. E.g.</p>,"
","<pre><code>#my_module
import logging

logger = logging.getLogger(__name__)

def foo():
    logger.info('Hi, foo')

class Bar(object):
    def bar(self):
        logger.info('Hi, bar')
</code></pre>","
",<p>And in your main module :</p>,"
","<pre><code>#main
import logging

# load my module - this now configures the logger
import my_module

# This will now disable the logger in my module by default, [see the docs][1] 
logging.config.fileConfig('logging.ini')

my_module.foo()
bar = my_module.Bar()
bar.bar()
</code></pre>","
","<p>Now the log specified in logging.ini will be empty, as the existing logger was disabled by fileconfig call.</p>","
","<p>While is is certainly possible to get around this (disable_existing_Loggers=False), realistically many clients of your library will not know about this behavior, and will not receive your logs. Make it easy for your clients by always calling logging.getLogger locally. Hat Tip : I learned about this behavior from <a href=""http://victorlin.me/posts/2012/08/26/good-logging-practice-in-python"" rel=""noreferrer"">Victor Lin's Website</a>.</p>","
",<p>So good practice is instead to always call logging.getLogger locally. E.g.</p>,"
","<pre><code>#my_module
import logging

logger = logging.getLogger(__name__)

def foo():
    logging.getLogger(__name__).info('Hi, foo')

class Bar(object):
    def bar(self):
        logging.getLogger(__name__).info('Hi, bar')    
</code></pre>","
","<p>Also, if you use fileconfig in your main, set disable_existing_loggers=False, just in case your library designers use module level logger instances.</p>","
"
"
",<p>You could also come up with something like this!</p>,"
","<pre><code>def get_logger(name=None):
    default = ""__app__""
    formatter = logging.Formatter('%(levelname)s: %(asctime)s %(funcName)s(%(lineno)d) -- %(message)s',
                              datefmt='%Y-%m-%d %H:%M:%S')
    log_map = {""__app__"": ""app.log"", ""__basic_log__"": ""file1.log"", ""__advance_log__"": ""file2.log""}
    if name:
        logger = logging.getLogger(name)
    else:
        logger = logging.getLogger(default)
    fh = logging.FileHandler(log_map[name])
    fh.setFormatter(formatter)
    logger.addHandler(fh)
    logger.setLevel(logging.DEBUG)
    return logger
</code></pre>","
",<p>Now you could use multiple loggers in same module and across whole project if the above is defined in a separate module and imported in other modules were logging is required.</p>,"
","<pre><code>a=get_logger(""__app___"")
b=get_logger(""__basic_log__"")
a.info(""Starting logging!"")
b.debug(""Debug Mode"")
</code></pre>","
"
"
",<p>@Yarkee's solution seemed better. I would like to add somemore to it -</p>,"
","<pre><code>class Singleton(type):
    _instances = {}

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances.keys():
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class LoggerManager(object):
    __metaclass__ = Singleton

    _loggers = {}

    def __init__(self, *args, **kwargs):
        pass

    @staticmethod
    def getLogger(name=None):
        if not name:
            logging.basicConfig()
            return logging.getLogger()
        elif name not in LoggerManager._loggers.keys():
            logging.basicConfig()
            LoggerManager._loggers[name] = logging.getLogger(str(name))
        return LoggerManager._loggers[name]    


log=LoggerManager().getLogger(""Hello"")
log.setLevel(level=logging.DEBUG)
</code></pre>","
","<p>So LoggerManager can be a pluggable to the entire application.
Hope it makes sense and value.</p>","
"
"
","<p>There are several answers. i ended up with a similar yet different solution that makes sense to me, maybe it will make sense to you as well.
My main objective was to be able to pass logs to handlers by their level (debug level logs to the console, warnings and above to files):</p>","
","<pre><code>from flask import Flask
import logging
from logging.handlers import RotatingFileHandler

app = Flask(__name__)

# make default logger output everything to the console
logging.basicConfig(level=logging.DEBUG)

rotating_file_handler = RotatingFileHandler(filename=""logs.log"")
rotating_file_handler.setLevel(logging.INFO)

app.logger.addHandler(rotating_file_handler)
</code></pre>","
",<p>created a nice util file named logger.py:</p>,"
","<pre><code>import logging

def get_logger(name):
    return logging.getLogger(""flask.app."" + name)
</code></pre>","
",<p><em>the flask.app is a hardcoded value in flask. the application logger is always starting with flask.app as its the module's name.</em></p>,"
","<p>now, in each module, i'm able to use it in the following mode:</p>","
","<pre><code>from logger import get_logger
logger = get_logger(__name__)

logger.info(""new log"")
</code></pre>","
","<p>This will create a new log for ""app.flask.MODULE_NAME"" with minimum effort.</p>","
"
"
",<p>The best practice would be to create a module separately which has only one method whose task we be to give a logger handler to the the calling method. Save this file as m_logger.py</p>,"
","<pre><code>import logger, logging

def getlogger():
    # logger
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    # create console handler and set level to debug
    #ch = logging.StreamHandler()
    ch = logging.FileHandler(r'log.txt')
    ch.setLevel(logging.DEBUG)
    # create formatter
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    # add formatter to ch
    ch.setFormatter(formatter)
    # add ch to logger
    logger.addHandler(ch)
    return logger
</code></pre>","
",<p>Now call the getlogger() method whenever logger handler is needed.</p>,"
","<pre><code>from m_logger import getlogger
logger = getlogger()
logger.info('My mssg')
</code></pre>","
"
"
","<p>I would like to add my solution (which is based on <a href=""https://docs.python.org/3/howto/logging-cookbook.html#using-logging-in-multiple-modules"" rel=""nofollow noreferrer"">logging cookbook</a> and other articles and suggestions from this thread. However it took me quite a while to figure out, why it wasn't immediately working how I expected. So I created a little test project to learn how logging is working.</p>","
","<p>Since I have figured it out, I wanted to share my solution, maybe it can be of help to someone.</p>","
","<p>I know some of my code might not be best practice, but I am still learning. I left the <code>print()</code> functions in there, as I used them, while logging was not working as expected. Those are removed in my other application. Also I welcome any feedback on any parts of the code or structure.</p>","
",<p><strong>my_log_test project structure</strong> (cloned/simplified from another project I work on)</p>,"
","<pre><code>my_log_test
â”œâ”€â”€ __init__.py
â”œâ”€â”€ __main__.py
â”œâ”€â”€ daemon.py
â”œâ”€â”€ common
â”‚Â Â  â”œâ”€â”€ my_logger.py
â”œâ”€â”€ pkg1
â”‚Â Â  â”œâ”€â”€ __init__.py
â”‚Â Â  â””â”€â”€ mod1.py
â””â”€â”€ pkg2
    â”œâ”€â”€ __init__.py
    â””â”€â”€ mod2.py
</code></pre>","
",<p><strong>Requirements</strong></p>,"
",<p>A few things different or that I have not seen explicitly mentioned in the combination I use:</p>,"
","<ul>
<li>the main module is <code>daemon.py</code>which is called by <code>__main__.py</code></li>
<li>I want to be able to call the modules <code>mod1.py</code> and <code>mod2.py</code> seperately while in development/testing</li>
<li>At this point I did not want to use <code>basicConfig()</code> or <code>FileConfig()</code> but keep it like in the <strong>logging cookbook</strong></li>
</ul>","
","<p>So basically, that means, I need to initialize the <strong>root</strong> logger in <code>daemon.py</code> (always) and in the modules <code>mod1.py</code> and <code>mod2.py</code> (only when calling them directly).</p>","
","<p>To make this init in several modules easier, I created <code>my_logger.py</code> which does, what is described in the cookbook.</p>","
",<p><strong>My mistakes</strong></p>,"
","<p>Beforehand, my mistake in that module was to init the logger with <code>logger = logging.getLogger(__name__)</code> (module logger)  instead of using <code>logger = logging.getLogger()</code> (to get the <strong>root</strong> logger).</p>","
","<p>The first problem was, that when called from <code>daemon.py</code> the logger's namespace was set to <code>my_log_test.common.my_logger</code>. The module logger in <code>mod1.py</code> with an ""unmatching"" namespace <code>my_log_test.pkg1.mod1</code> could hence not attach to the other logger and I would see no log output from mod1.</p>","
","<p>The second ""problem"" was, that my main program is in <code>daemon.py</code> and not in <code>__main__.py</code>. But after all not a real problem for me, but it added to the namespace confusion.</p>","
",<p><strong>Working solution</strong></p>,"
","<p>This is from the cookbook but in a separate module. I also added a <code>logger_cleanup</code> function that I can call from daemon, to remove logs older than x days.</p>","
","<pre><code>## my_logger.py
from datetime import datetime
import time
import os

## Init logging start 
import logging
import logging.handlers

def logger_init():
    print(""print in my_logger.logger_init()"")
    print(""print my_logger.py __name__: "" +__name__)
    path = ""log/""
    filename = ""my_log_test.log""

    ## get logger
    #logger = logging.getLogger(__name__) ## this was my mistake, to init a module logger here
    logger = logging.getLogger() ## root logger
    logger.setLevel(logging.INFO)

    # File handler
    logfilename = datetime.now().strftime(""%Y%m%d_%H%M%S"") + f""_{filename}""
    file = logging.handlers.TimedRotatingFileHandler(f""{path}{logfilename}"", when=""midnight"", interval=1)
    #fileformat = logging.Formatter(""%(asctime)s [%(levelname)s] %(message)s"")
    fileformat = logging.Formatter(""%(asctime)s [%(levelname)s]: %(name)s: %(message)s"")
    file.setLevel(logging.INFO)
    file.setFormatter(fileformat)

    # Stream handler
    stream = logging.StreamHandler()
    #streamformat = logging.Formatter(""%(asctime)s [%(levelname)s:%(module)s] %(message)s"")
    streamformat = logging.Formatter(""%(asctime)s [%(levelname)s]: %(name)s: %(message)s"")
    stream.setLevel(logging.INFO)
    stream.setFormatter(streamformat)

    # Adding all handlers to the logs
    logger.addHandler(file)
    logger.addHandler(stream)


def logger_cleanup(path, days_to_keep):
    lclogger = logging.getLogger(__name__)
    logpath = f""{path}""
    now = time.time()
    for filename in os.listdir(logpath):
        filestamp = os.stat(os.path.join(logpath, filename)).st_mtime
        filecompare = now - days_to_keep * 86400
        if  filestamp &lt; filecompare:
            lclogger.info(""Delete old log "" + filename)
            try:
                os.remove(os.path.join(logpath, filename))
            except Exception as e:
                lclogger.exception(e)
                continue
</code></pre>","
",<p>to run deamon.py (through <code>__main__.py</code>) use <code>python3 -m my_log_test</code></p>,"
","<pre><code>## __main__.py
from  my_log_test import daemon

if __name__ == '__main__':
    print(""print in __main__.py"")
    daemon.run()
</code></pre>","
",<p>to run deamon.py (directly) use <code>python3 -m my_log_test.daemon</code></p>,"
","<pre><code>## daemon.py
from datetime import datetime
import time
import logging
import my_log_test.pkg1.mod1 as mod1
import my_log_test.pkg2.mod2 as mod2

## init ROOT logger from my_logger.logger_init()
from my_log_test.common.my_logger import logger_init
logger_init() ## init root logger
logger = logging.getLogger(__name__) ## module logger

def run():
    print(""print in daemon.run()"")
    print(""print daemon.py __name__: "" +__name__)
    logger.info(""Start daemon"")
    loop_count = 1
    while True:
        logger.info(f""loop_count: {loop_count}"")
        logger.info(""do stuff from pkg1"")
        mod1.do1()
        logger.info(""finished stuff from pkg1"")

        logger.info(""do stuff from pkg2"")
        mod2.do2()
        logger.info(""finished stuff from pkg2"")

        logger.info(""Waiting a bit..."")
        time.sleep(30)


if __name__ == '__main__':
    try:
        print(""print in daemon.py if __name__ == '__main__'"")
        logger.info(""running daemon.py as main"")
        run()
    except KeyboardInterrupt as e:
        logger.info(""Program aborted by user"")
    except Exception as e:
        logger.info(e)
</code></pre>","
",<p>To run mod1.py (directly) use <code>python3 -m my_log_test.pkg1.mod1</code></p>,"
","<pre><code>## mod1.py
import logging
# mod1_logger = logging.getLogger(__name__)
mod1_logger = logging.getLogger(""my_log_test.daemon.pkg1.mod1"") ## for testing, namespace set manually

def do1():
    print(""print in mod1.do1()"")
    print(""print mod1.py __name__: "" +__name__)
    mod1_logger.info(""Doing someting in pkg1.do1()"")

if __name__ == '__main__':
    ## Also enable this pkg to be run directly while in development with
    ## python3 -m my_log_test.pkg1.mod1

    ## init root logger
    from my_log_test.common.my_logger import logger_init
    logger_init() ## init root logger

    print(""print in mod1.py if __name__ == '__main__'"")
    mod1_logger.info(""Running mod1.py as main"")
    do1()
</code></pre>","
",<p>To run mod2.py (directly) use <code>python3 -m my_log_test.pkg2.mod2</code></p>,"
","<pre><code>## mod2.py
import logging
logger = logging.getLogger(__name__)

def do2():
    print(""print in pkg2.do2()"")
    print(""print mod2.py __name__: "" +__name__) # setting namespace through __name__
    logger.info(""Doing someting in pkg2.do2()"")

if __name__ == '__main__':
    ## Also enable this pkg to be run directly while in development with
    ## python3 -m my_log_test.pkg2.mod2

    ## init root logger
    from my_log_test.common.my_logger import logger_init
    logger_init() ## init root logger

    print(""print in mod2.py if __name__ == '__main__'"")
    logger.info(""Running mod2.py as main"")
    do2()
</code></pre>","
",<p>Happy if it helps. Happy to receive feedback as well!</p>,"
"
"
","<p>New to python so I don't know if this is advisable, but it works great for not re-writing boilerplate.</p>","
",<p>Your project must have an <strong>init</strong>.py so it can be loaded as a module</p>,"
","<pre class=""lang-py prettyprint-override""><code># Put this in your module's __init__.py
import logging.config
import sys

# I used this dictionary test, you would put:
# logging.config.fileConfig('logging.conf')
# The """" entry in loggers is the root logger, tutorials always 
# use ""root"" but I can't get that to work
logging.config.dictConfig({
    ""version"": 1,
    ""formatters"": {
        ""default"": {
            ""format"": ""%(asctime)s %(levelname)s %(name)s %(message)s""
        },
    },
    ""handlers"": {
        ""console"": {
            ""level"": 'DEBUG',
            ""class"": ""logging.StreamHandler"",
            ""stream"": ""ext://sys.stdout""
        }
    },
    ""loggers"": {
        """": {
            ""level"": ""DEBUG"",
            ""handlers"": [""console""]
        }
    }
})

def logger():
    # Get the name from the caller of this function
    return logging.getLogger(sys._getframe(1).f_globals['__name__'])
</code></pre>","
","<p><code>sys._getframe(1)</code> suggestion comes from <a href=""https://stackoverflow.com/questions/1095543/get-name-of-calling-functions-module-in-python#comment53770224_5071539"">here</a></p>","
",<p>Then to use your logger in any other file:</p>,"
","<pre class=""lang-py prettyprint-override""><code>from [your module name here] import logger

logger().debug(""FOOOOOOOOO!!!"")
</code></pre>","
",<p>Caveats:</p>,"
","<ol>
<li>You must run your files as modules, otherwise <code>import [your module]</code> won't work:

<ul>
<li><code>python -m [your module name].[your filename without .py]</code></li>
</ul></li>
<li>The name of the logger for the entry point of your program will be <code>__main__</code>, but any solution using <code>__name__</code> will have that issue.</li>
</ol>","
"
"
",<p>I can't get past the error:</p>,"
","<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File ""C:\Users\Dom\Desktop\test\test.py"", line 7, in &lt;module&gt;
    p = Pump.getPumps()
TypeError: getPumps() missing 1 required positional argument: 'self'
</code></pre>","
",<p>I examined several tutorials but there doesn't seem to be anything different from my code. The only thing I can think of is that Python 3.3 requires different syntax.</p>,"
","<pre><code>class Pump:

    def __init__(self):
        print(""init"") # never prints

    def getPumps(self):
        # Open database connection
        # some stuff here that never gets executed because of error
        pass  # dummy code

p = Pump.getPumps()

print(p)
</code></pre>","
","<p>If I understand correctly, <code>self</code> is passed to the constructor and methods automatically. What am I doing wrong here?</p>","
"
"
",<p>You need to instantiate a class instance here.</p>,"
",<p>Use</p>,"
","<pre><code>p = Pump()
p.getPumps()
</code></pre>","
",<p>Small example - </p>,"
","<pre><code>&gt;&gt;&gt; class TestClass:
        def __init__(self):
            print(""in init"")
        def testFunc(self):
            print(""in Test Func"")


&gt;&gt;&gt; testInstance = TestClass()
in init
&gt;&gt;&gt; testInstance.testFunc()
in Test Func
</code></pre>","
"
"
",<p>You need to initialize it first:</p>,"
","<pre><code>p = Pump().getPumps()
</code></pre>","
"
"
",<p>Works and is simpler than every other solution I see here :</p>,"
","<pre><code>Pump().getPumps()
</code></pre>","
",<p>This is great if you don't need to reuse a class instance. Tested on Python 3.7.3.</p>,"
"
"
",<p>The <code>self</code> keyword in Python is analogous to <code>this</code> keyword in C++ / Java / C#.</p>,"
","<p>In Python 2 it is done implicitly by the compiler (yes Python does compilation internally).
It's just that in Python 3 you need to mention it <strong>explicitly</strong> in the constructor and member functions. example:</p>","
","<pre class=""lang-py prettyprint-override""><code>class Pump():
    # member variable
    # account_holder
    # balance_amount

    # constructor
    def __init__(self,ah,bal):
        self.account_holder = ah
        self.balance_amount = bal

    def getPumps(self):
        print(""The details of your account are:""+self.account_number + self.balance_amount)

# object = class(*passing values to constructor*)
p = Pump(""Tahir"",12000)
p.getPumps()
</code></pre>","
"
"
",<p>You can also get this error by prematurely taking PyCharm's advice to annotate a method @staticmethod.  Remove the annotation.</p>,"
"
"
","<p>You can call the method like <code>pump.getPumps()</code>. By adding <code>@classmethod</code> decorator on the method. A class method receives the class as the implicit first argument, just like an instance method receives the instance.</p>","
","<pre><code>class Pump:

def __init__(self):
    print (""init"") # never prints

@classmethod
def getPumps(cls):
            # Open database connection
            # some stuff here that never gets executed because of error
</code></pre>","
","<p>So, simply call <code>Pump.getPumps()</code> .</p>","
","<p>In java, it is termed as <code>static</code> method.</p>","
"
"
","<p>I am trying to <code>import Tkinter</code>. However, I get an error stating that <code>Tkinter</code> has not been installed:</p>","
","<pre class=""lang-py prettyprint-override""><code>ImportError: No module named _tkinter, please install the python-tk package
</code></pre>","
","<p>I could probably install it using synaptic manager (can I?), however, I would have to install it on every machine I program on. Would it be possible to add the Tkinter library into my workspace and reference it from there?</p>","
"
"
","<p>It is not very easy to install Tkinter locally to use with system-provided Python. You may build it from sources, but this is usually not the best idea with a binary package-based distro you're apparently running.</p>","
","<p>It's safer to <code>apt-get install python-tk</code> on your machine(s).
(Works on Debian-derived distributions like for Ubuntu; refer to your package manager and package list on other distributions.)</p>","
"
"
","<p>Actually, you just need to use the following to install the tkinter for python3:</p>","
","<pre><code>sudo apt-get install python3-tk
</code></pre>","
","<p>In addition, for Fedora users, use the following command:</p>","
","<pre><code>sudo dnf install python3-tkinter
</code></pre>","
"
"
","<p>If, like me, you don't have root privileges on your network because of your wonderful friends in I.S., and you are working in a local install you may have some problems with the above approaches.</p>","
","<p>I spent ages on Google - but in the end, it's easy. </p>","
","<p>Download the tcl and tk from <a href=""http://www.tcl.tk/software/tcltk/download.html"" rel=""noreferrer"">http://www.tcl.tk/software/tcltk/download.html</a> and install them locally too. </p>","
","<p>To install locally on Linux (I did it to my home directory), extract the .tar.gz files for tcl and tk.  Then open up the readme files inside the ./unix directory.  I ran</p>","
","<pre><code>cd ~/tcl8.5.11/unix
./configure --prefix=/home/cnel711 --exec-prefix=/home/cnel711
make
make install

cd ~/tk8.5.11/unix
./configure --prefix=/home/cnel711 --exec-prefix=/home/cnel711 --with-tcl=/home/cnel711/tcl8.5.11/unix
make
make install
</code></pre>","
","<p>It may seem a pain, but the files are tiny and installation is very fast.</p>","
",<p>Then re-run <code>python setup.py build</code> and <code>python setup.py install</code> in your python installation directory - and it should work. It worked for me - and I can now import Tkinter etc to my heart's content - yipidy-yay. An entire afternoon spent on this - hope this note saves others from the pain.</p>,"
"
"
",<p>If you are using Python 3 it might be because you are typing <code>Tkinter</code> not <code>tkinter</code></p>,"
"
"
","<p>For Arch Linux users, it goes a bit like</p>","
","<pre><code>sudo pacman -S tk
</code></pre>","
"
"
",<p>you will need the package and its dependencies.</p>,"
","<p>since you mentioned synaptic, you must be using a Debian based system.  one way to get what you need:</p>","
","<pre><code>sudo apt-get install python-tk
</code></pre>","
"
"
",<p>For Python 2.7:</p>,"
","<p>As it says <a href=""http://ftp.ntua.gr/mirror/python/topics/tkinter/download.html"" rel=""nofollow noreferrer"">here</a>,</p>","
","<blockquote>
<p>You don't need to download <code>Tkinter</code> - it's an integral part of all Python distributions (except binary distributions for platforms that don't support Tcl/Tk).</p>
</blockquote>","
","<p>In my case, on Windows, what helped was reinstalling the Python distribution. A long time ago, I had unchecked the ""Tcl/Tk"" installation feature. After reinstalling, all works fine and I can <code>import _tkinter</code> and <code>import Tkinter</code>.</p>","
"
"
","<p>If you're using RHEL, CentOS, Oracle Linux, etc. You can use yum to install tkinter module</p>","
","<pre><code>yum install tkinter
</code></pre>","
"
"
","<p>for python3 user, install python3-tk package by following command
<code>
sudo apt-get install python3-tk
</code> </p>","
"
"
",<p>tk-devel also needs to be installed in my case</p>,"
","<blockquote>
<p>yum install -y tkinter tk-devel</p>
</blockquote>","
",<p>install these and rebuild python</p>,"
"
"
",<p>For python 3.7 on ubuntu I had to use <code>sudo apt-get install python3.7-tk</code> to make it work</p>,"
"
"
",<p>Fedora release 25 (Twenty Five)</p>,"
","<pre><code>dnf install python3-tkinter
</code></pre>","
",<p>This worked for me.</p>,"
"
"
","<p>There is _tkinter and Tkinter - both work on Py 3.x 
But to be safe- Download Loopy and change your python root directory(if you're using an IDE like PyCharms) to Loopy's installation directory. You'll get this library and many more. </p>","
"
"
",<p>If you're using <code>Python 3</code> then you must install as follows:</p>,"
","<pre><code>sudo apt-get update
sudo apt-get install python3-tk
</code></pre>","
",<p>Tkinter for <code>Python 2</code> (<code>python-tk</code>) is different from <code>Python 3</code>'s (<code>python3-tk</code>).</p>,"
"
"
","<p>Tkinter is a GUI module for python. you can use it to make GUI based applications in python. Tkinter provides several GUI widgets like buttons,menu, canvas,text,frame,label etc. to develop desktop applications.Though Tkinter is very popular and is included with windows, macosx install of python, There are also alternative choices like pyQt, wxPython... </p>","
",<p>In this tutorial we will see how to install it on linux and use it with an example. </p>,"
","<p>First, check if you have python installed and also check its version</p>","
","<p>Open up your terminal and type python. if its installed then it will show information like version, help... check your version (mine is python 2.7.9)</p>","
","<p>aman@vostro:~$ python
Python 2.7.9 (default, Apr  2 2015, 15:33:21)
[GCC 4.9.2] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.</p>","
","<p>If you don't have python then install it
sudo apt-get install python</p>","
","<p>If you want to install python 3 then enter the following. If you are a newbie, I would recommend python 2 instead of python 3. Python 2 is still very popular and many apps are made on it. On ubuntu python2 is still the default
sudo apt-get install python3</p>","
","<p>Finally, Install Tkinter</p>","
","<pre><code>sudo apt-get install python-tk
</code></pre>","
",<p>for python 3</p>,"
","<pre><code>sudo apt-get install python3-tk
</code></pre>","
",<p>How to Use it</p>,"
","<p>Now, lets check if Tkinter is working well with this little example</p>","
","<p>open your terminal and enter into your python shell.
python</p>","
","<p>for python3
python3</p>","
","<p>if python was installed correctly you will get a &gt;&gt;&gt; prompt. 
aman@vostro:~$ python</p>","
","<pre><code>Python 2.7.9 (default, Apr  2 2015, 15:33:21)
[GCC 4.9.2] on linux2

Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt;
</code></pre>","
",<p>Now import Tkinter module. it wont show any error if it got imported correctly. NOTE: Make sure you type Tkinter (not tkinter) in python2 and tkinter (not Tkinter) in python3.</p>,"
","<pre><code>&gt;&gt;&gt;import Tkinter
</code></pre>","
","<p>Now, just to check you can create an empty window using Tkinter. </p>","
","<pre><code>&gt;&gt;&gt;Tkinter.Tk()
</code></pre>","
"
"
","<p>The situation on macOS is still <a href=""http://ftp.ntua.gr/mirror/python/topics/tkinter/download.html"" rel=""nofollow noreferrer"">a bit complicated</a>, but do-able:</p>","
","<p>Python.org strongly suggest downloading tkinter <a href=""https://www.activestate.com/activetcl/downloads"" rel=""nofollow noreferrer"">from ActiveState</a>, but you <strong>should</strong> read <a href=""https://www.activestate.com/activetcl/license-agreement"" rel=""nofollow noreferrer"">their license</a> first (hint: don't redistribute or want Support).</p>","
","<p>When the download is opened OS X 10.11 rejected it because it couldn't find my receipt: ""ActiveTcl-8.6.pkg canâ€™t be opened because it is from an unidentified developer"".</p>","
","<p>I followed an <a href=""http://osxdaily.com/2012/07/27/app-cant-be-opened-because-it-is-from-an-unidentified-developer/"" rel=""nofollow noreferrer"">OSXDaily fix from 2012</a> which suggested allowing from anywhere. But OS X has now added an ""Open Anyway"" option to allow (e.g.) Active-Tcl as a once off, and the ""Anywhere"" option has gained a timeout.</p>","
","<p><a href=""https://i.stack.imgur.com/vh8YZ.png"" rel=""nofollow noreferrer""><img alt='New warning for ""Anywhere""' src=""https://i.stack.imgur.com/vh8YZ.png""/></a></p>","
"
"
","<p>For Fedora &gt;= 25 and python &gt;= 3, we might need to include the dependencies for <code>Tkinter</code></p>","
",<p><code>sudo dnf install python3-tkinter</code></p>,"
"
"
",<p>I think you have to install the tkinter onto your code repository directory.</p>,"
","<p>For liunx (Ubuntu or debian), open the terminal.
Install the tkinter package by running this command on the terminal.</p>","
","<pre><code>sudo apt-get install python-tk 
</code></pre>","
","<p>After installing the python-tk package on the terminal, create a new python file. Call it filename.py.</p>","
","<p>On the first line of the filename.py, import tkinter into the python file.</p>","
","<pre class=""lang-py prettyprint-override""><code>import tkinter

</code></pre>","
","<p>To create a tkinter with different fields, you can use this tutorial.
<a href=""https://www.delftstack.com/tutorial/tkinter-tutorial/"" rel=""nofollow noreferrer"">https://www.delftstack.com/tutorial/tkinter-tutorial/</a></p>","
","<p>The documentation of tkinter can be found here:
<a href=""https://docs.python.org/3.7/library/tkinter.html"" rel=""nofollow noreferrer"">https://docs.python.org/3.7/library/tkinter.html</a></p>","
","<p>Hope that helps. Do ask us if you are still stuck.
Remember to identify what you need in the GUI on tkinter before implementing it. Drawing wireframes of how the GUI will look like will help in coding the Tkinter GUI.</p>","
"
"
","<p>Install python version <code>3.6+</code>
and open you text editor
or ide
write sample code like this:</p>","
","<pre><code>from tkinter import *

root = Tk()
root.title(""Answer"")

root.mainloop()
</code></pre>","
"
"
","<p>Use <a href=""https://ntk.readthedocs.io"" rel=""nofollow noreferrer"">ntk</a> for your desktop application, which work on top of tkinter to give you more functional and good looking ui in less codding.</p>","
",<p>install ntk by <code>pip install ntk</code></p>,"
","<p>proper Documentation in here: <a href=""https://ntk.readthedocs.io"" rel=""nofollow noreferrer"">ntk.readthedocs.io</a></p>","
",<p>Happy codding.</p>,"
"
"
",<p>You only need to <code>import</code> it:</p>,"
","<pre><code>import tkinter as tk
</code></pre>","
","<p>then you will be use the phrase <code>tk</code>, which is shorter and easier.</p>","
","<p>Also, I prefer using messagebox too:</p>","
","<pre><code>from tkinter import messagebox as msgbx
</code></pre>","
",<p>Here's some ways you will be able to use it.</p>,"
","<pre><code># make a new window
window = tk.Tk()

# show popup
msgbx.showinfo(""title"", ""This is a text"")
</code></pre>","
"
"
","<p>Even after you've successfully imported python3 and python3-tk, it still might not work. I changed the first line of my script from:
#! /usr/bin/python
to:
#! /usr/bin/python3</p>","
",<p>It finally worked!</p>,"
"
"
","<p>What I understand from reading the documentation is that Python has a separate namespace for functions, and if I want to use a global variable in that function, I need to use <code>global</code>.</p>","
",<p>I'm using Python 2.7 and I tried this little test</p>,"
","<pre><code>&gt;&gt;&gt; sub = ['0', '0', '0', '0']
&gt;&gt;&gt; def getJoin():
...     return '.'.join(sub)
...
&gt;&gt;&gt; getJoin()
'0.0.0.0'
</code></pre>","
",<p>It seems things are working fine even without <code>global</code>. I was able to access global variable without any problem.</p>,"
","<p>Am I missing anything? Also, following is from Python documentation:</p>","
","<blockquote>
<p>Names listed in a global statement
  must not be defined as formal
  parameters or in a for loop control
  target, class definition, function
  definition, or import statement.</p>
</blockquote>","
","<p>While formal parameters and class definition make sense to me, I'm not able to understand the restriction on for loop control target and function definition.</p>","
"
"
","<p>The keyword <code>global</code> is only useful to change or create global variables in a local context, although creating global variables is seldom considered a good solution.</p>","
","<pre><code>def bob():
    me = ""locally defined""    # Defined only in local context
    print(me)

bob()
print(me)     # Asking for a global variable
</code></pre>","
",<p>The above will give you:</p>,"
","<pre><code>locally defined
Traceback (most recent call last):
  File ""file.py"", line 9, in &lt;module&gt;
    print(me)
NameError: name 'me' is not defined
</code></pre>","
","<p>While if you use the <code>global</code> statement, the variable will become available ""outside"" the scope of the function, effectively becoming a global variable.</p>","
","<pre><code>def bob():
    global me
    me = ""locally defined""   # Defined locally but declared as global
    print(me)

bob()
print(me)     # Asking for a global variable
</code></pre>","
",<p>So the above code will give you:</p>,"
","<pre><code>locally defined
locally defined
</code></pre>","
","<p>In addition, due to the nature of python, you could also use <code>global</code> to declare functions, classes or other objects in a local context. Although I would advise against it since it causes nightmares if something goes wrong or needs debugging.</p>","
"
"
","<p>While you can access global variables without the <code>global</code> keyword, if you want to modify them you have to use the <code>global</code> keyword. For example:</p>","
","<pre><code>foo = 1
def test():
    foo = 2 # new local foo

def blub():
    global foo
    foo = 3 # changes the value of the global foo
</code></pre>","
","<p>In your case, you're just accessing the list <code>sub</code>.</p>","
"
"
","<p>This is the difference between accessing the name and <a href=""http://docs.python.org/reference/executionmodel.html"" rel=""noreferrer"">binding</a> it within a scope.</p>","
","<p>If you're just looking up a variable to read its value, you've got access to global as well as local scope.</p>","
","<p>However if you assign to a variable who's name isn't in local scope, you are <em>binding</em> that name into this scope (and if that name also exists as a global, you'll hide that). </p>","
","<p>If you want to be able to assign to the global name, you need to tell the parser to use the global name rather than bind a new local name - which is what the 'global' keyword does.</p>","
","<p>Binding anywhere within a block causes the name everywhere in that block to become bound, which can cause some rather odd looking consequences (e.g. UnboundLocalError suddenly appearing in previously working code).</p>","
","<pre><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; def p():
    print(a) # accessing global scope, no binding going on
&gt;&gt;&gt; def q():
    a = 3 # binding a name in local scope - hiding global
    print(a)
&gt;&gt;&gt; def r():
    print(a) # fail - a is bound to local scope, but not assigned yet
    a = 4
&gt;&gt;&gt; p()
1
&gt;&gt;&gt; q()
3
&gt;&gt;&gt; r()
Traceback (most recent call last):
  File ""&lt;pyshell#35&gt;"", line 1, in &lt;module&gt;
    r()
  File ""&lt;pyshell#32&gt;"", line 2, in r
    print(a) # fail - a is bound to local scope, but not assigned yet
UnboundLocalError: local variable 'a' referenced before assignment
&gt;&gt;&gt; 
</code></pre>","
"
"
",<p>The other answers answer your question. Another important thing to know about names in Python is that they are either local or global on a per-scope basis.</p>,"
","<p>Consider this, for example:</p>","
","<pre><code>value = 42

def doit():
    print value
    value = 0

doit()
print value
</code></pre>","
",<p>You can probably guess that the <code>value = 0</code> statement will be assigning to a local variable and not affect the value of the same variable declared outside the <code>doit()</code> function. You may be more surprised to discover that <em>the code above won't run.</em> The statement <code>print value</code> inside the function produces an <code>UnboundLocalError.</code></p>,"
","<p>The reason is that Python has noticed that, elsewhere in the function, you assign the name <code>value</code>, and also <code>value</code> is nowhere declared <code>global</code>. That makes it a local variable. But when you try to print it, the local name hasn't been defined yet. Python in this case <em>does not fall back</em> to looking for the name as a global variable, as some other languages do. Essentially, you cannot access a global variable if you have defined a local variable of the same name <em>anywhere</em> in the function.</p>","
"
"
","<p>Accessing a name and assigning a name are different. In your case, you are just accessing a name.</p>","
","<p>If you assign to a variable within a function, that variable is assumed to be local unless you declare it global. In the absence of that, it is assumed to be global.</p>","
","<pre><code>&gt;&gt;&gt; x = 1         # global 
&gt;&gt;&gt; def foo():
        print x       # accessing it, it is global

&gt;&gt;&gt; foo()
1
&gt;&gt;&gt; def foo():   
        x = 2        # local x
        print x 

&gt;&gt;&gt; x            # global x
1
&gt;&gt;&gt; foo()        # prints local x
2
</code></pre>","
"
"
","<ul>
<li>You can access global keywords without keyword <code>global</code></li>
<li>To be able to modify them you need to explicitly state that the keyword is global. Otherwise, the keyword will be declared in local scope.</li>
</ul>","
",<p>Example:</p>,"
","<pre><code>words = [...] 

def contains (word): 
    global words             # &lt;- not really needed
    return (word in words) 

def add (word): 
    global words             # must specify that we're working with a global keyword
    if word not in words: 
        words += [word]
</code></pre>","
"
"
",<p>This is explained well in the Python FAQ</p>,"
","<blockquote>
<h1>What are the rules for local and global variables in Python?</h1>
<p>In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a value anywhere within the functionâ€™s body, itâ€™s assumed to be a local unless explicitly declared as global.</p>
<p>Though a bit surprising at first, a momentâ€™s consideration explains this. On one hand, requiring <code>global</code> for assigned variables provides a bar against unintended side-effects. On the other hand, if <code>global</code> was required for all global references, youâ€™d be using <code>global</code> all the time. Youâ€™d have to declare as <code>global</code> every reference to a built-in function or to a component of an imported module. This clutter would defeat the usefulness of the <code>global</code> declaration for identifying side-effects.</p>
</blockquote>","
","<p><a href=""https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python"" rel=""nofollow noreferrer"">https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python</a></p>","
"
"
","<p>Any variable declared outside of a function is assumed to be global, it's only when declaring them from inside of functions (except constructors) that you must specify that the variable be global.</p>","
"
"
",<p>It means that you should not do the following:</p>,"
","<pre><code>x = 1

def myfunc():
  global x

  # formal parameter
  def localfunction(x):
    return x+1

  # import statement
  import os.path as x

  # for loop control target
  for x in range(10):
    print x

  # class definition
  class x(object):
    def __init__(self):
      pass

  #function definition
  def x():
    print ""I'm bad""
</code></pre>","
"
"
","<p>Global makes the variable ""Global""</p>","
","<pre><code>def out():
    global x
    x = 1
    print(x)
    return


out()

print (x)
</code></pre>","
",<p>This makes 'x' act like a normal variable outside the function. If you took the global out then it would give an error since it cannot print a variable inside a function.</p>,"
","<pre><code>def out():
     # Taking out the global will give you an error since the variable x is no longer 'global' or in other words: accessible for other commands
    x = 1
    print(x)
    return


out()

print (x)
</code></pre>","
"
"
","<p><code>global</code> makes the variable visible to everything in the <em>module</em>, the <em>modular scope</em>, just as if you had defined it at top-level in the module itself. It's not visible outside the module, and it cannot be imported from the module until after it has been set, so don't bother, that's not what it is for.</p>","
",<p>When does <code>global</code> solve real problems? (Note: Checked only on Python 3.)</p>,"
","<pre><code># Attempt #1, will fail
# We cannot import ``catbus`` here
# as that would lead to an import loop somewhere else,
# or importing ``catbus`` is so expensive that you don't want to 
# do it automatically  when importing this module

top_level_something_or_other = None

def foo1():
    import catbus
    # Now ``catbus`` is visible for anything else defined inside ``foo()`` 
    # at *compile time*
    bar()  # But ``bar()`` is a call, not a definition. ``catbus`` 
           # is invisible to it.

def bar():
    # `bar()` sees what is defined in the module
    # This works:
    print(top_level_something_or_other)
    # This doesn't work, we get an exception: NameError: name 'catbus' is not defined
    catbus.run()
</code></pre>","
",<p>This can be fixed with <code>global</code>:</p>,"
","<pre><code># Attempt #2, will work
# We still cannot import ``catbus`` here
# as that would lead to an import loop somewhere else,
# or importing ``catbus`` is so expensive that you don't want to 
# do it automatically  when importing this module

top_level_something_or_other = None

def foo2():
    import catbus
    global catbus  # Now catbus is also visible to anything defined 
                   # in the top-level module *at runtime* 
    bar()

def bar():
    # `bar` sees what is defined in the module and when run what is available at run time
    # This still works:
    print(top_level_something_or_other)
    # This also works now:
    catbus.run()
</code></pre>","
",<p>This wouldn't be necessary if <code>bar()</code> was defined inside <code>foo</code> like so:</p>,"
","<pre><code># Attempt 3, will work
# We cannot import ``catbus`` here
# as that would lead to an import loop somewhere else,
# or importing ``catbus`` is so expensive that you don't want to 
# do it automatically  when importing this module

top_level_something_or_other = None

def foo3():

    def bar():
        # ``bar()`` sees what is defined in the module *and* what is defined in ``foo()``
        print(top_level_something_or_other)
        catbus.run()

    import catbus
    # Now catbus is visible for anything else defined inside foo() at *compile time*
    bar()  # Which now includes bar(), so this works
</code></pre>","
","<p>By defining <code>bar()</code> outside of <code>foo()</code>, <code>bar()</code> can be  imported into something that <em>can</em> import <code>catbus</code> directly, or mock it, like in a unit test.</p>","
","<p><code>global</code> is a code smell, but sometimes what you need is exactly a dirty hack like <code>global</code>. Anyway, ""global"" is a bad name for it as there is no such thing as global scope in python, it's modules all the way down.</p>","
"
