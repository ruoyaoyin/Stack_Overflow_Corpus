[{"question": "What is the use of the yield keyword in Python? What does it do?", "answers": ["To understand what yield does, you must understand what generators are. And before you can understand generators, you must understand iterables.", "When you see a function with yield statements, apply this easy trick to understand what will happen:"]}, {"question": "Given the following code, what does the if __name__ == \"__main__\": do?", "answers": ["It's boilerplate code that protects users from accidentally invoking the script when they didn't intend to. Here are some common problems when the guard is omitted from a script:", "When your script is run by passing it as a command to the Python interpreter,"]}, {"question": "If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?", "answers": ["Yes, It was added in version 2.5. The expression syntax is:", "You can index into a tuple:"]}, {"question": "In Python, what are metaclasses and what do we use them for?", "answers": ["Before understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.", "A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass."]}, {"question": "I have two Python dictionaries, and I want to write a single expression that returns these two dictionaries, merged (i.e. taking the union).  The update() method would be what I need, if it returned its result instead of modifying a dictionary in-place.", "answers": ["For dictionaries x and y, z becomes a shallowly-merged dictionary with values from y replacing those from x.", "In your case, what you can do is:"]}, {"question": "How do you call an external command (as if I'd typed it at the Unix shell or Windows command prompt) from within a Python script?", "answers": ["Use the subprocess module in the standard library:", "Summary of ways to call external programs, including their advantages and disadvantages:"]}, {"question": "What is the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory using Python? Here is what I tried:", "answers": ["On Python \u2265 3.5, use pathlib.Path.mkdir:", "pathlib.Path.mkdir as used above recursively creates the directory and does not raise an exception if the directory already exists. If you don't need or want the parents to be created, skip the parents argument."]}, {"question": "What is the difference between a function decorated with @staticmethod and one decorated with @classmethod?", "answers": ["Maybe a bit of example code will help: Notice the difference in the call signatures of foo, class_foo and static_foo:", "A staticmethod is a method that knows nothing about the class or instance it was called on. It just gets the arguments that were passed, no implicit first argument. It is basically useless in Python -- you can just use a module function instead of a staticmethod."]}, {"question": "I need a good explanation (references are a plus) on Python's slice notation. ", "answers": ["It's pretty simple really:", "The Python tutorial talks about it (scroll down a bit until you get to the part about slicing)."]}, {"question": "I am a bit puzzled by the following code:", "answers": ["key is just a variable name.  ", "It's not that key is a special word, but that dictionaries implement the iterator protocol.  You could do this in your class, e.g. see this question for how to build class iterators."]}, {"question": "How can I create or use a global variable in a function?", "answers": ["You can use a global variable within other functions by declaring it as global within each function that assigns a value to it:", "If I'm understanding your situation correctly, what you're seeing is the result of how Python handles local (function) and global (module) namespaces."]}, {"question": "I'm looking for a string.contains or string.indexof method in Python.", "answers": ["You can use the in operator:", "If it's just a substring search you can use string.find(\"substring\")."]}, {"question": "I know that I can do:", "answers": ["From Python Documentation:", "Do this:"]}, {"question": "What is the difference between __str__ and __repr__ in Python?", "answers": ["Alex summarized well but, surprisingly, was too succinct.", "My rule of thumb:  __repr__ is for developers, __str__ is for customers."]}, {"question": "How do I concatenate two lists in Python?", "answers": ["You can use the + operator to combine them:", "Python >= 3.5 alternative: [*l1, *l2]"]}, {"question": "For example, if passed the following:", "answers": ["Using the implicit booleanness of the empty list is quite pythonic.", "The pythonic way to do it is from the PEP 8 style guide."]}, {"question": "What's the difference between the list methods append() and extend()?", "answers": ["append appends object at the end.", "append adds an element to a list, and extend concatenates the first list with another list (or another iterable, not necessarily a list.)"]}, {"question": "What is __init__.py for in a Python source directory?", "answers": ["It used to be a required part of a package (old, pre-3.3 \"regular package\", not newer 3.3+ \"namespace package\").", "Files named __init__.py are used to mark directories on disk as Python package directories.\nIf you have the files"]}, {"question": "Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:", "answers": ["Actually, this is not a design flaw, and it is not because of internals or performance.\nIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.", "Suppose you have the following code"]}, {"question": "I would like to know how to put a time delay in a Python script.", "answers": ["Here is another example where something is run approximately once a minute:", "You can use the sleep() function in the time module. It can take a float argument for sub-second resolution."]}, {"question": "The Python documentation seems unclear about whether parameters are passed by reference or value, and the following code produces the unchanged value 'Original'", "answers": ["Arguments are passed by assignment. The rationale behind this is twofold:", "The problem comes from a misunderstanding of what variables are in Python. If you're used to most traditional languages, you have a mental model of what happens in the following sequence:"]}, {"question": "While using new_list = my_list, any modifications to new_list changes my_list every time. Why is this, and how can I clone or copy the list to prevent it?", "answers": ["With new_list = my_list, you don't actually have two lists. The assignment just copies the reference to the list, not the actual list, so both new_list and my_list refer to the same list after the assignment.", "Felix already provided an excellent answer, but I thought I'd do a speed comparison of the various methods:"]}, {"question": "How can I make two decorators in Python that would do the following?", "answers": ["If you are not into long explanations, see Paolo Bergantino\u2019s answer.", "Check out the documentation to see how decorators work. Here is what you asked for:"]}, {"question": "I'm trying to understand the use of super(). From the looks of it, both child classes can be created, just fine. ", "answers": ["super() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven't already.", "The reason we use super is so that child classes that may be using cooperative multiple inheritance will call the correct next parent class function in the Method Resolution Order (MRO)."]}, {"question": "In the following method definitions, what does the * and ** do for param2?", "answers": ["The *args and **kwargs is a common idiom to allow arbitrary number of arguments to functions as described in the section more on defining functions in the Python documentation.", "It's also worth noting that you can use * and ** when calling functions as well. This is a shortcut that allows you to pass multiple arguments to a function directly using either a list/tuple or a dictionary. For example, if you have the following function:"]}, {"question": "How can I select rows from a DataFrame based on values in some column in Pandas?", "answers": ["To select rows whose column value equals a scalar, some_value, use ==:", "There are several ways to select rows from a Pandas dataframe:"]}, {"question": "How do you change the size of figure drawn with Matplotlib?", "answers": ["figure tells you the call signature:", "If you've already got the figure created, you can use figure.set_size_inches to adjust the figure size:"]}, {"question": "How can I raise an exception in Python so that it can later be caught via an except block?", "answers": ["Use the most specific Exception constructor that semantically fits your issue.", "DON'T DO THIS. Raising a bare Exception is absolutely not the right thing to do; see Aaron Hall's excellent answer instead."]}, {"question": "How can I output colored text to the terminal in Python?", "answers": ["This somewhat depends on what platform you are on. The most common way to do this is by printing ANSI escape sequences. For a simple example, here's some Python code from the Blender build scripts:", "There is also the Python termcolor module. Usage is pretty simple:"]}, {"question": "I set an environment variable that I want to access in my Python application. How do I get its value?", "answers": ["Environment variables are accessed through os.environ", "To check if the key exists (returns True or False)"]}, {"question": "In Python, what commands can I use to find:", "answers": ["To get the full path to the directory a Python file is contained in, write this in that file:", "Current working directory:  os.getcwd()"]}, {"question": "I wanted to test if a key exists in a dictionary before updating the value for the key.\nI wrote the following code:", "answers": ["in is the intended way to test for the existence of a key in a dict.", "You don't have to call keys:"]}, {"question": "pip is a replacement for easy_install. But should I install pip using easy_install on Windows? Is there a better way?", "answers": ["Good news! Python 3.4 (released March 2014) and Python 2.7.9 (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins Ruby, Node.js, Haskell, Perl, Go\u2014almost every other contemporary language with a majority open-source community. Thank you, Python.", "-- Outdated -- use distribute, not setuptools as described here. --\n-- Outdated #2 -- use setuptools as distribute is deprecated."]}, {"question": "It is my understanding that the range() function, which is actually an object type in Python 3, generates its contents on the fly, similar to a generator.", "answers": ["The Python 3 range() object doesn't produce numbers immediately; it is a smart sequence object that produces numbers on demand. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration.", "The fundamental misunderstanding here is in thinking that range is a generator. It's not. In fact, it's not any kind of iterator."]}, {"question": "In Python, how do you get the last element of a list?", "answers": ["some_list[-1] is the shortest and most Pythonic.", "If your str() or list() objects might end up being empty as so: astr = '' or alist = [], then you might want to use alist[-1:] instead of alist[-1] for object \"sameness\"."]}, {"question": "When deleting a key from a dictionary, I use:", "answers": ["To delete a key regardless of whether it is in the dictionary, use the two-argument form of dict.pop():", "Specifically to answer \"is there a one line way of doing this?\""]}, {"question": "Is there a way to convert a string from uppercase, or even part uppercase to lowercase? ", "answers": ["Use .lower() - For example:", "Is there any way to convert an entire user inputted string from uppercase, or even part uppercase to lowercase?"]}, {"question": "Is it possible to have static class variables or methods in Python? What syntax is required to do this?", "answers": ["Variables declared inside the class definition, but not inside a method are class or static variables:", "@Blair Conrad said static variables declared inside the class definition, but not inside a method are class or \"static\" variables:"]}, {"question": "I'd like to do it in Python. What I'd like to do in this example in C:", "answers": ["In Python 3, you can use the sep= and end= parameters of the print function:", "For Python 2 and earlier, it should be as simple as described in Re: How does one print without a CR? by Guido van Rossum (paraphrased):"]}, {"question": "What is the best way to go call a function, given a string with the function's name in a Python program. For example, let's say that I have a module foo, and I have a string whose content is \"bar\". What is the best way to call foo.bar()?", "answers": ["Assuming module foo with method bar:", "or"]}, {"question": "Consider the following:", "answers": ["The len() function can be used with several different types in Python - both built-in types and library types. For example:", "To find the size of a list, use the builtin function, len:"]}, {"question": "Assume I have the following list:", "answers": ["Use random.choice():", "If you want to randomly select more than one item from a list, or select an item from a set, I'd recommend using random.sample instead."]}, {"question": "Is there a way in Python to determine if an object has some attribute?  For example:", "answers": ["Try hasattr():", "As Jarret Hardie answered, hasattr will do the trick.  I would like to add, though, that many in the Python community recommend a strategy of \"easier to ask for forgiveness than permission\" (EAFP) rather than \"look before you leap\" (LBYL).  See these references:"]}, {"question": "I'm using virtualenv and the virtualenvwrapper. I can switch between virtualenv's just fine using the workon command.", "answers": ["Usually, activating a virtualenv gives you a shell function named:", "Use:"]}, {"question": "We are working on an S60 version and this platform has a nice Python API..", "answers": ["One way is to use Kivy:", "There is also the new Android Scripting Environment (ASE/SL4A) project. It looks awesome, and it has some integration with native Android components. "]}, {"question": "I want a to be rounded to 13.95.", "answers": ["You are running into the old problem with floating point numbers that not all numbers can be represented exactly. The command line is just showing you the full floating point form from memory.", "There are new format specifications, String Format Specification Mini-Language:"]}, {"question": "I wanted to compare reading lines of string input from stdin using Python and C++ and was shocked to see my C++ code run an order of magnitude slower than the equivalent Python code. Since my C++ is rusty and I'm not yet an expert Pythonista, please tell me if I'm doing something wrong or if I'm misunderstanding something.", "answers": ["By default, cin is synchronized with stdio, which causes it to avoid any input buffering.  If you add this to the top of your main, you should see much better performance:", "Just out of curiosity I've taken a look at what happens under the hood, and I've used dtruss/strace on each test."]}, {"question": "I have the following folder structure.", "answers": ["Note: This answer was intended for a very specific question. For most programmers coming here from a search engine, this is not the answer you are looking for. Typically you would structure your files into packages (see other answers) instead of modifying the search path.", "Nothing wrong with:"]}, {"question": "gives me : Key Error: Hello\\\\", "answers": ["You need to double the {{ and }}:", "Python 3.6+ (2017)"]}, {"question": "Is there a simple way to determine if a variable is a list, dictionary, or something else? I am getting an object back that may be either type and I need to be able to tell the difference.", "answers": ["There are two built-in functions that help you identify the type of an object. You can use type()  if you need the exact type of an object, and isinstance() to check an object\u2019s type against something. Usually, you want to use isinstance() most of the times since it is very robust and also supports type inheritance.", "You can do that using type():"]}, {"question": "This has always confused me. It seems like this would be nicer:", "answers": ["It's because any iterable can be joined (e.g, list, tuple, dict, set), but its contents and the \"joiner\" must be strings.", "This was discussed in the String methods... finally thread in the Python-Dev achive, and was accepted by Guido. This thread began in Jun 1999, and str.join was included in Python 1.6 which was released in Sep 2000 (and supported Unicode). Python 2.0 (supported str methods including join) was released in Oct 2000."]}, {"question": "How do I remove an element from a list by index in Python?", "answers": ["Use del and specify the index of the element you want to delete:", "You probably want pop:"]}, {"question": "Is it possible to have static methods in Python which I could call without initializing a class, like:", "answers": ["Yep, using the staticmethod decorator", "I think that Steven is actually right. To answer the original question, then, in order to set up a class method, simply assume that the first argument is not going to be a calling instance, and then make sure that you only call the method from the class."]}, {"question": "How do you append to the file instead of overwriting it? Is there a special function that appends to the file?", "answers": ["This can be achieved by setting the mode in open() to \"a\" (append) instead of \"w\" (write). See the documentation op open() for all available modes.", "You need to open the file in append mode, by setting \"a\" or \"ab\" as the mode. See open()."]}, {"question": "When deleting a column in a DataFrame I use:", "answers": ["The best way to do this in Pandas is to use drop:", "As you've guessed, the right syntax is "]}, {"question": "What is a Pythonic way to pad a numeric string with zeroes to the left, i.e. so the numeric string has a specific length?", "answers": ["Strings:", "Just use the rjust method of the string object."]}, {"question": "Could someone explain to me the meaning of @classmethod and @staticmethod in python? I need to know the difference and the meaning. ", "answers": ["Though classmethod and staticmethod are quite similar, there's a slight difference in usage for both entities: classmethod must have a reference to a class object as the first parameter, whereas staticmethod can have no parameters at all.", "Rostyslav Dzinko's answer is very appropriate. I thought I could highlight one other reason you should choose @classmethod over @staticmethod when you are creating an additional constructor."]}, {"question": "How do I find out a name of class that created an instance of an object in Python if the function I am doing this from is the base class of which the class of the instance has been derived?", "answers": ["Have you tried the __name__ attribute of the class? ie type(x).__name__ will give you the name of the class, which I think is what you want.", "Do you want the name of the class as a string?"]}, {"question": "What I want is to start counting time somewhere in my code and then get the passed time, to measure the time it took to execute few function. I think I'm using the timeit module wrong, but the docs are just confusing for me.", "answers": ["If you just want to measure the elapsed wall-clock time between two points, you could use  time.time():", "Use timeit.default_timer instead of timeit.timeit. The former provides the best clock available on your platform and version of Python automatically:"]}, {"question": "I have a very long query. I would like to split it in several lines in Python. A way to do it in JavaScript would be using several sentences and joining them with a + operator (I know, maybe it's not the most efficient way to do it, but I'm not really concerned about performance in this stage, just code readability). Example:", "answers": ["Are you talking about multi-line strings? Easy, use triple quotes to start and end them.", "If you don't want a multiline string, but just have a long single line string, you can use parentheses. Just make sure you don't include commas between the string segments (then it will be a tuple)."]}, {"question": "How can I generate random integers between 0 and 9 (inclusive) in Python?", "answers": ["Try:", "Return a random integer N such that a <= N <= b."]}, {"question": "I am trying to install version 1.2.2 of MySQL_python, using a fresh virtualenv created with the --no-site-packages option. The current version shown in PyPi is 1.2.3. Is there a way to install the older version? I have tried:", "answers": ["TL;DR:", "You can even use a version range with pip install command. Something like this:"]}, {"question": "I spent most of the day yesterday searching for a clear answer for installing pip (package manager for Python). I can't find a good solution.", "answers": ["pip's documentation lists the supported mechanisms to install it: https://pip.pypa.io/en/stable/installation/#supported-methods", "\u26a1\ufe0f TL;DR \u2014 One-line solution."]}, {"question": "Python 3.3 includes in its standard library the new package venv. What does it do, and how does it differ from all the other packages that seem to match the regex (py)?(v|virtual|pip)?env?", "answers": ["This is my personal recommendation for beginners: start by learning virtualenv and pip, tools which work with both Python 2 and 3 and in a variety of situations, and pick up other tools once you start needing them.", "I would just avoid the use of virtualenv after Python3.3+ and instead use the standard shipped library venv. To create a new virtual environment you would type:"]}, {"question": "I'm trying to do some of the code golf challenges, but they all require the input to be taken from stdin. How do I get that in Python?", "answers": ["You could use the fileinput module:", "There's a few ways to do it."]}, {"question": "There are several ways to write to stderr:", "answers": ["I found this to be the only one short, flexible, portable and readable:", "Is my choice, just more readable and saying exactly what you intend to do and portable across versions.  "]}, {"question": "Can someone please explain the exact meaning of having single and double leading underscores before an object's name in Python, and the difference between both?", "answers": ["Names, in a class, with a leading underscore are simply to indicate to other programmers that the attribute or method is intended to be private.  However, nothing special is done with the name itself.", "__foo__: this is just a convention, a way for the Python system to use names that won't conflict with user names."]}, {"question": "What's the proper way to declare custom exception classes in modern Python? My primary goal is to follow whatever standard other exception classes have, so that (for instance) any extra string I include in the exception is printed out by whatever tool caught the exception.", "answers": ["Maybe I missed the question, but why not:", "With modern Python Exceptions, you don't need to abuse .message, or override .__str__() or .__repr__() or any of it. If all you want is an informative message when your exception is raised, do this:"]}, {"question": "What is the best way to check whether a given object is of a given type? How about checking whether the object inherits from a given type?", "answers": ["To check if o is an instance of str or any subclass of str, use isinstance (this would be the \"canonical\" way):", "The most Pythonic way to check the type of an object is... not to check it."]}, {"question": "I am trying to build a shared library using a C extension file but first I have to generate the output file using the command below:", "answers": ["Looks like you haven't properly installed the header files and static libraries for python dev.  Use your package manager to install them system-wide.", "On Ubuntu, I was running Python 3 and I had to install "]}, {"question": "I have a JSON file that is a mess that I want to prettyprint. What's the easiest way to do this in Python?", "answers": ["The json module already implements some basic pretty printing in the dump and dumps functions, with the indent parameter that specifies how many spaces to indent by:", "You can do this on the command line:"]}, {"question": "Is there any reason for a class declaration to inherit from object?", "answers": ["In Python 3, apart from compatibility between Python 2 and 3, no reason. In Python 2, many reasons. ", "Python 3"]}, {"question": "Project Euler and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs. With Python, sometimes the approaches are somewhat kludgey - i.e., adding timing code to __main__.", "answers": ["Python includes a profiler called cProfile. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.", "A while ago I made pycallgraph which generates a visualisation from your Python code. Edit: I've updated the example to work with 3.3, the latest release as of this writing."]}, {"question": "I'm trying to get the number of rows of dataframe df with Pandas, and here is my code.", "answers": ["For a dataframe df, one can use any of the following:", "Suppose df is your dataframe then:"]}, {"question": "How can I load a Python module given its full path?", "answers": ["For Python 3.5+ use:", "The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:"]}, {"question": "So I have difficulty with the concept of *args and **kwargs.", "answers": ["The syntax is the * and **.  The names *args and **kwargs are only by convention but there's no hard requirement to use them.", "One place where the use of *args and **kwargs is quite useful is for subclassing."]}, {"question": "I like the Python list comprehension syntax.", "answers": ["Use a dict comprehension (Python 2.7 and later):", "In Python 3 and Python 2.7+, dictionary comprehensions look like the below:"]}, {"question": "How do I force Python's print function to output to the screen?", "answers": ["In Python 3, print can take an optional flush argument:", "Running python -h, I see a command line option:"]}, {"question": "What are the differences between these two code snippets?", "answers": ["To summarize the contents of other (already good!) answers, isinstance caters for inheritance (an instance of a derived class is an instance of a base class, too), while checking for equality of type does not (it demands identity of types and rejects instances of subtypes, AKA subclasses).", "Here's an example where isinstance achieves something that type cannot:"]}, {"question": "I'm having problems dealing with unicode characters from text fetched from different web pages (on different sites). I am using BeautifulSoup. ", "answers": ["You need to read the Python Unicode HOWTO. This error is the very first example.", "This is a classic python unicode pain point! Consider the following:"]}, {"question": "Python 2.6 introduced the str.format() method with a slightly different syntax from the existing % operator. Which is better and for what situations?", "answers": ["To answer your first question... .format just seems more sophisticated in many ways. An annoying thing about % is also how it can either take a variable or a tuple. You'd think the following would always work:", "Something that the modulo operator ( % ) can't do, afaik:"]}, {"question": "What are the lesser-known but useful features of the Python programming language?", "answers": ["In case you're thinking it's doing 1 < x, which comes out as True, and then comparing True < 10, which is also True, then no, that's really not what happens (see the last example.) It's really translating into 1 < x and x < 10, and x < 10 and 10 < x * 10 and x*10 < 100, but with less typing and each term is only evaluated once.", "Get the python regex parse tree to debug your regex."]}, {"question": "How can I check what version of the Python Interpreter is interpreting my script?", "answers": ["This information is available in the sys.version string in the sys module:", "From the command line (note the capital 'V'):"]}, {"question": "How do I refer to the null object in Python?", "answers": ["In Python, the 'null' object is the singleton None.", "There's no null in Python; instead there's None. As stated already, the most accurate way to test that something has been given None as a value is to use the is identity operator, which tests that two variables refer to the same object."]}, {"question": "How can I do the following in Python?", "answers": ["You can totally do that. It's just an ordering issue:", "The specific problem has already been solved in previous answers, so I will address the general idea of using conditionals inside list comprehensions."]}, {"question": "I have been using Python more and more, and I keep seeing the variable __all__ set in different __init__.py files.  Can someone explain what this does?", "answers": ["Linked to, but not explicitly mentioned here, is exactly when __all__ is used. It is a list of strings defining what symbols in a module will be exported when from <module> import * is used on the module.", "It's a list of public objects of that module, as interpreted by import *. It overrides the default of hiding everything that begins with an underscore."]}, {"question": "float('nan') results in Nan (not a number). But how do I check for it? Should be very easy, but I cannot find it.", "answers": ["math.isnan(x)", "The usual way to test for a NaN is to see if it's equal to itself:"]}, {"question": "Can anyone please explain what setup.py is and how it can be configured or used?", "answers": ["setup.py is a python file, the presence of which is an indication that the module/package you are about to install has likely been packaged and distributed with Distutils, which is the standard for distributing Python Modules.", "It helps to install a python package foo on your machine (can also be in virtualenv) so that you can import the package foo from other projects and also from [I]Python prompts."]}, {"question": "I have a series of 20 plots (not subplots) to be made in a single figure.  I want the legend to be outside of the box.  At the same time, I do not want to change the axes, as the size of the figure gets reduced.  Kindly help me for the following queries:", "answers": ["There are a number of ways to do what you want.  To add to what @inalis and @Navi already said, you can use the bbox_to_anchor keyword argument to place the legend partially outside the axes and/or decrease the font size.", "A legend is positioned inside the bounding box of the axes using the loc argument to plt.legend.\nE.g. loc=\"upper right\" places the legend in the upper right corner of the bounding box, which by default extents from (0,0) to (1,1) in axes coordinates (or in bounding box notation (x0,y0, width, height)=(0,0,1,1))."]}, {"question": "I have recently started studying Python, but I couldn't find how to implement multi-line comments. Most languages have block comment symbols like", "answers": ["You can use triple-quoted strings. When they're not a docstring (the first thing in a class/function/module), they are ignored.", "Python does have a multiline string/comment syntax in the sense that unless used as docstrings, multiline strings generate no bytecode -- just like #-prepended comments. In effect, it acts exactly like a comment."]}, {"question": "How do I remove leading and trailing whitespace from a string in Python?", "answers": ["Just one space or all consecutive spaces? If the second, then strings already have a .strip() method:", "As pointed out in answers above"]}, {"question": "I have the following DataFrame (df):", "answers": ["One easy way would be to reassign the dataframe with a list of the columns, rearranged as needed. ", "You could also do something like this:"]}, {"question": "Is there a method like isiterable? The only solution I have found so far is to call", "answers": ["Checking for __iter__ works on sequence types, but it would fail on e.g. strings in Python 2. I would like to know the right answer too, until then, here is one possibility (which would work on strings, too):", "Use the Abstract Base Classes. They need at least Python 2.6 and work only for new-style classes."]}, {"question": "There appear to be two different ways to convert a string to bytes, as seen in the answers to TypeError: 'str' does not support the buffer interface", "answers": ["If you look at the docs for bytes, it points you to bytearray:", "It's easier than it is thought:"]}, {"question": "I have a long line of code that I want to break up among multiple lines. What do I use and what is the syntax?", "answers": ["What is the line?  You can just have arguments on the next line without any problems:", "From PEP 8 -- Style Guide for Python Code:"]}, {"question": "I've got a Python program where two variables are set to the value 'public'. In a conditional expression I have the comparison var1 is var2 which fails, but if I change it to var1 == var2 it returns True.", "answers": ["is is identity testing, == is equality testing. what happens in your code would be emulated in the interpreter like this:", "Other answers here are correct: is is used for identity comparison, while == is used for equality comparison. Since what you care about is equality (the two strings should contain the same characters), in this case the is operator is simply wrong and you should be using == instead."]}, {"question": "I'm just trying to streamline one of my classes and have introduced some functionality in the same style as the flyweight design pattern.", "answers": ["Use __new__ when you need to control\nthe creation of a new instance.", "__new__ is static class method, while __init__ is instance method. \n__new__ has to create the instance first, so __init__ can initialize it. Note that __init__ takes self as parameter. Until you create instance there is no self."]}, {"question": "How to set the current working directory in Python?", "answers": ["Try os.chdir", "Perhaps this is what you are looking for:"]}, {"question": "After you train a model in Tensorflow: ", "answers": ["I am improving my answer to add more details for saving and restoring models. ", "In (and after) TensorFlow version 0.11.0RC1, you can save and restore your model directly by calling tf.train.export_meta_graph and tf.train.import_meta_graph according to https://www.tensorflow.org/programmers_guide/meta_graph."]}, {"question": "What is the python keyword \"with\" used for?", "answers": ["In python the with keyword is used when working with unmanaged resources (like file streams). It is similar to the using statement in VB.NET and C#. It allows you to ensure that a resource is \"cleaned up\" when the code that uses it finishes running, even if exceptions are thrown. It provides 'syntactic sugar' for try/finally blocks.", "Explanation from the Pershing on Programming blog:"]}, {"question": "Sometimes I want to just insert some print statements in my code, and see what gets printed out when I exercise it. My usual way to \"exercise\" it is with existing pytest tests. But when I run these, I don't seem able to see any standard output (at least from within PyCharm, my IDE).", "answers": ["The -s switch disables per-test capturing (only if a test fails).", "pytest captures the stdout from individual tests and displays them only on certain conditions, along with the summary of the tests it prints by default."]}, {"question": "I understand how this construct works:", "answers": ["A common construct is to run a loop until something is found and then to break out of the loop. The problem is that if I break out of the loop or the loop ends I need to determine which case happened. One method is to create a flag or store variable that will let me do a second test to see how the loop was exited.", "It's a strange construct even to seasoned Python coders. When used in conjunction with for-loops it basically means \"find some item in the iterable, else if none was found do ...\". As in:"]}, {"question": "I'm new to Python and I'm just trying to understand how its packages work.  Presumably eggs are some sort of packaging mechanism, but what would be a quick overview of what role they play and may be some information on why they're useful and how to create them?", "answers": ["Note: Egg packaging has been superseded by Wheel packaging.", "The .egg file is a distribution format for Python packages. It\u2019s just an alternative to a source code distribution or Windows exe. But note that for pure Python, the .egg file is completely cross-platform."]}, {"question": "My Google-fu has failed me.", "answers": ["is will return True if two variables point to the same object (in memory), == if the objects referred to by the variables are equal.", "There is a simple rule of thumb to tell you when to use == or is."]}, {"question": "I am interested in knowing how to convert a pandas dataframe into a NumPy array.", "answers": ["It's time to deprecate your usage of values and as_matrix().", "To convert a pandas dataframe (df) to a numpy ndarray, use this code:"]}, {"question": "I am using Python 3.1 and can't get the raw_input to \"freeze\" the dos pop-up. The book I'm reading is for Python 2.5 and I'm using Python 3.1", "answers": ["Starting with Python 3, raw_input() was renamed to input().", "This works in Python 3.x and 2.x:"]}, {"question": "I'm using virtualenv and I need to install \"psycopg2\".", "answers": ["Note: Since a while back, there are binary wheels for Windows in PyPI, so this should no longer be an issue for Windows users. Below are solutions for Linux, Mac users, since lots of them find this post through web searches.", "On CentOS, you need the postgres dev packages:"]}, {"question": "I'm working on a python script that starts several processes and database connections. Every now and then I want to kill the script with a Ctrl+C signal, and I'd like to do some cleanup.", "answers": ["Register your handler with signal.signal like this:", "You can treat it like an exception (KeyboardInterrupt), like any other. Make a new file and run it from your shell with the following contents to see what I mean:"]}, {"question": "I am trying to save a csv to a folder after making some edits to the file. ", "answers": ["Use index=False.", "There are two ways to handle the situation where we do not want the index to be stored in csv file."]}, {"question": "I want to install pip. It should support Python 3, but it requires setuptools, which is available only for Python 2.", "answers": ["edit: Manual installation and use of setuptools is not the standard process anymore.", "I was able to install pip for python 3 on Ubuntu just by running sudo apt-get install python3-pip. "]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["There are a bunch of ways to do it, but the most straightforward is to simply \nuse the Python debugger. Just add following line in to a Django view function:", "I really like Werkzeug's interactive debugger. It's similar to Django's debug page, except that you get an interactive shell on every level of the traceback. If you use the django-extensions, you get a runserver_plus managment command which starts the development server and gives you Werkzeug's debugger on exceptions."]}, {"question": "Is there a built-in function for getting the size of a file object in bytes? I see some people do something like this:", "answers": ["Use os.path.getsize(path) which will", "Return the size, in bytes, of path. Raise os.error if the file does not exist or is inaccessible."]}, {"question": "What is the difference between the search() and match() functions in the Python re module?", "answers": ["re.match is anchored at the beginning of the string. That has nothing to do with newlines, so it is not the same as using ^ in the pattern.", "search \u21d2 find something anywhere in the string and return a match object."]}, {"question": "The documentation for the argparse python module, while excellent I'm sure, is too much for my tiny beginner brain to grasp right now. I don't need to do math on the command line or meddle with formatting lines on the screen or change option characters. All I want to do is \"If arg is A, do this, if B do that, if none of the above show help and quit\".", "answers": ["Here's the way I do it with argparse (with multiple args):", "My understanding of the original question is two-fold. First, in terms of the simplest possible argparse example, I'm surprised that I haven't seen it here. Of course, to be dead-simple, it's also all overhead with little power, but it might get you started."]}, {"question": "I\u2019m trying to port an open-source library to Python 3.  (SymPy, if anyone is wondering.) ", "answers": ["As of March 2020, most of the other answers to this question are several years out-of-date. When you come across advice on Python packaging issues, remember to look at the date of publication, and don't trust out-of-date information.", "I\u2019m a distutils maintainer and distutils2/packaging contributor.  I did a talk about Python packaging at ConFoo 2011 and these days I\u2019m writing an extended version of it.  It\u2019s not published yet, so here are excerpts that should help define things."]}, {"question": "I'm writing a Python application that takes as a command as an argument, for example:", "answers": ["With Python older than 2.7/3.1, that's pretty much how you do it.", "The recommended way for Python 2.7 and 3.1 and later is to use importlib module:"]}, {"question": "I've installed a library using the command", "answers": ["Normally your requirements.txt file would look something like this:", "\u201cEditable\u201d packages syntax can be used in requirements.txt to import packages from a variety of VCS (git, hg, bzr, svn):"]}, {"question": "I have a function that analyzes a CSV file with Pandas and produces a dict with summary information. I want to return the results as a response from a Flask view. How do I return a JSON response?", "answers": ["As of Flask 1.1.0 a view can directly return a Python dict and Flask will call jsonify automatically.", "jsonify serializes the data you pass it to JSON. If you want to serialize the data yourself, do what jsonify does by building a response with status=200 and mimetype='application/json'."]}, {"question": "I haven't been able to find an understandable explanation of how to actually use Python's itertools.groupby() function.  What I'm trying to do is this:", "answers": ["IMPORTANT NOTE: You have to sort your data first.", "itertools.groupby is a tool for grouping items."]}, {"question": "I am printing Python exception messages to a log file with logging.error:", "answers": ["logger.exception will output a stack trace alongside the error message.", "Using exc_info options may be better, to allow you to choose the error level (if you use exception, it will always be at the error level): "]}, {"question": "I want my Python function to split a sentence (input) and store each word in a list. My current code splits the sentence, but does not store the words as a list. How do I do that?", "answers": ["This should be enough to store each word in a list.  words is already a list of the words from the sentence, so there is no need for the loop.", "Splits the string in text on any consecutive runs of whitespace."]}, {"question": "Python has an ordered dictionary. What about an ordered set?", "answers": ["There is an ordered set (possible new link) recipe for this which is referred to from the Python 2 Documentation. This runs on Py2.6 or later and 3.0 or later without any modifications. The interface is almost exactly the same as a normal set, except that initialisation should be done with a list.", "The answer is no, but you can use collections.OrderedDict from the Python standard library with just keys (and values as None) for the same purpose."]}, {"question": "Is there a Python equivalent for the case statement such as the examples available in VB.NET or C#?", "answers": ["In Python 3.10, they introduced the pattern matching.", "The direct replacement is if/elif/else. "]}, {"question": "Is output buffering enabled by default in Python's interpreter for sys.stdout?", "answers": ["From Magnus Lycka answer on a mailing list:", "I would rather put my answer in How to flush output of print function? or in Python's print function that flushes the buffer when it's called?, but since they were marked as duplicates of this one (what I do not agree), I'll answer it here."]}, {"question": "In Python Pandas, what's the best way to check whether a DataFrame has one (or more) NaN values?", "answers": ["jwilner's response is spot on. I was exploring to see if there's a faster option, since in my experience, summing flat arrays is (strangely) faster than counting. This code seems faster:", "You have a couple of options. "]}, {"question": "I'm trying to map a list into hex, and then use the list elsewhere. In python 2.6, this was easy:", "answers": ["Do this:", "New and neat in Python 3.5:"]}, {"question": "I have a list of lists:", "answers": ["A key can be a function that returns a tuple:", "I'm not sure if this is the most pythonic method ...\nI had a list of tuples that needed sorting 1st by descending integer values and 2nd alphabetically. This required reversing the integer sort but not the alphabetical sort. Here was my solution: (on the fly in an exam btw, I was not even aware you could 'nest' sorted functions)"]}, {"question": "Can you tell me when to use these vectorization methods with basic examples? ", "answers": ["Straight from Wes McKinney's Python for Data Analysis book, pg. 132 (I highly recommended this book):", "First major difference: DEFINITION"]}, {"question": "I'm quite familiar with Django, but I recently noticed there exists an on_delete=models.CASCADE option with the models. I have searched for the documentation for the same, but I couldn't find anything more than:", "answers": ["This is the behaviour to adopt when the referenced object is deleted. It is not specific to Django; this is an SQL standard. Although Django has its own implementation on top of SQL. (1)", "The on_delete method is used to tell Django what to do with model instances that depend on the model instance you delete. (e.g. a ForeignKey relationship). The on_delete=models.CASCADE tells Django to cascade the deleting effect i.e. continue deleting the dependent models as well. "]}, {"question": "It seems that python supports many different commands to stop script execution.The choices I've found are:  quit(), exit(), sys.exit(), os._exit() ", "answers": ["Let me give some information on them:", "The functions* quit(), exit(), and sys.exit() function in the same way: they raise the SystemExit exception.  So there is no real difference, except that sys.exit() is always available but exit() and quit() are only available if the site module is imported."]}, {"question": "What is the difference between abstract class and interface in Python?", "answers": ["What you'll see sometimes is the following:", "An interface, for an object, is a set of methods and attributes on that object."]}, {"question": "I've seen some code samples and tutorials that use", "answers": ["Without the main sentinel, the code would be executed even if the script were imported as a module.", "Everyone else has already answered it, but I think I still have something else to add."]}, {"question": "I'm not sure if this is Flask specific, but when I run an app in dev mode (http://localhost:5000), I cannot access it from other machines on the network (with http://[dev-host-ip]:5000). With Rails in dev mode, for example, it works fine. I couldn't find any docs regarding the Flask dev server configuration. Any idea what should be configured to enable this?", "answers": ["While this is possible, you should not use the Flask dev server in production. The Flask dev server is not designed to be particularly secure, stable, or efficient. See the docs on deploying for correct solutions.", "If you use the flask executable to start your server, use flask run --host=0.0.0.0 to change the default from 127.0.0.1 and open it up to non-local connections."]}, {"question": "I'm using the Python bindings to run Selenium WebDriver:", "answers": ["You can read the innerHTML attribute to get the source of the content of the element or outerHTML for the source with the current element.", "There is not really a straightforward way of getting the HTML source code of a webelement. You will have to use JavaScript. I am not too sure about python bindings, but you can easily do like this in Java. I am sure there must be something similar to JavascriptExecutor class in Python."]}, {"question": "This code reads thefile.csv, makes changes, and writes results to thefile_subset1.", "answers": ["In Python 2, open outfile with mode 'wb' instead of 'w'.  The csv.writer writes \\r\\n into the file directly.  If you don't open the file in binary mode, it will write \\r\\r\\n because on Windows text mode will translate each \\n into \\r\\n.", "Opening the file in binary mode \"wb\" will not work in Python 3+.  Or rather, you'd have to convert your data to binary before writing it.  That's just a hassle."]}, {"question": "Why does the following behave unexpectedly in Python?", "answers": ["Take a look at this:", "In summary - let me emphasize: Do not use is to compare integers."]}, {"question": "Is there a way to rename a dictionary key, without reassigning its value to a new name and removing the old name key; and without iterating through dict key/value?\nIn case of OrderedDict, do the same, while keeping that key's position.", "answers": ["For a regular dict, you can use:", "Using a check for newkey!=oldkey, this way you can do:"]}, {"question": "I'm running a program which is processing 30,000 similar files. A random number of them are stopping and producing this error...", "answers": ["read_csv takes an encoding option to deal with files in different formats. I mostly use read_csv('file', encoding = \"ISO-8859-1\"), or alternatively encoding = \"utf-8\" for reading, and generally utf-8 for to_csv.", "Simplest of all Solutions:"]}, {"question": "I noticed a Python script I was writing was acting squirrelly, and traced it to an infinite loop, where the loop condition was while line is not ''. Running through it in the debugger, it turned out that line was in fact ''. When I changed it to !='' rather than is not '', it worked fine. ", "answers": ["For all built-in Python objects (like\n  strings, lists, dicts, functions,\n  etc.), if x is y, then x==y is also\n  True.", "I would like to show a little example on how is and == are involved in immutable types. Try that:"]}, {"question": "Is there a way to make Python logging using the logging module automatically output things to stdout in addition to the log file where they are supposed to go? For example, I'd like all calls to logger.warning, logger.critical, logger.error to go to their intended places but in addition always be copied to stdout. This is to avoid duplicating messages like:", "answers": ["All logging output is handled by the handlers; just add a logging.StreamHandler() to the root logger.", "The simplest way to log to stdout:"]}, {"question": "Suppose I have:", "answers": ["Similarly, ", "And if you want to access more than one column at a time you could do:"]}, {"question": "Is this correct? Is there a better way to structure this? Will this cover all my bases? ", "answers": ["Have a look at the Requests exception docs.  In short:", "One additional suggestion to be explicit. It seems best to go from specific to general down the stack of errors to get the desired error to be caught, so the specific ones don't get masked by the general one."]}, {"question": "What is the best way to extend a dictionary with another one while avoiding the use of a for loop? For instance:", "answers": ["Latest Python Standard Library Documentation", "A beautiful gem in this closed question:"]}, {"question": "I am using Python 3.2.1 and I can't import the StringIO module. I use \nio.StringIO and it works, but I can't use it with numpy's genfromtxt like this:", "answers": ["when i write import StringIO it says there is no such module.", "In my case I have used:"]}, {"question": "I am trying to get a Python script to run on the linux server I'm connected to via ssh. The script uses mysqldb. I have all the other components I need, but when I try to install mySQLdb via setuptools like so:, ", "answers": ["mySQLdb is a python interface for mysql, but it is not mysql itself. And apparently mySQLdb needs the command 'mysql_config', so you need to install that first.", "I was installing python-mysql on Ubuntu 12.04 using"]}, {"question": "I have a list l:", "answers": ["Do-something if <condition>, else do-something else.", "The reason you're getting this error has to do with how the list comprehension is performed."]}, {"question": "I want to iterate over each line of an entire file. One way to do this is by reading the entire file, saving it to a list, then going over the line of interest. This method uses a lot of memory, so I am looking for an alternative.", "answers": ["The correct, fully Pythonic way to read a file is the following:", "Two memory efficient ways in ranked order (first is best) -"]}, {"question": "I came across the following header format for Python source files in a document about Python coding guidelines:", "answers": ["Its all metadata for the Foobar module.", "I strongly favour minimal file headers, by which I mean just:"]}, {"question": "I have a problem with the transfer of variable 'insurance_mode' by the decorator. I would do it by the following decorator statement:", "answers": ["The syntax for decorators with arguments is a bit different - the decorator with arguments should return a function that will take a function and return another function. So it should really return a normal decorator. A bit confusing, right? What I mean is:", "Edit : for an in-depth understanding of the mental model of decorators, take a look at this awesome Pycon Talk. well worth the 30 minutes."]}, {"question": "How do I declare an array in Python?", "answers": ["Now variable refers to an empty list*.", "This is surprisingly complex topic in Python. "]}, {"question": "Suppose I have a df which has columns of 'ID', 'col_1', 'col_2'. And I define a function :", "answers": ["Here's an example using apply on the dataframe, which I am calling with axis = 1. ", "There is a clean, one-line way of doing this in Pandas:"]}, {"question": "I'm new to programming and started with Python about two months ago and am going over Sweigart's Automate the Boring Stuff with Python text. I'm using IDLE and already installed the Selenium module and the Firefox browser.", "answers": ["selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH.", "This solved it for me."]}, {"question": "Imagine this directory structure:", "answers": ["Everyone seems to want to tell you what you should be doing rather than just answering the question.", "Here is the solution which works for me:"]}, {"question": "\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\r\n                ", "answers": ["ctypes module is part of the standard library, and therefore is more stable and widely available than swig, which always tended to give me problems.", "You should have a look at Boost.Python. Here is the short introduction taken from their website:"]}, {"question": "I am writing a project in Django and I see that 80% of the code is in the file models.py. This code is confusing and, after a certain time, I cease to understand what is really happening.", "answers": ["It seems like you are asking about the difference between the data model and the domain model \u2013\u00a0the latter is where you can find the business logic and entities as perceived by your end user, the former is where you actually store your data.", "I usually implement a service layer in between views and models. This acts like your project's API and gives you a good helicopter view of what is going on. I inherited this practice from a colleague of mine that uses this layering technique a lot with Java projects (JSF), e.g:"]}, {"question": "I have constructed a condition that extract exactly one row from my data frame:", "answers": ["If you have a DataFrame with only one row, then access the first (only) row as a Series using iloc, and then the value using the column name:", "These are fast access for scalars"]}, {"question": "Is there a way to conveniently define a C-like structure in Python? I'm tired of writing stuff like:", "answers": ["With the introduction of Data Classes in Python 3.7 we get very close. ", "Use a named tuple, which was added to the collections module in the standard library in Python 2.6. It's also possible to use Raymond Hettinger's named tuple recipe if you need to support Python 2.4."]}, {"question": "I have a Pandas Dataframe as below:", "answers": ["I believe DataFrame.fillna() will do this for you.", "It is not guaranteed that the slicing returns a view or a copy. You can do"]}, {"question": "I know there is a method for a Python list to return the first index of something:", "answers": ["Yes, given an array, array, and a value, item to search for, you can use np.where as:", "If you need the index of the first occurrence of only one value, you can use nonzero (or where, which amounts to the same thing in this case):"]}, {"question": "I see people are using any to gather another list to see if an item exists in a list, but is there a quick way to just do something like this?", "answers": ["You can use this syntax:", "In addition to what other have said, you may also be interested to know that what in does is to call the list.__contains__ method, that you can define on any class you write and can get extremely handy to use python at his full extent. \u00a0"]}, {"question": "Suppose the following:", "answers": ["Two options that don't require copying the whole set:", "Least code would be:"]}, {"question": "randrange(start, stop) only takes integer arguments. So how would I get a random number between two float values?", "answers": ["Use random.uniform(a, b):", "if you want generate a random float with N digits to the right of point, you can make this : "]}, {"question": "Given a Python object of any kind, is there an easy way to get the list of all methods that this object has?", "answers": ["For many objects, you can use this code, replacing 'object' with the object you're interested in:", "You can use the built in dir() function to get a list of all the attributes a module has.  Try this at the command line to see how it works."]}, {"question": "str.split(//) does not seem to work like Ruby does. Is there a simple way of doing this without looping?", "answers": ["You need list", "You take the string and pass it to list()"]}, {"question": "I need help with setting the limits of y-axis on matplotlib. Here is the code that I tried, unsuccessfully.", "answers": ["Get current axis via plt.gca(), and then set its limits:", "Another workaround is to get the plot's axes and reassign changing only the y-values:"]}, {"question": "What's all this fuss about Python and CPython (Jython,IronPython), I don't get it:", "answers": ["CPython is the original Python implementation. It is the implementation you download from Python.org. People call it CPython to distinguish it from other, later, Python implementations, and to distinguish the implementation of the language engine from the Python programming language itself.", "You need to distinguish between a language and an implementation. Python is a language, "]}, {"question": "Is there any benefit in using compile for regular expressions in Python?", "answers": ["I've had a lot of experience running a compiled regex 1000s of times versus compiling on-the-fly, and have not noticed any perceivable difference.  Obviously, this is anecdotal, and certainly not a great argument against compiling, but I've found the difference to be negligible.", "For me, the biggest benefit to re.compile is being able to separate definition of the regex from its use."]}, {"question": "I'm using the subprocess module to start a subprocess and connect to its output stream (standard output). I want to be able to execute non-blocking reads on its standard output. Is there a way to make .readline non-blocking or to check if there is data on the stream before I invoke .readline? I'd like this to be portable or at least work under Windows and Linux.", "answers": ["fcntl, select, asyncproc won't help in this case.", "I have often had a similar problem; Python programs I write frequently need to have the ability to execute some primary functionality while simultaneously accepting user input from the command line (stdin). Simply putting the user input handling functionality in another thread doesn't solve the problem because readline() blocks and has no timeout. If the primary functionality is complete and there is no longer any need to wait for further user input I typically want my program to exit, but it can't because readline() is still blocking in the other thread waiting for a line. A solution I have found to this problem is to make stdin a non-blocking file using the fcntl module:"]}, {"question": "I want to delete the file filename if it exists.  Is it proper to say", "answers": ["A more pythonic way would be:", "I prefer to suppress an exception rather than checking for the file's existence, to avoid a TOCTTOU bug.  Matt's answer is a good example of this, but we can simplify it slightly under Python 3, using contextlib.suppress():"]}, {"question": "I've been working on a web app using Django, and I'm curious if there is a way to schedule a job to run periodically. ", "answers": ["One solution that I have employed is to do this:", "Celery is a distributed task queue, built on AMQP (RabbitMQ). It also handles periodic tasks in a cron-like fashion (see periodic tasks). Depending on your app, it might be worth a gander."]}, {"question": "I have a list of 2-item tuples and I'd like to convert them to 2 lists where the first contains the first item in each tuple and the second list holds the second item.", "answers": ["zip is its own inverse! Provided you use the special * operator.", "You could also do"]}, {"question": "What is the related_name argument useful for on ManyToManyField and ForeignKey fields? For example, given the following code, what is the effect of related_name='maps'?", "answers": ["The related_name attribute specifies the name of the reverse relation from the User model back to your model.", "To add to existing  answer - related name is a must in case there 2 FKs in the model that point to the same table. For example in case of Bill of material"]}, {"question": "How can I use ORDER BY descending in a SQLAlchemy query like the following?", "answers": ["Just as an FYI, you can also specify those things as column attributes. For instance, I might have done:", "Usage from @jpmc26"]}, {"question": "I have a file called tester.py, located on /project.", "answers": ["Take a look at the Packages documentation (Section 6.4).", "In lib\\BoxTime.py, write a function foo() like this:"]}, {"question": "Python is installed in a local directory.  ", "answers": ["Based on your comments to orip's post, I guess this is what happened:", "Does"]}, {"question": "I am very new to Python and trying to > pip install linkchecker on Windows 7. Some notes:", "answers": ["Just install any package with the \"config --global http.sslVerify false\" statement", "You can specify a cert with this param:"]}, {"question": "I'm having trouble parsing HTML elements with \"class\" attribute using Beautifulsoup. The code looks like this", "answers": ["You can refine your search to only find those divs with a given class using BS3:", "From the documentation:"]}, {"question": "What the difference is between flush() and commit() in SQLAlchemy?", "answers": ["A Session object is basically an ongoing transaction of changes to a database (update, insert, delete). These operations aren't persisted to the database until they are committed (if your program aborts for some reason in mid-session transaction, any uncommitted changes within are lost).", "This does not strictly answer the original question but some people have mentioned that with session.autoflush = True you don't have to use session.flush()... And this is not always true."]}, {"question": "I'm having a hard time wrapping my brain around PEP 380.", "answers": ["Let's get one thing out of the way first. The explanation that yield from g is equivalent to for v in g: yield v does not even begin to do justice to what yield from is all about. Because, let's face it, if all yield from does is expand the for loop, then it does not warrant adding yield from to the language and preclude a whole bunch of new features from being implemented in Python 2.x.", "What are the situations where \"yield from\" is useful?"]}, {"question": "How do I learn where the source file for a given Python module is installed? Is the method different on Windows than on Linux?", "answers": ["For a pure python module you can find the source by looking at themodule.__file__.\nThe datetime module, however, is written in C, and therefore datetime.__file__ points to a .so file (there is no datetime.__file__ on Windows), and therefore, you can't see the source.", "Running python -v from the command line should tell you what is being imported and from where.  This works for me on Windows and Mac OS X."]}, {"question": "Is there a performance or code maintenance issue with using assert as part of the standard code instead of using it just for debugging purposes?", "answers": ["Asserts should be used to test conditions that should never happen.  The purpose is to crash early in the case of a corrupt program state.", "\"assert\" statements are removed when the compilation is optimized.  So, yes, there are both performance and functional differences."]}, {"question": "In C++, I can iterate over an std::string like this:", "answers": ["As Johannes pointed out, ", "If you need access to the index as you iterate through the string, use enumerate():"]}]